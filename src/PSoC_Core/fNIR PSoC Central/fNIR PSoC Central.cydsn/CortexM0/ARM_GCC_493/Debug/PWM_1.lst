ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_1_initVar
  18              		.bss
  19              		.type	PWM_1_initVar, %object
  20              		.size	PWM_1_initVar, 1
  21              	PWM_1_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_1_Init
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_1_Init, %function
  29              	PWM_1_Init:
  30              	.LFB2:
  31              		.file 1 "Generated_Source\\PSoC4\\PWM_1.c"
   1:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/PWM_1.c **** * File Name: PWM_1.c
   3:Generated_Source\PSoC4/PWM_1.c **** * Version 2.10
   4:Generated_Source\PSoC4/PWM_1.c **** *
   5:Generated_Source\PSoC4/PWM_1.c **** * Description:
   6:Generated_Source\PSoC4/PWM_1.c **** *  This file provides the source code to the API for the PWM_1
   7:Generated_Source\PSoC4/PWM_1.c **** *  component
   8:Generated_Source\PSoC4/PWM_1.c **** *
   9:Generated_Source\PSoC4/PWM_1.c **** * Note:
  10:Generated_Source\PSoC4/PWM_1.c **** *  None
  11:Generated_Source\PSoC4/PWM_1.c **** *
  12:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
  13:Generated_Source\PSoC4/PWM_1.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/PWM_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/PWM_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/PWM_1.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/PWM_1.c **** 
  19:Generated_Source\PSoC4/PWM_1.c **** #include "PWM_1.h"
  20:Generated_Source\PSoC4/PWM_1.c **** 
  21:Generated_Source\PSoC4/PWM_1.c **** uint8 PWM_1_initVar = 0u;
  22:Generated_Source\PSoC4/PWM_1.c **** 
  23:Generated_Source\PSoC4/PWM_1.c **** 
  24:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Init
  26:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 2


  27:Generated_Source\PSoC4/PWM_1.c **** *
  28:Generated_Source\PSoC4/PWM_1.c **** * Summary:
  29:Generated_Source\PSoC4/PWM_1.c **** *  Initialize/Restore default PWM_1 configuration.
  30:Generated_Source\PSoC4/PWM_1.c **** *
  31:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
  32:Generated_Source\PSoC4/PWM_1.c **** *  None
  33:Generated_Source\PSoC4/PWM_1.c **** *
  34:Generated_Source\PSoC4/PWM_1.c **** * Return:
  35:Generated_Source\PSoC4/PWM_1.c **** *  None
  36:Generated_Source\PSoC4/PWM_1.c **** *
  37:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
  38:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Init(void)
  39:Generated_Source\PSoC4/PWM_1.c **** {
  32              		.loc 1 39 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40:Generated_Source\PSoC4/PWM_1.c **** 
  41:Generated_Source\PSoC4/PWM_1.c ****     /* Set values from customizer to CTRL */
  42:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__QUAD == PWM_1_CONFIG)
  43:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL_REG = PWM_1_CTRL_QUAD_BASE_CONFIG;
  44:Generated_Source\PSoC4/PWM_1.c ****         
  45:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to CTRL1 */
  46:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_TRIG_CONTROL1_REG  = PWM_1_QUAD_SIGNALS_MODES;
  47:Generated_Source\PSoC4/PWM_1.c **** 
  48:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to INTR */
  49:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_QUAD_INTERRUPT_MASK);
  50:Generated_Source\PSoC4/PWM_1.c ****         
  51:Generated_Source\PSoC4/PWM_1.c ****          /* Set other values */
  52:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetCounterMode(PWM_1_COUNT_DOWN);
  53:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WritePeriod(PWM_1_QUAD_PERIOD_INIT_VALUE);
  54:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WriteCounter(PWM_1_QUAD_PERIOD_INIT_VALUE);
  55:Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__QUAD == PWM_1_CONFIG) */
  56:Generated_Source\PSoC4/PWM_1.c **** 
  57:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
  58:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL_REG = PWM_1_CTRL_TIMER_BASE_CONFIG;
  59:Generated_Source\PSoC4/PWM_1.c ****         
  60:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to CTRL1 */
  61:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_TRIG_CONTROL1_REG  = PWM_1_TIMER_SIGNALS_MODES;
  62:Generated_Source\PSoC4/PWM_1.c ****     
  63:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to INTR */
  64:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_TC_INTERRUPT_MASK);
  65:Generated_Source\PSoC4/PWM_1.c ****         
  66:Generated_Source\PSoC4/PWM_1.c ****         /* Set other values from customizer */
  67:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WritePeriod(PWM_1_TC_PERIOD_VALUE );
  68:Generated_Source\PSoC4/PWM_1.c **** 
  69:Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__COMPARE == PWM_1_TC_COMP_CAP_MODE)
  70:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompare(PWM_1_TC_COMPARE_VALUE);
  71:Generated_Source\PSoC4/PWM_1.c **** 
  72:Generated_Source\PSoC4/PWM_1.c ****             #if (1u == PWM_1_TC_COMPARE_SWAP)
  73:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_SetCompareSwap(1u);
  74:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_WriteCompareBuf(PWM_1_TC_COMPARE_BUF_VALUE);
  75:Generated_Source\PSoC4/PWM_1.c ****             #endif  /* (1u == PWM_1_TC_COMPARE_SWAP) */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 3


  76:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__COMPARE == PWM_1_TC_COMP_CAP_MODE) */
  77:Generated_Source\PSoC4/PWM_1.c **** 
  78:Generated_Source\PSoC4/PWM_1.c ****         /* Initialize counter value */
  79:Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_CY_TCPWM_V2 && PWM_1_TIMER_UPDOWN_CNT_USED && !PWM_1_CY_TCPWM_4000)
  80:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCounter(1u);
  81:Generated_Source\PSoC4/PWM_1.c ****         #elif(PWM_1__COUNT_DOWN == PWM_1_TC_COUNTER_MODE)
  82:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCounter(PWM_1_TC_PERIOD_VALUE);
  83:Generated_Source\PSoC4/PWM_1.c ****         #else
  84:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCounter(0u);
  85:Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_CY_TCPWM_V2 && PWM_1_TIMER_UPDOWN_CNT_USED && !PWM_1_CY_TCPWM_4000) */
  86:Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__TIMER == PWM_1_CONFIG) */
  87:Generated_Source\PSoC4/PWM_1.c **** 
  88:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
  89:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL_REG = PWM_1_CTRL_PWM_BASE_CONFIG;
  40              		.loc 1 89 0
  41 0004 104B     		ldr	r3, .L2
  42 0006 8022     		mov	r2, #128
  43 0008 D204     		lsl	r2, r2, #19
  44 000a 1A60     		str	r2, [r3]
  90:Generated_Source\PSoC4/PWM_1.c **** 
  91:Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM_PR == PWM_1_PWM_MODE)
  92:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |= PWM_1_CTRL_PWM_RUN_MODE;
  93:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCounter(PWM_1_PWM_PR_INIT_VALUE);
  94:Generated_Source\PSoC4/PWM_1.c ****         #else
  95:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |= PWM_1_CTRL_PWM_ALIGN | PWM_1_CTRL_PWM_KILL_EVENT;
  45              		.loc 1 95 0
  46 000c 0E4B     		ldr	r3, .L2
  47 000e 0E4A     		ldr	r2, .L2
  48 0010 1268     		ldr	r2, [r2]
  49 0012 1A60     		str	r2, [r3]
  96:Generated_Source\PSoC4/PWM_1.c ****             
  97:Generated_Source\PSoC4/PWM_1.c ****             /* Initialize counter value */
  98:Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1_CY_TCPWM_V2 && PWM_1_PWM_UPDOWN_CNT_USED && !PWM_1_CY_TCPWM_4000)
  99:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_WriteCounter(1u);
 100:Generated_Source\PSoC4/PWM_1.c ****             #elif (PWM_1__RIGHT == PWM_1_PWM_ALIGN)
 101:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_WriteCounter(PWM_1_PWM_PERIOD_VALUE);
 102:Generated_Source\PSoC4/PWM_1.c ****             #else 
 103:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_WriteCounter(0u);
  50              		.loc 1 103 0
  51 0014 0020     		mov	r0, #0
  52 0016 FFF7FEFF 		bl	PWM_1_WriteCounter
 104:Generated_Source\PSoC4/PWM_1.c ****             #endif  /* (PWM_1_CY_TCPWM_V2 && PWM_1_PWM_UPDOWN_CNT_USED && !PWM_1_CY_TCPWM_4000) */
 105:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM_PR == PWM_1_PWM_MODE) */
 106:Generated_Source\PSoC4/PWM_1.c **** 
 107:Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM_DT == PWM_1_PWM_MODE)
 108:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |= PWM_1_CTRL_PWM_DEAD_TIME_CYCLE;
 109:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM_DT == PWM_1_PWM_MODE) */
 110:Generated_Source\PSoC4/PWM_1.c **** 
 111:Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM == PWM_1_PWM_MODE)
 112:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |= PWM_1_CTRL_PWM_PRESCALER;
  53              		.loc 1 112 0
  54 001a 0B4B     		ldr	r3, .L2
  55 001c 0A4A     		ldr	r2, .L2
  56 001e 1268     		ldr	r2, [r2]
  57 0020 1A60     		str	r2, [r3]
 113:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM == PWM_1_PWM_MODE) */
 114:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 4


 115:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to CTRL1 */
 116:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_TRIG_CONTROL1_REG  = PWM_1_PWM_SIGNALS_MODES;
  58              		.loc 1 116 0
  59 0022 0A4B     		ldr	r3, .L2+4
  60 0024 0C22     		mov	r2, #12
  61 0026 1A60     		str	r2, [r3]
 117:Generated_Source\PSoC4/PWM_1.c ****     
 118:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to INTR */
 119:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_PWM_INTERRUPT_MASK);
  62              		.loc 1 119 0
  63 0028 0120     		mov	r0, #1
  64 002a FFF7FEFF 		bl	PWM_1_SetInterruptMode
 120:Generated_Source\PSoC4/PWM_1.c **** 
 121:Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to CTRL2 */
 122:Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM_PR == PWM_1_PWM_MODE)
 123:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TRIG_CONTROL2_REG =
 124:Generated_Source\PSoC4/PWM_1.c ****                     (PWM_1_CC_MATCH_NO_CHANGE    |
 125:Generated_Source\PSoC4/PWM_1.c ****                     PWM_1_OVERLOW_NO_CHANGE      |
 126:Generated_Source\PSoC4/PWM_1.c ****                     PWM_1_UNDERFLOW_NO_CHANGE);
 127:Generated_Source\PSoC4/PWM_1.c ****         #else
 128:Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__LEFT == PWM_1_PWM_ALIGN)
 129:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_LEFT;
  65              		.loc 1 129 0
  66 002e 084B     		ldr	r3, .L2+8
  67 0030 3122     		mov	r2, #49
  68 0032 1A60     		str	r2, [r3]
 130:Generated_Source\PSoC4/PWM_1.c ****             #endif  /* ( PWM_1_PWM_LEFT == PWM_1_PWM_ALIGN) */
 131:Generated_Source\PSoC4/PWM_1.c **** 
 132:Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__RIGHT == PWM_1_PWM_ALIGN)
 133:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_RIGHT;
 134:Generated_Source\PSoC4/PWM_1.c ****             #endif  /* ( PWM_1_PWM_RIGHT == PWM_1_PWM_ALIGN) */
 135:Generated_Source\PSoC4/PWM_1.c **** 
 136:Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__CENTER == PWM_1_PWM_ALIGN)
 137:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_CENTER;
 138:Generated_Source\PSoC4/PWM_1.c ****             #endif  /* ( PWM_1_PWM_CENTER == PWM_1_PWM_ALIGN) */
 139:Generated_Source\PSoC4/PWM_1.c **** 
 140:Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__ASYMMETRIC == PWM_1_PWM_ALIGN)
 141:Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_ASYM;
 142:Generated_Source\PSoC4/PWM_1.c ****             #endif  /* (PWM_1__ASYMMETRIC == PWM_1_PWM_ALIGN) */
 143:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM_PR == PWM_1_PWM_MODE) */
 144:Generated_Source\PSoC4/PWM_1.c **** 
 145:Generated_Source\PSoC4/PWM_1.c ****         /* Set other values from customizer */
 146:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WritePeriod(PWM_1_PWM_PERIOD_VALUE );
  69              		.loc 1 146 0
  70 0034 074B     		ldr	r3, .L2+12
  71 0036 181C     		mov	r0, r3
  72 0038 FFF7FEFF 		bl	PWM_1_WritePeriod
 147:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WriteCompare(PWM_1_PWM_COMPARE_VALUE);
  73              		.loc 1 147 0
  74 003c 0020     		mov	r0, #0
  75 003e FFF7FEFF 		bl	PWM_1_WriteCompare
 148:Generated_Source\PSoC4/PWM_1.c **** 
 149:Generated_Source\PSoC4/PWM_1.c ****         #if (1u == PWM_1_PWM_COMPARE_SWAP)
 150:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_SetCompareSwap(1u);
 151:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompareBuf(PWM_1_PWM_COMPARE_BUF_VALUE);
 152:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (1u == PWM_1_PWM_COMPARE_SWAP) */
 153:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 5


 154:Generated_Source\PSoC4/PWM_1.c ****         #if (1u == PWM_1_PWM_PERIOD_SWAP)
 155:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_SetPeriodSwap(1u);
 156:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WritePeriodBuf(PWM_1_PWM_PERIOD_BUF_VALUE);
 157:Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (1u == PWM_1_PWM_PERIOD_SWAP) */
 158:Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
 159:Generated_Source\PSoC4/PWM_1.c ****     
 160:Generated_Source\PSoC4/PWM_1.c **** }
  76              		.loc 1 160 0
  77 0042 BD46     		mov	sp, r7
  78              		@ sp needed
  79 0044 80BD     		pop	{r7, pc}
  80              	.L3:
  81 0046 C046     		.align	2
  82              	.L2:
  83 0048 00012040 		.word	1075839232
  84 004c 24012040 		.word	1075839268
  85 0050 28012040 		.word	1075839272
  86 0054 FFFF0000 		.word	65535
  87              		.cfi_endproc
  88              	.LFE2:
  89              		.size	PWM_1_Init, .-PWM_1_Init
  90              		.section	.text.PWM_1_Enable,"ax",%progbits
  91              		.align	2
  92              		.global	PWM_1_Enable
  93              		.code	16
  94              		.thumb_func
  95              		.type	PWM_1_Enable, %function
  96              	PWM_1_Enable:
  97              	.LFB3:
 161:Generated_Source\PSoC4/PWM_1.c **** 
 162:Generated_Source\PSoC4/PWM_1.c **** 
 163:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Enable
 165:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 166:Generated_Source\PSoC4/PWM_1.c **** *
 167:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 168:Generated_Source\PSoC4/PWM_1.c **** *  Enables the PWM_1.
 169:Generated_Source\PSoC4/PWM_1.c **** *
 170:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 171:Generated_Source\PSoC4/PWM_1.c **** *  None
 172:Generated_Source\PSoC4/PWM_1.c **** *
 173:Generated_Source\PSoC4/PWM_1.c **** * Return:
 174:Generated_Source\PSoC4/PWM_1.c **** *  None
 175:Generated_Source\PSoC4/PWM_1.c **** *
 176:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 177:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Enable(void)
 178:Generated_Source\PSoC4/PWM_1.c **** {
  98              		.loc 1 178 0
  99              		.cfi_startproc
 100 0000 90B5     		push	{r4, r7, lr}
 101              		.cfi_def_cfa_offset 12
 102              		.cfi_offset 4, -12
 103              		.cfi_offset 7, -8
 104              		.cfi_offset 14, -4
 105 0002 83B0     		sub	sp, sp, #12
 106              		.cfi_def_cfa_offset 24
 107 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 6


 108              		.cfi_def_cfa_register 7
 179:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 180:Generated_Source\PSoC4/PWM_1.c **** 
 181:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 109              		.loc 1 181 0
 110 0006 FC1D     		add	r4, r7, #7
 111 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 112 000c 031C     		mov	r3, r0
 113 000e 2370     		strb	r3, [r4]
 182:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_BLOCK_CONTROL_REG |= PWM_1_MASK;
 114              		.loc 1 182 0
 115 0010 084B     		ldr	r3, .L5
 116 0012 084A     		ldr	r2, .L5
 117 0014 1268     		ldr	r2, [r2]
 118 0016 0121     		mov	r1, #1
 119 0018 0A43     		orr	r2, r1
 120 001a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 121              		.loc 1 183 0
 122 001c FB1D     		add	r3, r7, #7
 123 001e 1B78     		ldrb	r3, [r3]
 124 0020 181C     		mov	r0, r3
 125 0022 FFF7FEFF 		bl	CyExitCriticalSection
 184:Generated_Source\PSoC4/PWM_1.c **** 
 185:Generated_Source\PSoC4/PWM_1.c ****     /* Start Timer or PWM if start input is absent */
 186:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
 187:Generated_Source\PSoC4/PWM_1.c ****         #if (0u == PWM_1_PWM_START_SIGNAL_PRESENT)
 188:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TriggerCommand(PWM_1_MASK, PWM_1_CMD_START);
 126              		.loc 1 188 0
 127 0026 0120     		mov	r0, #1
 128 0028 1821     		mov	r1, #24
 129 002a FFF7FEFF 		bl	PWM_1_TriggerCommand
 189:Generated_Source\PSoC4/PWM_1.c ****         #endif /* (0u == PWM_1_PWM_START_SIGNAL_PRESENT) */
 190:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
 191:Generated_Source\PSoC4/PWM_1.c **** 
 192:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
 193:Generated_Source\PSoC4/PWM_1.c ****         #if (0u == PWM_1_TC_START_SIGNAL_PRESENT)
 194:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TriggerCommand(PWM_1_MASK, PWM_1_CMD_START);
 195:Generated_Source\PSoC4/PWM_1.c ****         #endif /* (0u == PWM_1_TC_START_SIGNAL_PRESENT) */
 196:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1__TIMER == PWM_1_CONFIG) */
 197:Generated_Source\PSoC4/PWM_1.c ****     
 198:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__QUAD == PWM_1_CONFIG)
 199:Generated_Source\PSoC4/PWM_1.c ****         #if (0u != PWM_1_QUAD_AUTO_START)
 200:Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TriggerCommand(PWM_1_MASK, PWM_1_CMD_RELOAD);
 201:Generated_Source\PSoC4/PWM_1.c ****         #endif /* (0u != PWM_1_QUAD_AUTO_START) */
 202:Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__QUAD == PWM_1_CONFIG) */
 203:Generated_Source\PSoC4/PWM_1.c **** }
 130              		.loc 1 203 0
 131 002e BD46     		mov	sp, r7
 132 0030 03B0     		add	sp, sp, #12
 133              		@ sp needed
 134 0032 90BD     		pop	{r4, r7, pc}
 135              	.L6:
 136              		.align	2
 137              	.L5:
 138 0034 00002040 		.word	1075838976
 139              		.cfi_endproc
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 7


 140              	.LFE3:
 141              		.size	PWM_1_Enable, .-PWM_1_Enable
 142              		.section	.text.PWM_1_Start,"ax",%progbits
 143              		.align	2
 144              		.global	PWM_1_Start
 145              		.code	16
 146              		.thumb_func
 147              		.type	PWM_1_Start, %function
 148              	PWM_1_Start:
 149              	.LFB4:
 204:Generated_Source\PSoC4/PWM_1.c **** 
 205:Generated_Source\PSoC4/PWM_1.c **** 
 206:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 207:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Start
 208:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 209:Generated_Source\PSoC4/PWM_1.c **** *
 210:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 211:Generated_Source\PSoC4/PWM_1.c **** *  Initializes the PWM_1 with default customizer
 212:Generated_Source\PSoC4/PWM_1.c **** *  values when called the first time and enables the PWM_1.
 213:Generated_Source\PSoC4/PWM_1.c **** *  For subsequent calls the configuration is left unchanged and the component is
 214:Generated_Source\PSoC4/PWM_1.c **** *  just enabled.
 215:Generated_Source\PSoC4/PWM_1.c **** *
 216:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 217:Generated_Source\PSoC4/PWM_1.c **** *  None
 218:Generated_Source\PSoC4/PWM_1.c **** *
 219:Generated_Source\PSoC4/PWM_1.c **** * Return:
 220:Generated_Source\PSoC4/PWM_1.c **** *  None
 221:Generated_Source\PSoC4/PWM_1.c **** *
 222:Generated_Source\PSoC4/PWM_1.c **** * Global variables:
 223:Generated_Source\PSoC4/PWM_1.c **** *  PWM_1_initVar: global variable is used to indicate initial
 224:Generated_Source\PSoC4/PWM_1.c **** *  configuration of this component.  The variable is initialized to zero and set
 225:Generated_Source\PSoC4/PWM_1.c **** *  to 1 the first time PWM_1_Start() is called. This allows
 226:Generated_Source\PSoC4/PWM_1.c **** *  enabling/disabling a component without re-initialization in all subsequent
 227:Generated_Source\PSoC4/PWM_1.c **** *  calls to the PWM_1_Start() routine.
 228:Generated_Source\PSoC4/PWM_1.c **** *
 229:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 230:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Start(void)
 231:Generated_Source\PSoC4/PWM_1.c **** {
 150              		.loc 1 231 0
 151              		.cfi_startproc
 152 0000 80B5     		push	{r7, lr}
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 7, -8
 155              		.cfi_offset 14, -4
 156 0002 00AF     		add	r7, sp, #0
 157              		.cfi_def_cfa_register 7
 232:Generated_Source\PSoC4/PWM_1.c ****     if (0u == PWM_1_initVar)
 158              		.loc 1 232 0
 159 0004 064B     		ldr	r3, .L9
 160 0006 1B78     		ldrb	r3, [r3]
 161 0008 002B     		cmp	r3, #0
 162 000a 04D1     		bne	.L8
 233:Generated_Source\PSoC4/PWM_1.c ****     {
 234:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_Init();
 163              		.loc 1 234 0
 164 000c FFF7FEFF 		bl	PWM_1_Init
 235:Generated_Source\PSoC4/PWM_1.c ****         PWM_1_initVar = 1u;
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 8


 165              		.loc 1 235 0
 166 0010 034B     		ldr	r3, .L9
 167 0012 0122     		mov	r2, #1
 168 0014 1A70     		strb	r2, [r3]
 169              	.L8:
 236:Generated_Source\PSoC4/PWM_1.c ****     }
 237:Generated_Source\PSoC4/PWM_1.c **** 
 238:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_Enable();
 170              		.loc 1 238 0
 171 0016 FFF7FEFF 		bl	PWM_1_Enable
 239:Generated_Source\PSoC4/PWM_1.c **** }
 172              		.loc 1 239 0
 173 001a BD46     		mov	sp, r7
 174              		@ sp needed
 175 001c 80BD     		pop	{r7, pc}
 176              	.L10:
 177 001e C046     		.align	2
 178              	.L9:
 179 0020 00000000 		.word	PWM_1_initVar
 180              		.cfi_endproc
 181              	.LFE4:
 182              		.size	PWM_1_Start, .-PWM_1_Start
 183              		.section	.text.PWM_1_Stop,"ax",%progbits
 184              		.align	2
 185              		.global	PWM_1_Stop
 186              		.code	16
 187              		.thumb_func
 188              		.type	PWM_1_Stop, %function
 189              	PWM_1_Stop:
 190              	.LFB5:
 240:Generated_Source\PSoC4/PWM_1.c **** 
 241:Generated_Source\PSoC4/PWM_1.c **** 
 242:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 243:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Stop
 244:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 245:Generated_Source\PSoC4/PWM_1.c **** *
 246:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 247:Generated_Source\PSoC4/PWM_1.c **** *  Disables the PWM_1.
 248:Generated_Source\PSoC4/PWM_1.c **** *
 249:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 250:Generated_Source\PSoC4/PWM_1.c **** *  None
 251:Generated_Source\PSoC4/PWM_1.c **** *
 252:Generated_Source\PSoC4/PWM_1.c **** * Return:
 253:Generated_Source\PSoC4/PWM_1.c **** *  None
 254:Generated_Source\PSoC4/PWM_1.c **** *
 255:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 256:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Stop(void)
 257:Generated_Source\PSoC4/PWM_1.c **** {
 191              		.loc 1 257 0
 192              		.cfi_startproc
 193 0000 90B5     		push	{r4, r7, lr}
 194              		.cfi_def_cfa_offset 12
 195              		.cfi_offset 4, -12
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 83B0     		sub	sp, sp, #12
 199              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 9


 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
 258:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 259:Generated_Source\PSoC4/PWM_1.c **** 
 260:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 202              		.loc 1 260 0
 203 0006 FC1D     		add	r4, r7, #7
 204 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 205 000c 031C     		mov	r3, r0
 206 000e 2370     		strb	r3, [r4]
 261:Generated_Source\PSoC4/PWM_1.c **** 
 262:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_BLOCK_CONTROL_REG &= (uint32)~PWM_1_MASK;
 207              		.loc 1 262 0
 208 0010 064B     		ldr	r3, .L12
 209 0012 064A     		ldr	r2, .L12
 210 0014 1268     		ldr	r2, [r2]
 211 0016 0121     		mov	r1, #1
 212 0018 8A43     		bic	r2, r1
 213 001a 1A60     		str	r2, [r3]
 263:Generated_Source\PSoC4/PWM_1.c **** 
 264:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 214              		.loc 1 264 0
 215 001c FB1D     		add	r3, r7, #7
 216 001e 1B78     		ldrb	r3, [r3]
 217 0020 181C     		mov	r0, r3
 218 0022 FFF7FEFF 		bl	CyExitCriticalSection
 265:Generated_Source\PSoC4/PWM_1.c **** }
 219              		.loc 1 265 0
 220 0026 BD46     		mov	sp, r7
 221 0028 03B0     		add	sp, sp, #12
 222              		@ sp needed
 223 002a 90BD     		pop	{r4, r7, pc}
 224              	.L13:
 225              		.align	2
 226              	.L12:
 227 002c 00002040 		.word	1075838976
 228              		.cfi_endproc
 229              	.LFE5:
 230              		.size	PWM_1_Stop, .-PWM_1_Stop
 231              		.section	.text.PWM_1_SetMode,"ax",%progbits
 232              		.align	2
 233              		.global	PWM_1_SetMode
 234              		.code	16
 235              		.thumb_func
 236              		.type	PWM_1_SetMode, %function
 237              	PWM_1_SetMode:
 238              	.LFB6:
 266:Generated_Source\PSoC4/PWM_1.c **** 
 267:Generated_Source\PSoC4/PWM_1.c **** 
 268:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 269:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetMode
 270:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 271:Generated_Source\PSoC4/PWM_1.c **** *
 272:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 273:Generated_Source\PSoC4/PWM_1.c **** *  Sets the operation mode of the PWM_1. This function is used when
 274:Generated_Source\PSoC4/PWM_1.c **** *  configured as a generic PWM_1 and the actual mode of operation is
 275:Generated_Source\PSoC4/PWM_1.c **** *  set at runtime. The mode must be set while the component is disabled.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 10


 276:Generated_Source\PSoC4/PWM_1.c **** *
 277:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 278:Generated_Source\PSoC4/PWM_1.c **** *  mode: Mode for the PWM_1 to operate in
 279:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 280:Generated_Source\PSoC4/PWM_1.c **** *   - PWM_1_MODE_TIMER_COMPARE - Timer / Counter with
 281:Generated_Source\PSoC4/PWM_1.c **** *                                                 compare capability
 282:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_TIMER_CAPTURE - Timer / Counter with
 283:Generated_Source\PSoC4/PWM_1.c **** *                                                 capture capability
 284:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_QUAD - Quadrature decoder
 285:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_PWM - PWM
 286:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_PWM_DT - PWM with dead time
 287:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_PWM_PR - PWM with pseudo random capability
 288:Generated_Source\PSoC4/PWM_1.c **** *
 289:Generated_Source\PSoC4/PWM_1.c **** * Return:
 290:Generated_Source\PSoC4/PWM_1.c **** *  None
 291:Generated_Source\PSoC4/PWM_1.c **** *
 292:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 293:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetMode(uint32 mode)
 294:Generated_Source\PSoC4/PWM_1.c **** {
 239              		.loc 1 294 0
 240              		.cfi_startproc
 241 0000 90B5     		push	{r4, r7, lr}
 242              		.cfi_def_cfa_offset 12
 243              		.cfi_offset 4, -12
 244              		.cfi_offset 7, -8
 245              		.cfi_offset 14, -4
 246 0002 85B0     		sub	sp, sp, #20
 247              		.cfi_def_cfa_offset 32
 248 0004 00AF     		add	r7, sp, #0
 249              		.cfi_def_cfa_register 7
 250 0006 7860     		str	r0, [r7, #4]
 295:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 296:Generated_Source\PSoC4/PWM_1.c **** 
 297:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 251              		.loc 1 297 0
 252 0008 0F23     		mov	r3, #15
 253 000a FC18     		add	r4, r7, r3
 254 000c FFF7FEFF 		bl	CyEnterCriticalSection
 255 0010 031C     		mov	r3, r0
 256 0012 2370     		strb	r3, [r4]
 298:Generated_Source\PSoC4/PWM_1.c **** 
 299:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_MODE_MASK;
 257              		.loc 1 299 0
 258 0014 0A4B     		ldr	r3, .L15
 259 0016 0A4A     		ldr	r2, .L15
 260 0018 1268     		ldr	r2, [r2]
 261 001a 0A49     		ldr	r1, .L15+4
 262 001c 0A40     		and	r2, r1
 263 001e 1A60     		str	r2, [r3]
 300:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= mode;
 264              		.loc 1 300 0
 265 0020 074B     		ldr	r3, .L15
 266 0022 074A     		ldr	r2, .L15
 267 0024 1168     		ldr	r1, [r2]
 268 0026 7A68     		ldr	r2, [r7, #4]
 269 0028 0A43     		orr	r2, r1
 270 002a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 11


 301:Generated_Source\PSoC4/PWM_1.c **** 
 302:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 271              		.loc 1 302 0
 272 002c 0F23     		mov	r3, #15
 273 002e FB18     		add	r3, r7, r3
 274 0030 1B78     		ldrb	r3, [r3]
 275 0032 181C     		mov	r0, r3
 276 0034 FFF7FEFF 		bl	CyExitCriticalSection
 303:Generated_Source\PSoC4/PWM_1.c **** }
 277              		.loc 1 303 0
 278 0038 BD46     		mov	sp, r7
 279 003a 05B0     		add	sp, sp, #20
 280              		@ sp needed
 281 003c 90BD     		pop	{r4, r7, pc}
 282              	.L16:
 283 003e C046     		.align	2
 284              	.L15:
 285 0040 00012040 		.word	1075839232
 286 0044 FFFFFFF8 		.word	-117440513
 287              		.cfi_endproc
 288              	.LFE6:
 289              		.size	PWM_1_SetMode, .-PWM_1_SetMode
 290              		.section	.text.PWM_1_SetQDMode,"ax",%progbits
 291              		.align	2
 292              		.global	PWM_1_SetQDMode
 293              		.code	16
 294              		.thumb_func
 295              		.type	PWM_1_SetQDMode, %function
 296              	PWM_1_SetQDMode:
 297              	.LFB7:
 304:Generated_Source\PSoC4/PWM_1.c **** 
 305:Generated_Source\PSoC4/PWM_1.c **** 
 306:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 307:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetQDMode
 308:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 309:Generated_Source\PSoC4/PWM_1.c **** *
 310:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 311:Generated_Source\PSoC4/PWM_1.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 312:Generated_Source\PSoC4/PWM_1.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 313:Generated_Source\PSoC4/PWM_1.c **** *
 314:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 315:Generated_Source\PSoC4/PWM_1.c **** *  qdMode: Quadrature Decoder mode
 316:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 317:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_X1 - Counts on phi 1 rising
 318:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_X2 - Counts on both edges of phi1 (2x faster)
 319:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_X4 - Counts on both edges of phi1 and phi2
 320:Generated_Source\PSoC4/PWM_1.c **** *                                        (4x faster)
 321:Generated_Source\PSoC4/PWM_1.c **** *
 322:Generated_Source\PSoC4/PWM_1.c **** * Return:
 323:Generated_Source\PSoC4/PWM_1.c **** *  None
 324:Generated_Source\PSoC4/PWM_1.c **** *
 325:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 326:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetQDMode(uint32 qdMode)
 327:Generated_Source\PSoC4/PWM_1.c **** {
 298              		.loc 1 327 0
 299              		.cfi_startproc
 300 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 12


 301              		.cfi_def_cfa_offset 12
 302              		.cfi_offset 4, -12
 303              		.cfi_offset 7, -8
 304              		.cfi_offset 14, -4
 305 0002 85B0     		sub	sp, sp, #20
 306              		.cfi_def_cfa_offset 32
 307 0004 00AF     		add	r7, sp, #0
 308              		.cfi_def_cfa_register 7
 309 0006 7860     		str	r0, [r7, #4]
 328:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 329:Generated_Source\PSoC4/PWM_1.c **** 
 330:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 310              		.loc 1 330 0
 311 0008 0F23     		mov	r3, #15
 312 000a FC18     		add	r4, r7, r3
 313 000c FFF7FEFF 		bl	CyEnterCriticalSection
 314 0010 031C     		mov	r3, r0
 315 0012 2370     		strb	r3, [r4]
 331:Generated_Source\PSoC4/PWM_1.c **** 
 332:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_QUAD_MODE_MASK;
 316              		.loc 1 332 0
 317 0014 0A4B     		ldr	r3, .L18
 318 0016 0A4A     		ldr	r2, .L18
 319 0018 1268     		ldr	r2, [r2]
 320 001a 0A49     		ldr	r1, .L18+4
 321 001c 0A40     		and	r2, r1
 322 001e 1A60     		str	r2, [r3]
 333:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= qdMode;
 323              		.loc 1 333 0
 324 0020 074B     		ldr	r3, .L18
 325 0022 074A     		ldr	r2, .L18
 326 0024 1168     		ldr	r1, [r2]
 327 0026 7A68     		ldr	r2, [r7, #4]
 328 0028 0A43     		orr	r2, r1
 329 002a 1A60     		str	r2, [r3]
 334:Generated_Source\PSoC4/PWM_1.c **** 
 335:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 330              		.loc 1 335 0
 331 002c 0F23     		mov	r3, #15
 332 002e FB18     		add	r3, r7, r3
 333 0030 1B78     		ldrb	r3, [r3]
 334 0032 181C     		mov	r0, r3
 335 0034 FFF7FEFF 		bl	CyExitCriticalSection
 336:Generated_Source\PSoC4/PWM_1.c **** }
 336              		.loc 1 336 0
 337 0038 BD46     		mov	sp, r7
 338 003a 05B0     		add	sp, sp, #20
 339              		@ sp needed
 340 003c 90BD     		pop	{r4, r7, pc}
 341              	.L19:
 342 003e C046     		.align	2
 343              	.L18:
 344 0040 00012040 		.word	1075839232
 345 0044 FFFF8FFF 		.word	-7340033
 346              		.cfi_endproc
 347              	.LFE7:
 348              		.size	PWM_1_SetQDMode, .-PWM_1_SetQDMode
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 13


 349              		.section	.text.PWM_1_SetPrescaler,"ax",%progbits
 350              		.align	2
 351              		.global	PWM_1_SetPrescaler
 352              		.code	16
 353              		.thumb_func
 354              		.type	PWM_1_SetPrescaler, %function
 355              	PWM_1_SetPrescaler:
 356              	.LFB8:
 337:Generated_Source\PSoC4/PWM_1.c **** 
 338:Generated_Source\PSoC4/PWM_1.c **** 
 339:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 340:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPrescaler
 341:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 342:Generated_Source\PSoC4/PWM_1.c **** *
 343:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 344:Generated_Source\PSoC4/PWM_1.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 345:Generated_Source\PSoC4/PWM_1.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 346:Generated_Source\PSoC4/PWM_1.c **** *
 347:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 348:Generated_Source\PSoC4/PWM_1.c **** *  prescaler: Prescaler divider value
 349:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 350:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 351:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY2    - Divide by 2
 352:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY4    - Divide by 4
 353:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY8    - Divide by 8
 354:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY16   - Divide by 16
 355:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY32   - Divide by 32
 356:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY64   - Divide by 64
 357:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY128  - Divide by 128
 358:Generated_Source\PSoC4/PWM_1.c **** *
 359:Generated_Source\PSoC4/PWM_1.c **** * Return:
 360:Generated_Source\PSoC4/PWM_1.c **** *  None
 361:Generated_Source\PSoC4/PWM_1.c **** *
 362:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 363:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPrescaler(uint32 prescaler)
 364:Generated_Source\PSoC4/PWM_1.c **** {
 357              		.loc 1 364 0
 358              		.cfi_startproc
 359 0000 90B5     		push	{r4, r7, lr}
 360              		.cfi_def_cfa_offset 12
 361              		.cfi_offset 4, -12
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 85B0     		sub	sp, sp, #20
 365              		.cfi_def_cfa_offset 32
 366 0004 00AF     		add	r7, sp, #0
 367              		.cfi_def_cfa_register 7
 368 0006 7860     		str	r0, [r7, #4]
 365:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 366:Generated_Source\PSoC4/PWM_1.c **** 
 367:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 369              		.loc 1 367 0
 370 0008 0F23     		mov	r3, #15
 371 000a FC18     		add	r4, r7, r3
 372 000c FFF7FEFF 		bl	CyEnterCriticalSection
 373 0010 031C     		mov	r3, r0
 374 0012 2370     		strb	r3, [r4]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 14


 368:Generated_Source\PSoC4/PWM_1.c **** 
 369:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PRESCALER_MASK;
 375              		.loc 1 369 0
 376 0014 0A4B     		ldr	r3, .L21
 377 0016 0A4A     		ldr	r2, .L21
 378 0018 1268     		ldr	r2, [r2]
 379 001a 0A49     		ldr	r1, .L21+4
 380 001c 0A40     		and	r2, r1
 381 001e 1A60     		str	r2, [r3]
 370:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= prescaler;
 382              		.loc 1 370 0
 383 0020 074B     		ldr	r3, .L21
 384 0022 074A     		ldr	r2, .L21
 385 0024 1168     		ldr	r1, [r2]
 386 0026 7A68     		ldr	r2, [r7, #4]
 387 0028 0A43     		orr	r2, r1
 388 002a 1A60     		str	r2, [r3]
 371:Generated_Source\PSoC4/PWM_1.c **** 
 372:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 389              		.loc 1 372 0
 390 002c 0F23     		mov	r3, #15
 391 002e FB18     		add	r3, r7, r3
 392 0030 1B78     		ldrb	r3, [r3]
 393 0032 181C     		mov	r0, r3
 394 0034 FFF7FEFF 		bl	CyExitCriticalSection
 373:Generated_Source\PSoC4/PWM_1.c **** }
 395              		.loc 1 373 0
 396 0038 BD46     		mov	sp, r7
 397 003a 05B0     		add	sp, sp, #20
 398              		@ sp needed
 399 003c 90BD     		pop	{r4, r7, pc}
 400              	.L22:
 401 003e C046     		.align	2
 402              	.L21:
 403 0040 00012040 		.word	1075839232
 404 0044 FF00FFFF 		.word	-65281
 405              		.cfi_endproc
 406              	.LFE8:
 407              		.size	PWM_1_SetPrescaler, .-PWM_1_SetPrescaler
 408              		.section	.text.PWM_1_SetOneShot,"ax",%progbits
 409              		.align	2
 410              		.global	PWM_1_SetOneShot
 411              		.code	16
 412              		.thumb_func
 413              		.type	PWM_1_SetOneShot, %function
 414              	PWM_1_SetOneShot:
 415              	.LFB9:
 374:Generated_Source\PSoC4/PWM_1.c **** 
 375:Generated_Source\PSoC4/PWM_1.c **** 
 376:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 377:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetOneShot
 378:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 379:Generated_Source\PSoC4/PWM_1.c **** *
 380:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 381:Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the PWM_1 runs
 382:Generated_Source\PSoC4/PWM_1.c **** *  continuously or stops when terminal count is reached.  By default the
 383:Generated_Source\PSoC4/PWM_1.c **** *  PWM_1 operates in the continuous mode.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 15


 384:Generated_Source\PSoC4/PWM_1.c **** *
 385:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 386:Generated_Source\PSoC4/PWM_1.c **** *  oneShotEnable
 387:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 388:Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Continuous
 389:Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Enable One Shot
 390:Generated_Source\PSoC4/PWM_1.c **** *
 391:Generated_Source\PSoC4/PWM_1.c **** * Return:
 392:Generated_Source\PSoC4/PWM_1.c **** *  None
 393:Generated_Source\PSoC4/PWM_1.c **** *
 394:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 395:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetOneShot(uint32 oneShotEnable)
 396:Generated_Source\PSoC4/PWM_1.c **** {
 416              		.loc 1 396 0
 417              		.cfi_startproc
 418 0000 90B5     		push	{r4, r7, lr}
 419              		.cfi_def_cfa_offset 12
 420              		.cfi_offset 4, -12
 421              		.cfi_offset 7, -8
 422              		.cfi_offset 14, -4
 423 0002 85B0     		sub	sp, sp, #20
 424              		.cfi_def_cfa_offset 32
 425 0004 00AF     		add	r7, sp, #0
 426              		.cfi_def_cfa_register 7
 427 0006 7860     		str	r0, [r7, #4]
 397:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 398:Generated_Source\PSoC4/PWM_1.c **** 
 399:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 428              		.loc 1 399 0
 429 0008 0F23     		mov	r3, #15
 430 000a FC18     		add	r4, r7, r3
 431 000c FFF7FEFF 		bl	CyEnterCriticalSection
 432 0010 031C     		mov	r3, r0
 433 0012 2370     		strb	r3, [r4]
 400:Generated_Source\PSoC4/PWM_1.c **** 
 401:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_ONESHOT_MASK;
 434              		.loc 1 401 0
 435 0014 0B4B     		ldr	r3, .L24
 436 0016 0B4A     		ldr	r2, .L24
 437 0018 1268     		ldr	r2, [r2]
 438 001a 0B49     		ldr	r1, .L24+4
 439 001c 0A40     		and	r2, r1
 440 001e 1A60     		str	r2, [r3]
 402:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((oneShotEnable & PWM_1_1BIT_MASK) <<
 441              		.loc 1 402 0
 442 0020 084B     		ldr	r3, .L24
 443 0022 084A     		ldr	r2, .L24
 444 0024 1168     		ldr	r1, [r2]
 445 0026 7A68     		ldr	r2, [r7, #4]
 446 0028 0120     		mov	r0, #1
 447 002a 0240     		and	r2, r0
 448 002c 9204     		lsl	r2, r2, #18
 449 002e 0A43     		orr	r2, r1
 450 0030 1A60     		str	r2, [r3]
 403:Generated_Source\PSoC4/PWM_1.c ****                                                                PWM_1_ONESHOT_SHIFT));
 404:Generated_Source\PSoC4/PWM_1.c **** 
 405:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 16


 451              		.loc 1 405 0
 452 0032 0F23     		mov	r3, #15
 453 0034 FB18     		add	r3, r7, r3
 454 0036 1B78     		ldrb	r3, [r3]
 455 0038 181C     		mov	r0, r3
 456 003a FFF7FEFF 		bl	CyExitCriticalSection
 406:Generated_Source\PSoC4/PWM_1.c **** }
 457              		.loc 1 406 0
 458 003e BD46     		mov	sp, r7
 459 0040 05B0     		add	sp, sp, #20
 460              		@ sp needed
 461 0042 90BD     		pop	{r4, r7, pc}
 462              	.L25:
 463              		.align	2
 464              	.L24:
 465 0044 00012040 		.word	1075839232
 466 0048 FFFFFBFF 		.word	-262145
 467              		.cfi_endproc
 468              	.LFE9:
 469              		.size	PWM_1_SetOneShot, .-PWM_1_SetOneShot
 470              		.section	.text.PWM_1_SetPWMMode,"ax",%progbits
 471              		.align	2
 472              		.global	PWM_1_SetPWMMode
 473              		.code	16
 474              		.thumb_func
 475              		.type	PWM_1_SetPWMMode, %function
 476              	PWM_1_SetPWMMode:
 477              	.LFB10:
 407:Generated_Source\PSoC4/PWM_1.c **** 
 408:Generated_Source\PSoC4/PWM_1.c **** 
 409:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 410:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMMode
 411:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 412:Generated_Source\PSoC4/PWM_1.c **** *
 413:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 414:Generated_Source\PSoC4/PWM_1.c **** *  Writes the control register that determines what mode of operation the PWM
 415:Generated_Source\PSoC4/PWM_1.c **** *  output lines are driven in.  There is a setting for what to do on a
 416:Generated_Source\PSoC4/PWM_1.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 417:Generated_Source\PSoC4/PWM_1.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
 418:Generated_Source\PSoC4/PWM_1.c **** *  the mode.
 419:Generated_Source\PSoC4/PWM_1.c **** *
 420:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 421:Generated_Source\PSoC4/PWM_1.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 422:Generated_Source\PSoC4/PWM_1.c **** *  for each of the three or use one of the preconfigured PWM settings.
 423:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 424:Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_SET        - Set on comparison match
 425:Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 426:Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 427:Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 428:Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_SET         - Set on overflow
 429:Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
 430:Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_INVERT      - Invert on overflow
 431:Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 432:Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_SET       - Set on underflow
 433:Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 434:Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 435:Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 17


 436:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 437:Generated_Source\PSoC4/PWM_1.c **** *                             with up counting mode
 438:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
 439:Generated_Source\PSoC4/PWM_1.c **** *                             with down counting mode
 440:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 441:Generated_Source\PSoC4/PWM_1.c **** *                             combined with up/down 0 mode
 442:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
 443:Generated_Source\PSoC4/PWM_1.c **** *                             with up/down 1 mode
 444:Generated_Source\PSoC4/PWM_1.c **** *
 445:Generated_Source\PSoC4/PWM_1.c **** * Return:
 446:Generated_Source\PSoC4/PWM_1.c **** *  None
 447:Generated_Source\PSoC4/PWM_1.c **** *
 448:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 449:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMMode(uint32 modeMask)
 450:Generated_Source\PSoC4/PWM_1.c **** {
 478              		.loc 1 450 0
 479              		.cfi_startproc
 480 0000 80B5     		push	{r7, lr}
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 82B0     		sub	sp, sp, #8
 485              		.cfi_def_cfa_offset 16
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 451:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL2_REG = (modeMask & PWM_1_6BIT_MASK);
 489              		.loc 1 451 0
 490 0008 034B     		ldr	r3, .L27
 491 000a 7A68     		ldr	r2, [r7, #4]
 492 000c 3F21     		mov	r1, #63
 493 000e 0A40     		and	r2, r1
 494 0010 1A60     		str	r2, [r3]
 452:Generated_Source\PSoC4/PWM_1.c **** }
 495              		.loc 1 452 0
 496 0012 BD46     		mov	sp, r7
 497 0014 02B0     		add	sp, sp, #8
 498              		@ sp needed
 499 0016 80BD     		pop	{r7, pc}
 500              	.L28:
 501              		.align	2
 502              	.L27:
 503 0018 28012040 		.word	1075839272
 504              		.cfi_endproc
 505              	.LFE10:
 506              		.size	PWM_1_SetPWMMode, .-PWM_1_SetPWMMode
 507              		.section	.text.PWM_1_SetPWMSyncKill,"ax",%progbits
 508              		.align	2
 509              		.global	PWM_1_SetPWMSyncKill
 510              		.code	16
 511              		.thumb_func
 512              		.type	PWM_1_SetPWMSyncKill, %function
 513              	PWM_1_SetPWMSyncKill:
 514              	.LFB11:
 453:Generated_Source\PSoC4/PWM_1.c **** 
 454:Generated_Source\PSoC4/PWM_1.c **** 
 455:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 18


 456:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 457:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMSyncKill
 458:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 459:Generated_Source\PSoC4/PWM_1.c **** *
 460:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 461:Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 462:Generated_Source\PSoC4/PWM_1.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
 463:Generated_Source\PSoC4/PWM_1.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 464:Generated_Source\PSoC4/PWM_1.c **** *  and PWM with dead time modes.
 465:Generated_Source\PSoC4/PWM_1.c **** *
 466:Generated_Source\PSoC4/PWM_1.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 467:Generated_Source\PSoC4/PWM_1.c **** *  signals until the next terminal count.
 468:Generated_Source\PSoC4/PWM_1.c **** *
 469:Generated_Source\PSoC4/PWM_1.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 470:Generated_Source\PSoC4/PWM_1.c **** *  signals when the kill signal is present.  This mode should only be used
 471:Generated_Source\PSoC4/PWM_1.c **** *  when the kill signal (stop input) is configured in the pass through mode
 472:Generated_Source\PSoC4/PWM_1.c **** *  (Level sensitive signal).
 473:Generated_Source\PSoC4/PWM_1.c **** 
 474:Generated_Source\PSoC4/PWM_1.c **** *
 475:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 476:Generated_Source\PSoC4/PWM_1.c **** *  syncKillEnable
 477:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 478:Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Asynchronous
 479:Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Synchronous
 480:Generated_Source\PSoC4/PWM_1.c **** *
 481:Generated_Source\PSoC4/PWM_1.c **** * Return:
 482:Generated_Source\PSoC4/PWM_1.c **** *  None
 483:Generated_Source\PSoC4/PWM_1.c **** *
 484:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 485:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMSyncKill(uint32 syncKillEnable)
 486:Generated_Source\PSoC4/PWM_1.c **** {
 515              		.loc 1 486 0
 516              		.cfi_startproc
 517 0000 90B5     		push	{r4, r7, lr}
 518              		.cfi_def_cfa_offset 12
 519              		.cfi_offset 4, -12
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 0002 85B0     		sub	sp, sp, #20
 523              		.cfi_def_cfa_offset 32
 524 0004 00AF     		add	r7, sp, #0
 525              		.cfi_def_cfa_register 7
 526 0006 7860     		str	r0, [r7, #4]
 487:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 488:Generated_Source\PSoC4/PWM_1.c **** 
 489:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 527              		.loc 1 489 0
 528 0008 0F23     		mov	r3, #15
 529 000a FC18     		add	r4, r7, r3
 530 000c FFF7FEFF 		bl	CyEnterCriticalSection
 531 0010 031C     		mov	r3, r0
 532 0012 2370     		strb	r3, [r4]
 490:Generated_Source\PSoC4/PWM_1.c **** 
 491:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PWM_SYNC_KILL_MASK;
 533              		.loc 1 491 0
 534 0014 0B4B     		ldr	r3, .L30
 535 0016 0B4A     		ldr	r2, .L30
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 19


 536 0018 1268     		ldr	r2, [r2]
 537 001a 0421     		mov	r1, #4
 538 001c 8A43     		bic	r2, r1
 539 001e 1A60     		str	r2, [r3]
 492:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((syncKillEnable & PWM_1_1BIT_MASK)  <<
 540              		.loc 1 492 0
 541 0020 084B     		ldr	r3, .L30
 542 0022 084A     		ldr	r2, .L30
 543 0024 1168     		ldr	r1, [r2]
 544 0026 7A68     		ldr	r2, [r7, #4]
 545 0028 0120     		mov	r0, #1
 546 002a 0240     		and	r2, r0
 547 002c 9200     		lsl	r2, r2, #2
 548 002e 0A43     		orr	r2, r1
 549 0030 1A60     		str	r2, [r3]
 493:Generated_Source\PSoC4/PWM_1.c ****                                                PWM_1_PWM_SYNC_KILL_SHIFT));
 494:Generated_Source\PSoC4/PWM_1.c **** 
 495:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 550              		.loc 1 495 0
 551 0032 0F23     		mov	r3, #15
 552 0034 FB18     		add	r3, r7, r3
 553 0036 1B78     		ldrb	r3, [r3]
 554 0038 181C     		mov	r0, r3
 555 003a FFF7FEFF 		bl	CyExitCriticalSection
 496:Generated_Source\PSoC4/PWM_1.c **** }
 556              		.loc 1 496 0
 557 003e BD46     		mov	sp, r7
 558 0040 05B0     		add	sp, sp, #20
 559              		@ sp needed
 560 0042 90BD     		pop	{r4, r7, pc}
 561              	.L31:
 562              		.align	2
 563              	.L30:
 564 0044 00012040 		.word	1075839232
 565              		.cfi_endproc
 566              	.LFE11:
 567              		.size	PWM_1_SetPWMSyncKill, .-PWM_1_SetPWMSyncKill
 568              		.section	.text.PWM_1_SetPWMStopOnKill,"ax",%progbits
 569              		.align	2
 570              		.global	PWM_1_SetPWMStopOnKill
 571              		.code	16
 572              		.thumb_func
 573              		.type	PWM_1_SetPWMStopOnKill, %function
 574              	PWM_1_SetPWMStopOnKill:
 575              	.LFB12:
 497:Generated_Source\PSoC4/PWM_1.c **** 
 498:Generated_Source\PSoC4/PWM_1.c **** 
 499:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 500:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMStopOnKill
 501:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 502:Generated_Source\PSoC4/PWM_1.c **** *
 503:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 504:Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 505:Generated_Source\PSoC4/PWM_1.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 506:Generated_Source\PSoC4/PWM_1.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 507:Generated_Source\PSoC4/PWM_1.c **** *
 508:Generated_Source\PSoC4/PWM_1.c **** *
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 20


 509:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 510:Generated_Source\PSoC4/PWM_1.c **** *  stopOnKillEnable
 511:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 512:Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Don't stop
 513:Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Stop
 514:Generated_Source\PSoC4/PWM_1.c **** *
 515:Generated_Source\PSoC4/PWM_1.c **** * Return:
 516:Generated_Source\PSoC4/PWM_1.c **** *  None
 517:Generated_Source\PSoC4/PWM_1.c **** *
 518:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 519:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMStopOnKill(uint32 stopOnKillEnable)
 520:Generated_Source\PSoC4/PWM_1.c **** {
 576              		.loc 1 520 0
 577              		.cfi_startproc
 578 0000 90B5     		push	{r4, r7, lr}
 579              		.cfi_def_cfa_offset 12
 580              		.cfi_offset 4, -12
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 85B0     		sub	sp, sp, #20
 584              		.cfi_def_cfa_offset 32
 585 0004 00AF     		add	r7, sp, #0
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 521:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 522:Generated_Source\PSoC4/PWM_1.c **** 
 523:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 588              		.loc 1 523 0
 589 0008 0F23     		mov	r3, #15
 590 000a FC18     		add	r4, r7, r3
 591 000c FFF7FEFF 		bl	CyEnterCriticalSection
 592 0010 031C     		mov	r3, r0
 593 0012 2370     		strb	r3, [r4]
 524:Generated_Source\PSoC4/PWM_1.c **** 
 525:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PWM_STOP_KILL_MASK;
 594              		.loc 1 525 0
 595 0014 0B4B     		ldr	r3, .L33
 596 0016 0B4A     		ldr	r2, .L33
 597 0018 1268     		ldr	r2, [r2]
 598 001a 0821     		mov	r1, #8
 599 001c 8A43     		bic	r2, r1
 600 001e 1A60     		str	r2, [r3]
 526:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((stopOnKillEnable & PWM_1_1BIT_MASK)  <<
 601              		.loc 1 526 0
 602 0020 084B     		ldr	r3, .L33
 603 0022 084A     		ldr	r2, .L33
 604 0024 1168     		ldr	r1, [r2]
 605 0026 7A68     		ldr	r2, [r7, #4]
 606 0028 0120     		mov	r0, #1
 607 002a 0240     		and	r2, r0
 608 002c D200     		lsl	r2, r2, #3
 609 002e 0A43     		orr	r2, r1
 610 0030 1A60     		str	r2, [r3]
 527:Generated_Source\PSoC4/PWM_1.c ****                                                          PWM_1_PWM_STOP_KILL_SHIFT));
 528:Generated_Source\PSoC4/PWM_1.c **** 
 529:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 611              		.loc 1 529 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 21


 612 0032 0F23     		mov	r3, #15
 613 0034 FB18     		add	r3, r7, r3
 614 0036 1B78     		ldrb	r3, [r3]
 615 0038 181C     		mov	r0, r3
 616 003a FFF7FEFF 		bl	CyExitCriticalSection
 530:Generated_Source\PSoC4/PWM_1.c **** }
 617              		.loc 1 530 0
 618 003e BD46     		mov	sp, r7
 619 0040 05B0     		add	sp, sp, #20
 620              		@ sp needed
 621 0042 90BD     		pop	{r4, r7, pc}
 622              	.L34:
 623              		.align	2
 624              	.L33:
 625 0044 00012040 		.word	1075839232
 626              		.cfi_endproc
 627              	.LFE12:
 628              		.size	PWM_1_SetPWMStopOnKill, .-PWM_1_SetPWMStopOnKill
 629              		.section	.text.PWM_1_SetPWMDeadTime,"ax",%progbits
 630              		.align	2
 631              		.global	PWM_1_SetPWMDeadTime
 632              		.code	16
 633              		.thumb_func
 634              		.type	PWM_1_SetPWMDeadTime, %function
 635              	PWM_1_SetPWMDeadTime:
 636              	.LFB13:
 531:Generated_Source\PSoC4/PWM_1.c **** 
 532:Generated_Source\PSoC4/PWM_1.c **** 
 533:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 534:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMDeadTime
 535:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 536:Generated_Source\PSoC4/PWM_1.c **** *
 537:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 538:Generated_Source\PSoC4/PWM_1.c **** *  Writes the dead time control value.  This value delays the rising edge of
 539:Generated_Source\PSoC4/PWM_1.c **** *  both the line and line_n signals the designated number of cycles resulting
 540:Generated_Source\PSoC4/PWM_1.c **** *  in both signals being inactive for that many cycles.  This functionality is
 541:Generated_Source\PSoC4/PWM_1.c **** *  only applicable to the PWM in the dead time mode.
 542:Generated_Source\PSoC4/PWM_1.c **** 
 543:Generated_Source\PSoC4/PWM_1.c **** *
 544:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 545:Generated_Source\PSoC4/PWM_1.c **** *  Dead time to insert
 546:Generated_Source\PSoC4/PWM_1.c **** *   Values: 0 to 255
 547:Generated_Source\PSoC4/PWM_1.c **** *
 548:Generated_Source\PSoC4/PWM_1.c **** * Return:
 549:Generated_Source\PSoC4/PWM_1.c **** *  None
 550:Generated_Source\PSoC4/PWM_1.c **** *
 551:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 552:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMDeadTime(uint32 deadTime)
 553:Generated_Source\PSoC4/PWM_1.c **** {
 637              		.loc 1 553 0
 638              		.cfi_startproc
 639 0000 90B5     		push	{r4, r7, lr}
 640              		.cfi_def_cfa_offset 12
 641              		.cfi_offset 4, -12
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 22


 645              		.cfi_def_cfa_offset 32
 646 0004 00AF     		add	r7, sp, #0
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 554:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 555:Generated_Source\PSoC4/PWM_1.c **** 
 556:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 649              		.loc 1 556 0
 650 0008 0F23     		mov	r3, #15
 651 000a FC18     		add	r4, r7, r3
 652 000c FFF7FEFF 		bl	CyEnterCriticalSection
 653 0010 031C     		mov	r3, r0
 654 0012 2370     		strb	r3, [r4]
 557:Generated_Source\PSoC4/PWM_1.c **** 
 558:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PRESCALER_MASK;
 655              		.loc 1 558 0
 656 0014 0B4B     		ldr	r3, .L36
 657 0016 0B4A     		ldr	r2, .L36
 658 0018 1268     		ldr	r2, [r2]
 659 001a 0B49     		ldr	r1, .L36+4
 660 001c 0A40     		and	r2, r1
 661 001e 1A60     		str	r2, [r3]
 559:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((deadTime & PWM_1_8BIT_MASK) <<
 662              		.loc 1 559 0
 663 0020 084B     		ldr	r3, .L36
 664 0022 084A     		ldr	r2, .L36
 665 0024 1168     		ldr	r1, [r2]
 666 0026 7A68     		ldr	r2, [r7, #4]
 667 0028 1202     		lsl	r2, r2, #8
 668 002a 1204     		lsl	r2, r2, #16
 669 002c 120C     		lsr	r2, r2, #16
 670 002e 0A43     		orr	r2, r1
 671 0030 1A60     		str	r2, [r3]
 560:Generated_Source\PSoC4/PWM_1.c ****                                                           PWM_1_PRESCALER_SHIFT));
 561:Generated_Source\PSoC4/PWM_1.c **** 
 562:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 672              		.loc 1 562 0
 673 0032 0F23     		mov	r3, #15
 674 0034 FB18     		add	r3, r7, r3
 675 0036 1B78     		ldrb	r3, [r3]
 676 0038 181C     		mov	r0, r3
 677 003a FFF7FEFF 		bl	CyExitCriticalSection
 563:Generated_Source\PSoC4/PWM_1.c **** }
 678              		.loc 1 563 0
 679 003e BD46     		mov	sp, r7
 680 0040 05B0     		add	sp, sp, #20
 681              		@ sp needed
 682 0042 90BD     		pop	{r4, r7, pc}
 683              	.L37:
 684              		.align	2
 685              	.L36:
 686 0044 00012040 		.word	1075839232
 687 0048 FF00FFFF 		.word	-65281
 688              		.cfi_endproc
 689              	.LFE13:
 690              		.size	PWM_1_SetPWMDeadTime, .-PWM_1_SetPWMDeadTime
 691              		.section	.text.PWM_1_SetPWMInvert,"ax",%progbits
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 23


 692              		.align	2
 693              		.global	PWM_1_SetPWMInvert
 694              		.code	16
 695              		.thumb_func
 696              		.type	PWM_1_SetPWMInvert, %function
 697              	PWM_1_SetPWMInvert:
 698              	.LFB14:
 564:Generated_Source\PSoC4/PWM_1.c **** 
 565:Generated_Source\PSoC4/PWM_1.c **** 
 566:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 567:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMInvert
 568:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 569:Generated_Source\PSoC4/PWM_1.c **** *
 570:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 571:Generated_Source\PSoC4/PWM_1.c **** *  Writes the bits that control whether the line and line_n outputs are
 572:Generated_Source\PSoC4/PWM_1.c **** *  inverted from their normal output values.  This functionality is only
 573:Generated_Source\PSoC4/PWM_1.c **** *  applicable to the three PWM modes.
 574:Generated_Source\PSoC4/PWM_1.c **** *
 575:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 576:Generated_Source\PSoC4/PWM_1.c **** *  mask: Mask of outputs to invert.
 577:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 578:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_INVERT_LINE   - Inverts the line output
 579:Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_INVERT_LINE_N - Inverts the line_n output
 580:Generated_Source\PSoC4/PWM_1.c **** *
 581:Generated_Source\PSoC4/PWM_1.c **** * Return:
 582:Generated_Source\PSoC4/PWM_1.c **** *  None
 583:Generated_Source\PSoC4/PWM_1.c **** *
 584:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 585:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMInvert(uint32 mask)
 586:Generated_Source\PSoC4/PWM_1.c **** {
 699              		.loc 1 586 0
 700              		.cfi_startproc
 701 0000 90B5     		push	{r4, r7, lr}
 702              		.cfi_def_cfa_offset 12
 703              		.cfi_offset 4, -12
 704              		.cfi_offset 7, -8
 705              		.cfi_offset 14, -4
 706 0002 85B0     		sub	sp, sp, #20
 707              		.cfi_def_cfa_offset 32
 708 0004 00AF     		add	r7, sp, #0
 709              		.cfi_def_cfa_register 7
 710 0006 7860     		str	r0, [r7, #4]
 587:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 588:Generated_Source\PSoC4/PWM_1.c **** 
 589:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 711              		.loc 1 589 0
 712 0008 0F23     		mov	r3, #15
 713 000a FC18     		add	r4, r7, r3
 714 000c FFF7FEFF 		bl	CyEnterCriticalSection
 715 0010 031C     		mov	r3, r0
 716 0012 2370     		strb	r3, [r4]
 590:Generated_Source\PSoC4/PWM_1.c **** 
 591:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_INV_OUT_MASK;
 717              		.loc 1 591 0
 718 0014 0A4B     		ldr	r3, .L39
 719 0016 0A4A     		ldr	r2, .L39
 720 0018 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 24


 721 001a 0A49     		ldr	r1, .L39+4
 722 001c 0A40     		and	r2, r1
 723 001e 1A60     		str	r2, [r3]
 592:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= mask;
 724              		.loc 1 592 0
 725 0020 074B     		ldr	r3, .L39
 726 0022 074A     		ldr	r2, .L39
 727 0024 1168     		ldr	r1, [r2]
 728 0026 7A68     		ldr	r2, [r7, #4]
 729 0028 0A43     		orr	r2, r1
 730 002a 1A60     		str	r2, [r3]
 593:Generated_Source\PSoC4/PWM_1.c **** 
 594:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 731              		.loc 1 594 0
 732 002c 0F23     		mov	r3, #15
 733 002e FB18     		add	r3, r7, r3
 734 0030 1B78     		ldrb	r3, [r3]
 735 0032 181C     		mov	r0, r3
 736 0034 FFF7FEFF 		bl	CyExitCriticalSection
 595:Generated_Source\PSoC4/PWM_1.c **** }
 737              		.loc 1 595 0
 738 0038 BD46     		mov	sp, r7
 739 003a 05B0     		add	sp, sp, #20
 740              		@ sp needed
 741 003c 90BD     		pop	{r4, r7, pc}
 742              	.L40:
 743 003e C046     		.align	2
 744              	.L39:
 745 0040 00012040 		.word	1075839232
 746 0044 FFFFCFFF 		.word	-3145729
 747              		.cfi_endproc
 748              	.LFE14:
 749              		.size	PWM_1_SetPWMInvert, .-PWM_1_SetPWMInvert
 750              		.section	.text.PWM_1_WriteCounter,"ax",%progbits
 751              		.align	2
 752              		.global	PWM_1_WriteCounter
 753              		.code	16
 754              		.thumb_func
 755              		.type	PWM_1_WriteCounter, %function
 756              	PWM_1_WriteCounter:
 757              	.LFB15:
 596:Generated_Source\PSoC4/PWM_1.c **** 
 597:Generated_Source\PSoC4/PWM_1.c **** 
 598:Generated_Source\PSoC4/PWM_1.c **** 
 599:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 600:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WriteCounter
 601:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 602:Generated_Source\PSoC4/PWM_1.c **** *
 603:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 604:Generated_Source\PSoC4/PWM_1.c **** *  Writes a new 16bit counter value directly into the counter register, thus
 605:Generated_Source\PSoC4/PWM_1.c **** *  setting the counter (not the period) to the value written. It is not
 606:Generated_Source\PSoC4/PWM_1.c **** *  advised to write to this field when the counter is running.
 607:Generated_Source\PSoC4/PWM_1.c **** *
 608:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 609:Generated_Source\PSoC4/PWM_1.c **** *  count: value to write
 610:Generated_Source\PSoC4/PWM_1.c **** *
 611:Generated_Source\PSoC4/PWM_1.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 25


 612:Generated_Source\PSoC4/PWM_1.c **** *  None
 613:Generated_Source\PSoC4/PWM_1.c **** *
 614:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 615:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WriteCounter(uint32 count)
 616:Generated_Source\PSoC4/PWM_1.c **** {
 758              		.loc 1 616 0
 759              		.cfi_startproc
 760 0000 80B5     		push	{r7, lr}
 761              		.cfi_def_cfa_offset 8
 762              		.cfi_offset 7, -8
 763              		.cfi_offset 14, -4
 764 0002 82B0     		sub	sp, sp, #8
 765              		.cfi_def_cfa_offset 16
 766 0004 00AF     		add	r7, sp, #0
 767              		.cfi_def_cfa_register 7
 768 0006 7860     		str	r0, [r7, #4]
 617:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_COUNTER_REG = (count & PWM_1_16BIT_MASK);
 769              		.loc 1 617 0
 770 0008 034B     		ldr	r3, .L42
 771 000a 7A68     		ldr	r2, [r7, #4]
 772 000c 1204     		lsl	r2, r2, #16
 773 000e 120C     		lsr	r2, r2, #16
 774 0010 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/PWM_1.c **** }
 775              		.loc 1 618 0
 776 0012 BD46     		mov	sp, r7
 777 0014 02B0     		add	sp, sp, #8
 778              		@ sp needed
 779 0016 80BD     		pop	{r7, pc}
 780              	.L43:
 781              		.align	2
 782              	.L42:
 783 0018 08012040 		.word	1075839240
 784              		.cfi_endproc
 785              	.LFE15:
 786              		.size	PWM_1_WriteCounter, .-PWM_1_WriteCounter
 787              		.section	.text.PWM_1_ReadCounter,"ax",%progbits
 788              		.align	2
 789              		.global	PWM_1_ReadCounter
 790              		.code	16
 791              		.thumb_func
 792              		.type	PWM_1_ReadCounter, %function
 793              	PWM_1_ReadCounter:
 794              	.LFB16:
 619:Generated_Source\PSoC4/PWM_1.c **** 
 620:Generated_Source\PSoC4/PWM_1.c **** 
 621:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCounter
 623:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 624:Generated_Source\PSoC4/PWM_1.c **** *
 625:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 626:Generated_Source\PSoC4/PWM_1.c **** *  Reads the current counter value.
 627:Generated_Source\PSoC4/PWM_1.c **** *
 628:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 629:Generated_Source\PSoC4/PWM_1.c **** *  None
 630:Generated_Source\PSoC4/PWM_1.c **** *
 631:Generated_Source\PSoC4/PWM_1.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 26


 632:Generated_Source\PSoC4/PWM_1.c **** *  Current counter value
 633:Generated_Source\PSoC4/PWM_1.c **** *
 634:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 635:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCounter(void)
 636:Generated_Source\PSoC4/PWM_1.c **** {
 795              		.loc 1 636 0
 796              		.cfi_startproc
 797 0000 80B5     		push	{r7, lr}
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 7, -8
 800              		.cfi_offset 14, -4
 801 0002 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 637:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_COUNTER_REG & PWM_1_16BIT_MASK);
 803              		.loc 1 637 0
 804 0004 034B     		ldr	r3, .L46
 805 0006 1B68     		ldr	r3, [r3]
 806 0008 1B04     		lsl	r3, r3, #16
 807 000a 1B0C     		lsr	r3, r3, #16
 638:Generated_Source\PSoC4/PWM_1.c **** }
 808              		.loc 1 638 0
 809 000c 181C     		mov	r0, r3
 810 000e BD46     		mov	sp, r7
 811              		@ sp needed
 812 0010 80BD     		pop	{r7, pc}
 813              	.L47:
 814 0012 C046     		.align	2
 815              	.L46:
 816 0014 08012040 		.word	1075839240
 817              		.cfi_endproc
 818              	.LFE16:
 819              		.size	PWM_1_ReadCounter, .-PWM_1_ReadCounter
 820              		.section	.text.PWM_1_SetCounterMode,"ax",%progbits
 821              		.align	2
 822              		.global	PWM_1_SetCounterMode
 823              		.code	16
 824              		.thumb_func
 825              		.type	PWM_1_SetCounterMode, %function
 826              	PWM_1_SetCounterMode:
 827              	.LFB17:
 639:Generated_Source\PSoC4/PWM_1.c **** 
 640:Generated_Source\PSoC4/PWM_1.c **** 
 641:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 642:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCounterMode
 643:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 644:Generated_Source\PSoC4/PWM_1.c **** *
 645:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 646:Generated_Source\PSoC4/PWM_1.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 647:Generated_Source\PSoC4/PWM_1.c **** *  and the PWM with a pseudo random output.
 648:Generated_Source\PSoC4/PWM_1.c **** *
 649:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 650:Generated_Source\PSoC4/PWM_1.c **** *  counterMode: Enumerated counter type values
 651:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 652:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_UP       - Counts up
 653:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_DOWN     - Counts down
 654:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_UPDOWN0  - Counts up and down. Terminal count
 655:Generated_Source\PSoC4/PWM_1.c **** *                                         generated when counter reaches 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 27


 656:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_UPDOWN1  - Counts up and down. Terminal count
 657:Generated_Source\PSoC4/PWM_1.c **** *                                         generated both when counter reaches 0
 658:Generated_Source\PSoC4/PWM_1.c **** *                                         and period
 659:Generated_Source\PSoC4/PWM_1.c **** *
 660:Generated_Source\PSoC4/PWM_1.c **** * Return:
 661:Generated_Source\PSoC4/PWM_1.c **** *  None
 662:Generated_Source\PSoC4/PWM_1.c **** *
 663:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 664:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCounterMode(uint32 counterMode)
 665:Generated_Source\PSoC4/PWM_1.c **** {
 828              		.loc 1 665 0
 829              		.cfi_startproc
 830 0000 90B5     		push	{r4, r7, lr}
 831              		.cfi_def_cfa_offset 12
 832              		.cfi_offset 4, -12
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 0002 85B0     		sub	sp, sp, #20
 836              		.cfi_def_cfa_offset 32
 837 0004 00AF     		add	r7, sp, #0
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 666:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 667:Generated_Source\PSoC4/PWM_1.c **** 
 668:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 840              		.loc 1 668 0
 841 0008 0F23     		mov	r3, #15
 842 000a FC18     		add	r4, r7, r3
 843 000c FFF7FEFF 		bl	CyEnterCriticalSection
 844 0010 031C     		mov	r3, r0
 845 0012 2370     		strb	r3, [r4]
 669:Generated_Source\PSoC4/PWM_1.c **** 
 670:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_UPDOWN_MASK;
 846              		.loc 1 670 0
 847 0014 0A4B     		ldr	r3, .L49
 848 0016 0A4A     		ldr	r2, .L49
 849 0018 1268     		ldr	r2, [r2]
 850 001a 0A49     		ldr	r1, .L49+4
 851 001c 0A40     		and	r2, r1
 852 001e 1A60     		str	r2, [r3]
 671:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= counterMode;
 853              		.loc 1 671 0
 854 0020 074B     		ldr	r3, .L49
 855 0022 074A     		ldr	r2, .L49
 856 0024 1168     		ldr	r1, [r2]
 857 0026 7A68     		ldr	r2, [r7, #4]
 858 0028 0A43     		orr	r2, r1
 859 002a 1A60     		str	r2, [r3]
 672:Generated_Source\PSoC4/PWM_1.c **** 
 673:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 860              		.loc 1 673 0
 861 002c 0F23     		mov	r3, #15
 862 002e FB18     		add	r3, r7, r3
 863 0030 1B78     		ldrb	r3, [r3]
 864 0032 181C     		mov	r0, r3
 865 0034 FFF7FEFF 		bl	CyExitCriticalSection
 674:Generated_Source\PSoC4/PWM_1.c **** }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 28


 866              		.loc 1 674 0
 867 0038 BD46     		mov	sp, r7
 868 003a 05B0     		add	sp, sp, #20
 869              		@ sp needed
 870 003c 90BD     		pop	{r4, r7, pc}
 871              	.L50:
 872 003e C046     		.align	2
 873              	.L49:
 874 0040 00012040 		.word	1075839232
 875 0044 FFFFFCFF 		.word	-196609
 876              		.cfi_endproc
 877              	.LFE17:
 878              		.size	PWM_1_SetCounterMode, .-PWM_1_SetCounterMode
 879              		.section	.text.PWM_1_WritePeriod,"ax",%progbits
 880              		.align	2
 881              		.global	PWM_1_WritePeriod
 882              		.code	16
 883              		.thumb_func
 884              		.type	PWM_1_WritePeriod, %function
 885              	PWM_1_WritePeriod:
 886              	.LFB18:
 675:Generated_Source\PSoC4/PWM_1.c **** 
 676:Generated_Source\PSoC4/PWM_1.c **** 
 677:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 678:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WritePeriod
 679:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 680:Generated_Source\PSoC4/PWM_1.c **** *
 681:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 682:Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit period register with the new period value.
 683:Generated_Source\PSoC4/PWM_1.c **** *  To cause the counter to count for N cycles this register should be written
 684:Generated_Source\PSoC4/PWM_1.c **** *  with N-1 (counts from 0 to period inclusive).
 685:Generated_Source\PSoC4/PWM_1.c **** *
 686:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 687:Generated_Source\PSoC4/PWM_1.c **** *  period: Period value
 688:Generated_Source\PSoC4/PWM_1.c **** *
 689:Generated_Source\PSoC4/PWM_1.c **** * Return:
 690:Generated_Source\PSoC4/PWM_1.c **** *  None
 691:Generated_Source\PSoC4/PWM_1.c **** *
 692:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 693:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WritePeriod(uint32 period)
 694:Generated_Source\PSoC4/PWM_1.c **** {
 887              		.loc 1 694 0
 888              		.cfi_startproc
 889 0000 80B5     		push	{r7, lr}
 890              		.cfi_def_cfa_offset 8
 891              		.cfi_offset 7, -8
 892              		.cfi_offset 14, -4
 893 0002 82B0     		sub	sp, sp, #8
 894              		.cfi_def_cfa_offset 16
 895 0004 00AF     		add	r7, sp, #0
 896              		.cfi_def_cfa_register 7
 897 0006 7860     		str	r0, [r7, #4]
 695:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_PERIOD_REG = (period & PWM_1_16BIT_MASK);
 898              		.loc 1 695 0
 899 0008 034B     		ldr	r3, .L52
 900 000a 7A68     		ldr	r2, [r7, #4]
 901 000c 1204     		lsl	r2, r2, #16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 29


 902 000e 120C     		lsr	r2, r2, #16
 903 0010 1A60     		str	r2, [r3]
 696:Generated_Source\PSoC4/PWM_1.c **** }
 904              		.loc 1 696 0
 905 0012 BD46     		mov	sp, r7
 906 0014 02B0     		add	sp, sp, #8
 907              		@ sp needed
 908 0016 80BD     		pop	{r7, pc}
 909              	.L53:
 910              		.align	2
 911              	.L52:
 912 0018 14012040 		.word	1075839252
 913              		.cfi_endproc
 914              	.LFE18:
 915              		.size	PWM_1_WritePeriod, .-PWM_1_WritePeriod
 916              		.section	.text.PWM_1_ReadPeriod,"ax",%progbits
 917              		.align	2
 918              		.global	PWM_1_ReadPeriod
 919              		.code	16
 920              		.thumb_func
 921              		.type	PWM_1_ReadPeriod, %function
 922              	PWM_1_ReadPeriod:
 923              	.LFB19:
 697:Generated_Source\PSoC4/PWM_1.c **** 
 698:Generated_Source\PSoC4/PWM_1.c **** 
 699:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 700:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadPeriod
 701:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 702:Generated_Source\PSoC4/PWM_1.c **** *
 703:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 704:Generated_Source\PSoC4/PWM_1.c **** *  Reads the 16 bit period register.
 705:Generated_Source\PSoC4/PWM_1.c **** *
 706:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 707:Generated_Source\PSoC4/PWM_1.c **** *  None
 708:Generated_Source\PSoC4/PWM_1.c **** *
 709:Generated_Source\PSoC4/PWM_1.c **** * Return:
 710:Generated_Source\PSoC4/PWM_1.c **** *  Period value
 711:Generated_Source\PSoC4/PWM_1.c **** *
 712:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 713:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadPeriod(void)
 714:Generated_Source\PSoC4/PWM_1.c **** {
 924              		.loc 1 714 0
 925              		.cfi_startproc
 926 0000 80B5     		push	{r7, lr}
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 7, -8
 929              		.cfi_offset 14, -4
 930 0002 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 715:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_PERIOD_REG & PWM_1_16BIT_MASK);
 932              		.loc 1 715 0
 933 0004 034B     		ldr	r3, .L56
 934 0006 1B68     		ldr	r3, [r3]
 935 0008 1B04     		lsl	r3, r3, #16
 936 000a 1B0C     		lsr	r3, r3, #16
 716:Generated_Source\PSoC4/PWM_1.c **** }
 937              		.loc 1 716 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 30


 938 000c 181C     		mov	r0, r3
 939 000e BD46     		mov	sp, r7
 940              		@ sp needed
 941 0010 80BD     		pop	{r7, pc}
 942              	.L57:
 943 0012 C046     		.align	2
 944              	.L56:
 945 0014 14012040 		.word	1075839252
 946              		.cfi_endproc
 947              	.LFE19:
 948              		.size	PWM_1_ReadPeriod, .-PWM_1_ReadPeriod
 949              		.section	.text.PWM_1_SetCompareSwap,"ax",%progbits
 950              		.align	2
 951              		.global	PWM_1_SetCompareSwap
 952              		.code	16
 953              		.thumb_func
 954              		.type	PWM_1_SetCompareSwap, %function
 955              	PWM_1_SetCompareSwap:
 956              	.LFB20:
 717:Generated_Source\PSoC4/PWM_1.c **** 
 718:Generated_Source\PSoC4/PWM_1.c **** 
 719:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 720:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCompareSwap
 721:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 722:Generated_Source\PSoC4/PWM_1.c **** *
 723:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 724:Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the compare registers are
 725:Generated_Source\PSoC4/PWM_1.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 726:Generated_Source\PSoC4/PWM_1.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 727:Generated_Source\PSoC4/PWM_1.c **** *  following a hardware switch event.
 728:Generated_Source\PSoC4/PWM_1.c **** *
 729:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 730:Generated_Source\PSoC4/PWM_1.c **** *  swapEnable
 731:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 732:Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Disable swap
 733:Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Enable swap
 734:Generated_Source\PSoC4/PWM_1.c **** *
 735:Generated_Source\PSoC4/PWM_1.c **** * Return:
 736:Generated_Source\PSoC4/PWM_1.c **** *  None
 737:Generated_Source\PSoC4/PWM_1.c **** *
 738:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 739:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCompareSwap(uint32 swapEnable)
 740:Generated_Source\PSoC4/PWM_1.c **** {
 957              		.loc 1 740 0
 958              		.cfi_startproc
 959 0000 90B5     		push	{r4, r7, lr}
 960              		.cfi_def_cfa_offset 12
 961              		.cfi_offset 4, -12
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 85B0     		sub	sp, sp, #20
 965              		.cfi_def_cfa_offset 32
 966 0004 00AF     		add	r7, sp, #0
 967              		.cfi_def_cfa_register 7
 968 0006 7860     		str	r0, [r7, #4]
 741:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 742:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 31


 743:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 969              		.loc 1 743 0
 970 0008 0F23     		mov	r3, #15
 971 000a FC18     		add	r4, r7, r3
 972 000c FFF7FEFF 		bl	CyEnterCriticalSection
 973 0010 031C     		mov	r3, r0
 974 0012 2370     		strb	r3, [r4]
 744:Generated_Source\PSoC4/PWM_1.c **** 
 745:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_RELOAD_CC_MASK;
 975              		.loc 1 745 0
 976 0014 0B4B     		ldr	r3, .L59
 977 0016 0B4A     		ldr	r2, .L59
 978 0018 1268     		ldr	r2, [r2]
 979 001a 0121     		mov	r1, #1
 980 001c 8A43     		bic	r2, r1
 981 001e 1A60     		str	r2, [r3]
 746:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= (swapEnable & PWM_1_1BIT_MASK);
 982              		.loc 1 746 0
 983 0020 084B     		ldr	r3, .L59
 984 0022 084A     		ldr	r2, .L59
 985 0024 1168     		ldr	r1, [r2]
 986 0026 7A68     		ldr	r2, [r7, #4]
 987 0028 0120     		mov	r0, #1
 988 002a 0240     		and	r2, r0
 989 002c 0A43     		orr	r2, r1
 990 002e 1A60     		str	r2, [r3]
 747:Generated_Source\PSoC4/PWM_1.c **** 
 748:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 991              		.loc 1 748 0
 992 0030 0F23     		mov	r3, #15
 993 0032 FB18     		add	r3, r7, r3
 994 0034 1B78     		ldrb	r3, [r3]
 995 0036 181C     		mov	r0, r3
 996 0038 FFF7FEFF 		bl	CyExitCriticalSection
 749:Generated_Source\PSoC4/PWM_1.c **** }
 997              		.loc 1 749 0
 998 003c BD46     		mov	sp, r7
 999 003e 05B0     		add	sp, sp, #20
 1000              		@ sp needed
 1001 0040 90BD     		pop	{r4, r7, pc}
 1002              	.L60:
 1003 0042 C046     		.align	2
 1004              	.L59:
 1005 0044 00012040 		.word	1075839232
 1006              		.cfi_endproc
 1007              	.LFE20:
 1008              		.size	PWM_1_SetCompareSwap, .-PWM_1_SetCompareSwap
 1009              		.section	.text.PWM_1_WritePeriodBuf,"ax",%progbits
 1010              		.align	2
 1011              		.global	PWM_1_WritePeriodBuf
 1012              		.code	16
 1013              		.thumb_func
 1014              		.type	PWM_1_WritePeriodBuf, %function
 1015              	PWM_1_WritePeriodBuf:
 1016              	.LFB21:
 750:Generated_Source\PSoC4/PWM_1.c **** 
 751:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 32


 752:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 753:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WritePeriodBuf
 754:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 755:Generated_Source\PSoC4/PWM_1.c **** *
 756:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 757:Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit period buf register with the new period value.
 758:Generated_Source\PSoC4/PWM_1.c **** *
 759:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 760:Generated_Source\PSoC4/PWM_1.c **** *  periodBuf: Period value
 761:Generated_Source\PSoC4/PWM_1.c **** *
 762:Generated_Source\PSoC4/PWM_1.c **** * Return:
 763:Generated_Source\PSoC4/PWM_1.c **** *  None
 764:Generated_Source\PSoC4/PWM_1.c **** *
 765:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 766:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WritePeriodBuf(uint32 periodBuf)
 767:Generated_Source\PSoC4/PWM_1.c **** {
 1017              		.loc 1 767 0
 1018              		.cfi_startproc
 1019 0000 80B5     		push	{r7, lr}
 1020              		.cfi_def_cfa_offset 8
 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
 1023 0002 82B0     		sub	sp, sp, #8
 1024              		.cfi_def_cfa_offset 16
 1025 0004 00AF     		add	r7, sp, #0
 1026              		.cfi_def_cfa_register 7
 1027 0006 7860     		str	r0, [r7, #4]
 768:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_PERIOD_BUF_REG = (periodBuf & PWM_1_16BIT_MASK);
 1028              		.loc 1 768 0
 1029 0008 034B     		ldr	r3, .L62
 1030 000a 7A68     		ldr	r2, [r7, #4]
 1031 000c 1204     		lsl	r2, r2, #16
 1032 000e 120C     		lsr	r2, r2, #16
 1033 0010 1A60     		str	r2, [r3]
 769:Generated_Source\PSoC4/PWM_1.c **** }
 1034              		.loc 1 769 0
 1035 0012 BD46     		mov	sp, r7
 1036 0014 02B0     		add	sp, sp, #8
 1037              		@ sp needed
 1038 0016 80BD     		pop	{r7, pc}
 1039              	.L63:
 1040              		.align	2
 1041              	.L62:
 1042 0018 18012040 		.word	1075839256
 1043              		.cfi_endproc
 1044              	.LFE21:
 1045              		.size	PWM_1_WritePeriodBuf, .-PWM_1_WritePeriodBuf
 1046              		.section	.text.PWM_1_ReadPeriodBuf,"ax",%progbits
 1047              		.align	2
 1048              		.global	PWM_1_ReadPeriodBuf
 1049              		.code	16
 1050              		.thumb_func
 1051              		.type	PWM_1_ReadPeriodBuf, %function
 1052              	PWM_1_ReadPeriodBuf:
 1053              	.LFB22:
 770:Generated_Source\PSoC4/PWM_1.c **** 
 771:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 33


 772:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 773:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadPeriodBuf
 774:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 775:Generated_Source\PSoC4/PWM_1.c **** *
 776:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 777:Generated_Source\PSoC4/PWM_1.c **** *  Reads the 16 bit period buf register.
 778:Generated_Source\PSoC4/PWM_1.c **** *
 779:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 780:Generated_Source\PSoC4/PWM_1.c **** *  None
 781:Generated_Source\PSoC4/PWM_1.c **** *
 782:Generated_Source\PSoC4/PWM_1.c **** * Return:
 783:Generated_Source\PSoC4/PWM_1.c **** *  Period value
 784:Generated_Source\PSoC4/PWM_1.c **** *
 785:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 786:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadPeriodBuf(void)
 787:Generated_Source\PSoC4/PWM_1.c **** {
 1054              		.loc 1 787 0
 1055              		.cfi_startproc
 1056 0000 80B5     		push	{r7, lr}
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 00AF     		add	r7, sp, #0
 1061              		.cfi_def_cfa_register 7
 788:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_PERIOD_BUF_REG & PWM_1_16BIT_MASK);
 1062              		.loc 1 788 0
 1063 0004 034B     		ldr	r3, .L66
 1064 0006 1B68     		ldr	r3, [r3]
 1065 0008 1B04     		lsl	r3, r3, #16
 1066 000a 1B0C     		lsr	r3, r3, #16
 789:Generated_Source\PSoC4/PWM_1.c **** }
 1067              		.loc 1 789 0
 1068 000c 181C     		mov	r0, r3
 1069 000e BD46     		mov	sp, r7
 1070              		@ sp needed
 1071 0010 80BD     		pop	{r7, pc}
 1072              	.L67:
 1073 0012 C046     		.align	2
 1074              	.L66:
 1075 0014 18012040 		.word	1075839256
 1076              		.cfi_endproc
 1077              	.LFE22:
 1078              		.size	PWM_1_ReadPeriodBuf, .-PWM_1_ReadPeriodBuf
 1079              		.section	.text.PWM_1_SetPeriodSwap,"ax",%progbits
 1080              		.align	2
 1081              		.global	PWM_1_SetPeriodSwap
 1082              		.code	16
 1083              		.thumb_func
 1084              		.type	PWM_1_SetPeriodSwap, %function
 1085              	PWM_1_SetPeriodSwap:
 1086              	.LFB23:
 790:Generated_Source\PSoC4/PWM_1.c **** 
 791:Generated_Source\PSoC4/PWM_1.c **** 
 792:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 793:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPeriodSwap
 794:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 795:Generated_Source\PSoC4/PWM_1.c **** *
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 34


 796:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 797:Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the period registers are
 798:Generated_Source\PSoC4/PWM_1.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
 799:Generated_Source\PSoC4/PWM_1.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 800:Generated_Source\PSoC4/PWM_1.c **** *  switch event.
 801:Generated_Source\PSoC4/PWM_1.c **** *
 802:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 803:Generated_Source\PSoC4/PWM_1.c **** *  swapEnable
 804:Generated_Source\PSoC4/PWM_1.c **** *   Values:
 805:Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Disable swap
 806:Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Enable swap
 807:Generated_Source\PSoC4/PWM_1.c **** *
 808:Generated_Source\PSoC4/PWM_1.c **** * Return:
 809:Generated_Source\PSoC4/PWM_1.c **** *  None
 810:Generated_Source\PSoC4/PWM_1.c **** *
 811:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 812:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPeriodSwap(uint32 swapEnable)
 813:Generated_Source\PSoC4/PWM_1.c **** {
 1087              		.loc 1 813 0
 1088              		.cfi_startproc
 1089 0000 90B5     		push	{r4, r7, lr}
 1090              		.cfi_def_cfa_offset 12
 1091              		.cfi_offset 4, -12
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 85B0     		sub	sp, sp, #20
 1095              		.cfi_def_cfa_offset 32
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_def_cfa_register 7
 1098 0006 7860     		str	r0, [r7, #4]
 814:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 815:Generated_Source\PSoC4/PWM_1.c **** 
 816:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1099              		.loc 1 816 0
 1100 0008 0F23     		mov	r3, #15
 1101 000a FC18     		add	r4, r7, r3
 1102 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1103 0010 031C     		mov	r3, r0
 1104 0012 2370     		strb	r3, [r4]
 817:Generated_Source\PSoC4/PWM_1.c **** 
 818:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_RELOAD_PERIOD_MASK;
 1105              		.loc 1 818 0
 1106 0014 0B4B     		ldr	r3, .L69
 1107 0016 0B4A     		ldr	r2, .L69
 1108 0018 1268     		ldr	r2, [r2]
 1109 001a 0221     		mov	r1, #2
 1110 001c 8A43     		bic	r2, r1
 1111 001e 1A60     		str	r2, [r3]
 819:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((swapEnable & PWM_1_1BIT_MASK) <<
 1112              		.loc 1 819 0
 1113 0020 084B     		ldr	r3, .L69
 1114 0022 084A     		ldr	r2, .L69
 1115 0024 1168     		ldr	r1, [r2]
 1116 0026 7A68     		ldr	r2, [r7, #4]
 1117 0028 0120     		mov	r0, #1
 1118 002a 0240     		and	r2, r0
 1119 002c 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 35


 1120 002e 0A43     		orr	r2, r1
 1121 0030 1A60     		str	r2, [r3]
 820:Generated_Source\PSoC4/PWM_1.c ****                                                             PWM_1_RELOAD_PERIOD_SHIFT));
 821:Generated_Source\PSoC4/PWM_1.c **** 
 822:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1122              		.loc 1 822 0
 1123 0032 0F23     		mov	r3, #15
 1124 0034 FB18     		add	r3, r7, r3
 1125 0036 1B78     		ldrb	r3, [r3]
 1126 0038 181C     		mov	r0, r3
 1127 003a FFF7FEFF 		bl	CyExitCriticalSection
 823:Generated_Source\PSoC4/PWM_1.c **** }
 1128              		.loc 1 823 0
 1129 003e BD46     		mov	sp, r7
 1130 0040 05B0     		add	sp, sp, #20
 1131              		@ sp needed
 1132 0042 90BD     		pop	{r4, r7, pc}
 1133              	.L70:
 1134              		.align	2
 1135              	.L69:
 1136 0044 00012040 		.word	1075839232
 1137              		.cfi_endproc
 1138              	.LFE23:
 1139              		.size	PWM_1_SetPeriodSwap, .-PWM_1_SetPeriodSwap
 1140              		.section	.text.PWM_1_WriteCompare,"ax",%progbits
 1141              		.align	2
 1142              		.global	PWM_1_WriteCompare
 1143              		.code	16
 1144              		.thumb_func
 1145              		.type	PWM_1_WriteCompare, %function
 1146              	PWM_1_WriteCompare:
 1147              	.LFB24:
 824:Generated_Source\PSoC4/PWM_1.c **** 
 825:Generated_Source\PSoC4/PWM_1.c **** 
 826:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 827:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WriteCompare
 828:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 829:Generated_Source\PSoC4/PWM_1.c **** *
 830:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 831:Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit compare register with the new compare value. Not
 832:Generated_Source\PSoC4/PWM_1.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 833:Generated_Source\PSoC4/PWM_1.c **** *
 834:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 835:Generated_Source\PSoC4/PWM_1.c **** *  compare: Compare value
 836:Generated_Source\PSoC4/PWM_1.c **** *
 837:Generated_Source\PSoC4/PWM_1.c **** * Return:
 838:Generated_Source\PSoC4/PWM_1.c **** *  None
 839:Generated_Source\PSoC4/PWM_1.c **** *
 840:Generated_Source\PSoC4/PWM_1.c **** * Note:
 841:Generated_Source\PSoC4/PWM_1.c **** *  It is not recommended to use the value equal to "0" or equal to 
 842:Generated_Source\PSoC4/PWM_1.c **** *  "period value" in Center or Asymmetric align PWM modes on the 
 843:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4100/PSoC 4200 devices.
 844:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4000 devices write the 16 bit compare register with the decremented 
 845:Generated_Source\PSoC4/PWM_1.c **** *  compare value in the Up counting mode (except 0x0u), and the incremented 
 846:Generated_Source\PSoC4/PWM_1.c **** *  compare value in the Down counting mode (except 0xFFFFu).
 847:Generated_Source\PSoC4/PWM_1.c **** *
 848:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 36


 849:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WriteCompare(uint32 compare)
 850:Generated_Source\PSoC4/PWM_1.c **** {
 1148              		.loc 1 850 0
 1149              		.cfi_startproc
 1150 0000 80B5     		push	{r7, lr}
 1151              		.cfi_def_cfa_offset 8
 1152              		.cfi_offset 7, -8
 1153              		.cfi_offset 14, -4
 1154 0002 82B0     		sub	sp, sp, #8
 1155              		.cfi_def_cfa_offset 16
 1156 0004 00AF     		add	r7, sp, #0
 1157              		.cfi_def_cfa_register 7
 1158 0006 7860     		str	r0, [r7, #4]
 851:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
 852:Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 853:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
 854:Generated_Source\PSoC4/PWM_1.c **** 
 855:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
 856:Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 857:Generated_Source\PSoC4/PWM_1.c **** 
 858:Generated_Source\PSoC4/PWM_1.c ****         if (((uint32)PWM_1__COUNT_DOWN == currentMode) && (0xFFFFu != compare))
 859:Generated_Source\PSoC4/PWM_1.c ****         {
 860:Generated_Source\PSoC4/PWM_1.c ****             compare++;
 861:Generated_Source\PSoC4/PWM_1.c ****         }
 862:Generated_Source\PSoC4/PWM_1.c ****         else if (((uint32)PWM_1__COUNT_UP == currentMode) && (0u != compare))
 863:Generated_Source\PSoC4/PWM_1.c ****         {
 864:Generated_Source\PSoC4/PWM_1.c ****             compare--;
 865:Generated_Source\PSoC4/PWM_1.c ****         }
 866:Generated_Source\PSoC4/PWM_1.c ****         else
 867:Generated_Source\PSoC4/PWM_1.c ****         {
 868:Generated_Source\PSoC4/PWM_1.c ****         }
 869:Generated_Source\PSoC4/PWM_1.c ****         
 870:Generated_Source\PSoC4/PWM_1.c ****     
 871:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
 872:Generated_Source\PSoC4/PWM_1.c ****     
 873:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_COMP_CAP_REG = (compare & PWM_1_16BIT_MASK);
 1159              		.loc 1 873 0
 1160 0008 034B     		ldr	r3, .L72
 1161 000a 7A68     		ldr	r2, [r7, #4]
 1162 000c 1204     		lsl	r2, r2, #16
 1163 000e 120C     		lsr	r2, r2, #16
 1164 0010 1A60     		str	r2, [r3]
 874:Generated_Source\PSoC4/PWM_1.c **** }
 1165              		.loc 1 874 0
 1166 0012 BD46     		mov	sp, r7
 1167 0014 02B0     		add	sp, sp, #8
 1168              		@ sp needed
 1169 0016 80BD     		pop	{r7, pc}
 1170              	.L73:
 1171              		.align	2
 1172              	.L72:
 1173 0018 0C012040 		.word	1075839244
 1174              		.cfi_endproc
 1175              	.LFE24:
 1176              		.size	PWM_1_WriteCompare, .-PWM_1_WriteCompare
 1177              		.section	.text.PWM_1_ReadCompare,"ax",%progbits
 1178              		.align	2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 37


 1179              		.global	PWM_1_ReadCompare
 1180              		.code	16
 1181              		.thumb_func
 1182              		.type	PWM_1_ReadCompare, %function
 1183              	PWM_1_ReadCompare:
 1184              	.LFB25:
 875:Generated_Source\PSoC4/PWM_1.c **** 
 876:Generated_Source\PSoC4/PWM_1.c **** 
 877:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 878:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCompare
 879:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 880:Generated_Source\PSoC4/PWM_1.c **** *
 881:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 882:Generated_Source\PSoC4/PWM_1.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 883:Generated_Source\PSoC4/PWM_1.c **** *  or in Quadrature Decoder modes.
 884:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 885:Generated_Source\PSoC4/PWM_1.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 886:Generated_Source\PSoC4/PWM_1.c **** *  Down counting mode (except 0x0u).
 887:Generated_Source\PSoC4/PWM_1.c **** *
 888:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 889:Generated_Source\PSoC4/PWM_1.c **** *  None
 890:Generated_Source\PSoC4/PWM_1.c **** *
 891:Generated_Source\PSoC4/PWM_1.c **** * Return:
 892:Generated_Source\PSoC4/PWM_1.c **** *  Compare value
 893:Generated_Source\PSoC4/PWM_1.c **** *
 894:Generated_Source\PSoC4/PWM_1.c **** * Note:
 895:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 896:Generated_Source\PSoC4/PWM_1.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 897:Generated_Source\PSoC4/PWM_1.c **** *  Down counting mode (except 0x0u).
 898:Generated_Source\PSoC4/PWM_1.c **** *
 899:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 900:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCompare(void)
 901:Generated_Source\PSoC4/PWM_1.c **** {
 1185              		.loc 1 901 0
 1186              		.cfi_startproc
 1187 0000 80B5     		push	{r7, lr}
 1188              		.cfi_def_cfa_offset 8
 1189              		.cfi_offset 7, -8
 1190              		.cfi_offset 14, -4
 1191 0002 00AF     		add	r7, sp, #0
 1192              		.cfi_def_cfa_register 7
 902:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
 903:Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 904:Generated_Source\PSoC4/PWM_1.c ****         uint32 regVal;
 905:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
 906:Generated_Source\PSoC4/PWM_1.c **** 
 907:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
 908:Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 909:Generated_Source\PSoC4/PWM_1.c ****         
 910:Generated_Source\PSoC4/PWM_1.c ****         regVal = PWM_1_COMP_CAP_REG;
 911:Generated_Source\PSoC4/PWM_1.c ****         
 912:Generated_Source\PSoC4/PWM_1.c ****         if (((uint32)PWM_1__COUNT_DOWN == currentMode) && (0u != regVal))
 913:Generated_Source\PSoC4/PWM_1.c ****         {
 914:Generated_Source\PSoC4/PWM_1.c ****             regVal--;
 915:Generated_Source\PSoC4/PWM_1.c ****         }
 916:Generated_Source\PSoC4/PWM_1.c ****         else if (((uint32)PWM_1__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 917:Generated_Source\PSoC4/PWM_1.c ****         {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 38


 918:Generated_Source\PSoC4/PWM_1.c ****             regVal++;
 919:Generated_Source\PSoC4/PWM_1.c ****         }
 920:Generated_Source\PSoC4/PWM_1.c ****         else
 921:Generated_Source\PSoC4/PWM_1.c ****         {
 922:Generated_Source\PSoC4/PWM_1.c ****         }
 923:Generated_Source\PSoC4/PWM_1.c **** 
 924:Generated_Source\PSoC4/PWM_1.c ****         return (regVal & PWM_1_16BIT_MASK);
 925:Generated_Source\PSoC4/PWM_1.c ****     #else
 926:Generated_Source\PSoC4/PWM_1.c ****         return (PWM_1_COMP_CAP_REG & PWM_1_16BIT_MASK);
 1193              		.loc 1 926 0
 1194 0004 034B     		ldr	r3, .L76
 1195 0006 1B68     		ldr	r3, [r3]
 1196 0008 1B04     		lsl	r3, r3, #16
 1197 000a 1B0C     		lsr	r3, r3, #16
 927:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
 928:Generated_Source\PSoC4/PWM_1.c **** }
 1198              		.loc 1 928 0
 1199 000c 181C     		mov	r0, r3
 1200 000e BD46     		mov	sp, r7
 1201              		@ sp needed
 1202 0010 80BD     		pop	{r7, pc}
 1203              	.L77:
 1204 0012 C046     		.align	2
 1205              	.L76:
 1206 0014 0C012040 		.word	1075839244
 1207              		.cfi_endproc
 1208              	.LFE25:
 1209              		.size	PWM_1_ReadCompare, .-PWM_1_ReadCompare
 1210              		.section	.text.PWM_1_WriteCompareBuf,"ax",%progbits
 1211              		.align	2
 1212              		.global	PWM_1_WriteCompareBuf
 1213              		.code	16
 1214              		.thumb_func
 1215              		.type	PWM_1_WriteCompareBuf, %function
 1216              	PWM_1_WriteCompareBuf:
 1217              	.LFB26:
 929:Generated_Source\PSoC4/PWM_1.c **** 
 930:Generated_Source\PSoC4/PWM_1.c **** 
 931:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 932:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WriteCompareBuf
 933:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 934:Generated_Source\PSoC4/PWM_1.c **** *
 935:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 936:Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 937:Generated_Source\PSoC4/PWM_1.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 938:Generated_Source\PSoC4/PWM_1.c **** *
 939:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 940:Generated_Source\PSoC4/PWM_1.c **** *  compareBuf: Compare value
 941:Generated_Source\PSoC4/PWM_1.c **** *
 942:Generated_Source\PSoC4/PWM_1.c **** * Return:
 943:Generated_Source\PSoC4/PWM_1.c **** *  None
 944:Generated_Source\PSoC4/PWM_1.c **** *
 945:Generated_Source\PSoC4/PWM_1.c **** * Note:
 946:Generated_Source\PSoC4/PWM_1.c **** *  It is not recommended to use the value equal to "0" or equal to 
 947:Generated_Source\PSoC4/PWM_1.c **** *  "period value" in Center or Asymmetric align PWM modes on the 
 948:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4100/PSoC 4200 devices.
 949:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4000 devices write the 16 bit compare register with the decremented 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 39


 950:Generated_Source\PSoC4/PWM_1.c **** *  compare value in the Up counting mode (except 0x0u), and the incremented 
 951:Generated_Source\PSoC4/PWM_1.c **** *  compare value in the Down counting mode (except 0xFFFFu).
 952:Generated_Source\PSoC4/PWM_1.c **** *
 953:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 954:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WriteCompareBuf(uint32 compareBuf)
 955:Generated_Source\PSoC4/PWM_1.c **** {
 1218              		.loc 1 955 0
 1219              		.cfi_startproc
 1220 0000 80B5     		push	{r7, lr}
 1221              		.cfi_def_cfa_offset 8
 1222              		.cfi_offset 7, -8
 1223              		.cfi_offset 14, -4
 1224 0002 82B0     		sub	sp, sp, #8
 1225              		.cfi_def_cfa_offset 16
 1226 0004 00AF     		add	r7, sp, #0
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
 956:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
 957:Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 958:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
 959:Generated_Source\PSoC4/PWM_1.c **** 
 960:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
 961:Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 962:Generated_Source\PSoC4/PWM_1.c **** 
 963:Generated_Source\PSoC4/PWM_1.c ****         if (((uint32)PWM_1__COUNT_DOWN == currentMode) && (0xFFFFu != compareBuf))
 964:Generated_Source\PSoC4/PWM_1.c ****         {
 965:Generated_Source\PSoC4/PWM_1.c ****             compareBuf++;
 966:Generated_Source\PSoC4/PWM_1.c ****         }
 967:Generated_Source\PSoC4/PWM_1.c ****         else if (((uint32)PWM_1__COUNT_UP == currentMode) && (0u != compareBuf))
 968:Generated_Source\PSoC4/PWM_1.c ****         {
 969:Generated_Source\PSoC4/PWM_1.c ****             compareBuf --;
 970:Generated_Source\PSoC4/PWM_1.c ****         }
 971:Generated_Source\PSoC4/PWM_1.c ****         else
 972:Generated_Source\PSoC4/PWM_1.c ****         {
 973:Generated_Source\PSoC4/PWM_1.c ****         }
 974:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
 975:Generated_Source\PSoC4/PWM_1.c ****     
 976:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_COMP_CAP_BUF_REG = (compareBuf & PWM_1_16BIT_MASK);
 1229              		.loc 1 976 0
 1230 0008 034B     		ldr	r3, .L79
 1231 000a 7A68     		ldr	r2, [r7, #4]
 1232 000c 1204     		lsl	r2, r2, #16
 1233 000e 120C     		lsr	r2, r2, #16
 1234 0010 1A60     		str	r2, [r3]
 977:Generated_Source\PSoC4/PWM_1.c **** }
 1235              		.loc 1 977 0
 1236 0012 BD46     		mov	sp, r7
 1237 0014 02B0     		add	sp, sp, #8
 1238              		@ sp needed
 1239 0016 80BD     		pop	{r7, pc}
 1240              	.L80:
 1241              		.align	2
 1242              	.L79:
 1243 0018 10012040 		.word	1075839248
 1244              		.cfi_endproc
 1245              	.LFE26:
 1246              		.size	PWM_1_WriteCompareBuf, .-PWM_1_WriteCompareBuf
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 40


 1247              		.section	.text.PWM_1_ReadCompareBuf,"ax",%progbits
 1248              		.align	2
 1249              		.global	PWM_1_ReadCompareBuf
 1250              		.code	16
 1251              		.thumb_func
 1252              		.type	PWM_1_ReadCompareBuf, %function
 1253              	PWM_1_ReadCompareBuf:
 1254              	.LFB27:
 978:Generated_Source\PSoC4/PWM_1.c **** 
 979:Generated_Source\PSoC4/PWM_1.c **** 
 980:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 981:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCompareBuf
 982:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 983:Generated_Source\PSoC4/PWM_1.c **** *
 984:Generated_Source\PSoC4/PWM_1.c **** * Summary:
 985:Generated_Source\PSoC4/PWM_1.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
 986:Generated_Source\PSoC4/PWM_1.c **** *  Capture or in Quadrature Decoder modes.
 987:Generated_Source\PSoC4/PWM_1.c **** *
 988:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 989:Generated_Source\PSoC4/PWM_1.c **** *  None
 990:Generated_Source\PSoC4/PWM_1.c **** *
 991:Generated_Source\PSoC4/PWM_1.c **** * Return:
 992:Generated_Source\PSoC4/PWM_1.c **** *  Compare buffer value
 993:Generated_Source\PSoC4/PWM_1.c **** *
 994:Generated_Source\PSoC4/PWM_1.c **** * Note:
 995:Generated_Source\PSoC4/PWM_1.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 996:Generated_Source\PSoC4/PWM_1.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 997:Generated_Source\PSoC4/PWM_1.c **** *  Down counting mode (except 0x0u).
 998:Generated_Source\PSoC4/PWM_1.c **** *
 999:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1000:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCompareBuf(void)
1001:Generated_Source\PSoC4/PWM_1.c **** {
 1255              		.loc 1 1001 0
 1256              		.cfi_startproc
 1257 0000 80B5     		push	{r7, lr}
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 7, -8
 1260              		.cfi_offset 14, -4
 1261 0002 00AF     		add	r7, sp, #0
 1262              		.cfi_def_cfa_register 7
1002:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
1003:Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
1004:Generated_Source\PSoC4/PWM_1.c ****         uint32 regVal;
1005:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
1006:Generated_Source\PSoC4/PWM_1.c **** 
1007:Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_4000)
1008:Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
1009:Generated_Source\PSoC4/PWM_1.c **** 
1010:Generated_Source\PSoC4/PWM_1.c ****         regVal = PWM_1_COMP_CAP_BUF_REG;
1011:Generated_Source\PSoC4/PWM_1.c ****         
1012:Generated_Source\PSoC4/PWM_1.c ****         if (((uint32)PWM_1__COUNT_DOWN == currentMode) && (0u != regVal))
1013:Generated_Source\PSoC4/PWM_1.c ****         {
1014:Generated_Source\PSoC4/PWM_1.c ****             regVal--;
1015:Generated_Source\PSoC4/PWM_1.c ****         }
1016:Generated_Source\PSoC4/PWM_1.c ****         else if (((uint32)PWM_1__COUNT_UP == currentMode) && (0xFFFFu != regVal))
1017:Generated_Source\PSoC4/PWM_1.c ****         {
1018:Generated_Source\PSoC4/PWM_1.c ****             regVal++;
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 41


1019:Generated_Source\PSoC4/PWM_1.c ****         }
1020:Generated_Source\PSoC4/PWM_1.c ****         else
1021:Generated_Source\PSoC4/PWM_1.c ****         {
1022:Generated_Source\PSoC4/PWM_1.c ****         }
1023:Generated_Source\PSoC4/PWM_1.c **** 
1024:Generated_Source\PSoC4/PWM_1.c ****         return (regVal & PWM_1_16BIT_MASK);
1025:Generated_Source\PSoC4/PWM_1.c ****     #else
1026:Generated_Source\PSoC4/PWM_1.c ****         return (PWM_1_COMP_CAP_BUF_REG & PWM_1_16BIT_MASK);
 1263              		.loc 1 1026 0
 1264 0004 034B     		ldr	r3, .L83
 1265 0006 1B68     		ldr	r3, [r3]
 1266 0008 1B04     		lsl	r3, r3, #16
 1267 000a 1B0C     		lsr	r3, r3, #16
1027:Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_4000) */
1028:Generated_Source\PSoC4/PWM_1.c **** }
 1268              		.loc 1 1028 0
 1269 000c 181C     		mov	r0, r3
 1270 000e BD46     		mov	sp, r7
 1271              		@ sp needed
 1272 0010 80BD     		pop	{r7, pc}
 1273              	.L84:
 1274 0012 C046     		.align	2
 1275              	.L83:
 1276 0014 10012040 		.word	1075839248
 1277              		.cfi_endproc
 1278              	.LFE27:
 1279              		.size	PWM_1_ReadCompareBuf, .-PWM_1_ReadCompareBuf
 1280              		.section	.text.PWM_1_ReadCapture,"ax",%progbits
 1281              		.align	2
 1282              		.global	PWM_1_ReadCapture
 1283              		.code	16
 1284              		.thumb_func
 1285              		.type	PWM_1_ReadCapture, %function
 1286              	PWM_1_ReadCapture:
 1287              	.LFB28:
1029:Generated_Source\PSoC4/PWM_1.c **** 
1030:Generated_Source\PSoC4/PWM_1.c **** 
1031:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1032:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCapture
1033:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1034:Generated_Source\PSoC4/PWM_1.c **** *
1035:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1036:Generated_Source\PSoC4/PWM_1.c **** *  Reads the captured counter value. This API is applicable only for
1037:Generated_Source\PSoC4/PWM_1.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1038:Generated_Source\PSoC4/PWM_1.c **** *
1039:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1040:Generated_Source\PSoC4/PWM_1.c **** *  None
1041:Generated_Source\PSoC4/PWM_1.c **** *
1042:Generated_Source\PSoC4/PWM_1.c **** * Return:
1043:Generated_Source\PSoC4/PWM_1.c **** *  Capture value
1044:Generated_Source\PSoC4/PWM_1.c **** *
1045:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1046:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCapture(void)
1047:Generated_Source\PSoC4/PWM_1.c **** {
 1288              		.loc 1 1047 0
 1289              		.cfi_startproc
 1290 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 42


 1291              		.cfi_def_cfa_offset 8
 1292              		.cfi_offset 7, -8
 1293              		.cfi_offset 14, -4
 1294 0002 00AF     		add	r7, sp, #0
 1295              		.cfi_def_cfa_register 7
1048:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_COMP_CAP_REG & PWM_1_16BIT_MASK);
 1296              		.loc 1 1048 0
 1297 0004 034B     		ldr	r3, .L87
 1298 0006 1B68     		ldr	r3, [r3]
 1299 0008 1B04     		lsl	r3, r3, #16
 1300 000a 1B0C     		lsr	r3, r3, #16
1049:Generated_Source\PSoC4/PWM_1.c **** }
 1301              		.loc 1 1049 0
 1302 000c 181C     		mov	r0, r3
 1303 000e BD46     		mov	sp, r7
 1304              		@ sp needed
 1305 0010 80BD     		pop	{r7, pc}
 1306              	.L88:
 1307 0012 C046     		.align	2
 1308              	.L87:
 1309 0014 0C012040 		.word	1075839244
 1310              		.cfi_endproc
 1311              	.LFE28:
 1312              		.size	PWM_1_ReadCapture, .-PWM_1_ReadCapture
 1313              		.section	.text.PWM_1_ReadCaptureBuf,"ax",%progbits
 1314              		.align	2
 1315              		.global	PWM_1_ReadCaptureBuf
 1316              		.code	16
 1317              		.thumb_func
 1318              		.type	PWM_1_ReadCaptureBuf, %function
 1319              	PWM_1_ReadCaptureBuf:
 1320              	.LFB29:
1050:Generated_Source\PSoC4/PWM_1.c **** 
1051:Generated_Source\PSoC4/PWM_1.c **** 
1052:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1053:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCaptureBuf
1054:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1055:Generated_Source\PSoC4/PWM_1.c **** *
1056:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1057:Generated_Source\PSoC4/PWM_1.c **** *  Reads the capture buffer register. This API is applicable only for
1058:Generated_Source\PSoC4/PWM_1.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1059:Generated_Source\PSoC4/PWM_1.c **** *
1060:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1061:Generated_Source\PSoC4/PWM_1.c **** *  None
1062:Generated_Source\PSoC4/PWM_1.c **** *
1063:Generated_Source\PSoC4/PWM_1.c **** * Return:
1064:Generated_Source\PSoC4/PWM_1.c **** *  Capture buffer value
1065:Generated_Source\PSoC4/PWM_1.c **** *
1066:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1067:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCaptureBuf(void)
1068:Generated_Source\PSoC4/PWM_1.c **** {
 1321              		.loc 1 1068 0
 1322              		.cfi_startproc
 1323 0000 80B5     		push	{r7, lr}
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 43


 1327 0002 00AF     		add	r7, sp, #0
 1328              		.cfi_def_cfa_register 7
1069:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_COMP_CAP_BUF_REG & PWM_1_16BIT_MASK);
 1329              		.loc 1 1069 0
 1330 0004 034B     		ldr	r3, .L91
 1331 0006 1B68     		ldr	r3, [r3]
 1332 0008 1B04     		lsl	r3, r3, #16
 1333 000a 1B0C     		lsr	r3, r3, #16
1070:Generated_Source\PSoC4/PWM_1.c **** }
 1334              		.loc 1 1070 0
 1335 000c 181C     		mov	r0, r3
 1336 000e BD46     		mov	sp, r7
 1337              		@ sp needed
 1338 0010 80BD     		pop	{r7, pc}
 1339              	.L92:
 1340 0012 C046     		.align	2
 1341              	.L91:
 1342 0014 10012040 		.word	1075839248
 1343              		.cfi_endproc
 1344              	.LFE29:
 1345              		.size	PWM_1_ReadCaptureBuf, .-PWM_1_ReadCaptureBuf
 1346              		.section	.text.PWM_1_SetCaptureMode,"ax",%progbits
 1347              		.align	2
 1348              		.global	PWM_1_SetCaptureMode
 1349              		.code	16
 1350              		.thumb_func
 1351              		.type	PWM_1_SetCaptureMode, %function
 1352              	PWM_1_SetCaptureMode:
 1353              	.LFB30:
1071:Generated_Source\PSoC4/PWM_1.c **** 
1072:Generated_Source\PSoC4/PWM_1.c **** 
1073:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1074:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCaptureMode
1075:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1076:Generated_Source\PSoC4/PWM_1.c **** *
1077:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1078:Generated_Source\PSoC4/PWM_1.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1079:Generated_Source\PSoC4/PWM_1.c **** *  This input is not applicable to the Timer/Counter without Capture and
1080:Generated_Source\PSoC4/PWM_1.c **** *  Quadrature Decoder modes.
1081:Generated_Source\PSoC4/PWM_1.c **** *
1082:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1083:Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1084:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1085:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1086:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1087:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1088:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1089:Generated_Source\PSoC4/PWM_1.c **** *
1090:Generated_Source\PSoC4/PWM_1.c **** * Return:
1091:Generated_Source\PSoC4/PWM_1.c **** *  None
1092:Generated_Source\PSoC4/PWM_1.c **** *
1093:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1094:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCaptureMode(uint32 triggerMode)
1095:Generated_Source\PSoC4/PWM_1.c **** {
 1354              		.loc 1 1095 0
 1355              		.cfi_startproc
 1356 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 44


 1357              		.cfi_def_cfa_offset 12
 1358              		.cfi_offset 4, -12
 1359              		.cfi_offset 7, -8
 1360              		.cfi_offset 14, -4
 1361 0002 85B0     		sub	sp, sp, #20
 1362              		.cfi_def_cfa_offset 32
 1363 0004 00AF     		add	r7, sp, #0
 1364              		.cfi_def_cfa_register 7
 1365 0006 7860     		str	r0, [r7, #4]
1096:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1097:Generated_Source\PSoC4/PWM_1.c **** 
1098:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1366              		.loc 1 1098 0
 1367 0008 0F23     		mov	r3, #15
 1368 000a FC18     		add	r4, r7, r3
 1369 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1370 0010 031C     		mov	r3, r0
 1371 0012 2370     		strb	r3, [r4]
1099:Generated_Source\PSoC4/PWM_1.c **** 
1100:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_CAPTURE_MASK;
 1372              		.loc 1 1100 0
 1373 0014 0A4B     		ldr	r3, .L94
 1374 0016 0A4A     		ldr	r2, .L94
 1375 0018 1268     		ldr	r2, [r2]
 1376 001a 0321     		mov	r1, #3
 1377 001c 8A43     		bic	r2, r1
 1378 001e 1A60     		str	r2, [r3]
1101:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= triggerMode;
 1379              		.loc 1 1101 0
 1380 0020 074B     		ldr	r3, .L94
 1381 0022 074A     		ldr	r2, .L94
 1382 0024 1168     		ldr	r1, [r2]
 1383 0026 7A68     		ldr	r2, [r7, #4]
 1384 0028 0A43     		orr	r2, r1
 1385 002a 1A60     		str	r2, [r3]
1102:Generated_Source\PSoC4/PWM_1.c **** 
1103:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1386              		.loc 1 1103 0
 1387 002c 0F23     		mov	r3, #15
 1388 002e FB18     		add	r3, r7, r3
 1389 0030 1B78     		ldrb	r3, [r3]
 1390 0032 181C     		mov	r0, r3
 1391 0034 FFF7FEFF 		bl	CyExitCriticalSection
1104:Generated_Source\PSoC4/PWM_1.c **** }
 1392              		.loc 1 1104 0
 1393 0038 BD46     		mov	sp, r7
 1394 003a 05B0     		add	sp, sp, #20
 1395              		@ sp needed
 1396 003c 90BD     		pop	{r4, r7, pc}
 1397              	.L95:
 1398 003e C046     		.align	2
 1399              	.L94:
 1400 0040 24012040 		.word	1075839268
 1401              		.cfi_endproc
 1402              	.LFE30:
 1403              		.size	PWM_1_SetCaptureMode, .-PWM_1_SetCaptureMode
 1404              		.section	.text.PWM_1_SetReloadMode,"ax",%progbits
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 45


 1405              		.align	2
 1406              		.global	PWM_1_SetReloadMode
 1407              		.code	16
 1408              		.thumb_func
 1409              		.type	PWM_1_SetReloadMode, %function
 1410              	PWM_1_SetReloadMode:
 1411              	.LFB31:
1105:Generated_Source\PSoC4/PWM_1.c **** 
1106:Generated_Source\PSoC4/PWM_1.c **** 
1107:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1108:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetReloadMode
1109:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1110:Generated_Source\PSoC4/PWM_1.c **** *
1111:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1112:Generated_Source\PSoC4/PWM_1.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1113:Generated_Source\PSoC4/PWM_1.c **** *  input.
1114:Generated_Source\PSoC4/PWM_1.c **** *
1115:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1116:Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1117:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1118:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1119:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1120:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1121:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1122:Generated_Source\PSoC4/PWM_1.c **** *
1123:Generated_Source\PSoC4/PWM_1.c **** * Return:
1124:Generated_Source\PSoC4/PWM_1.c **** *  None
1125:Generated_Source\PSoC4/PWM_1.c **** *
1126:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1127:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetReloadMode(uint32 triggerMode)
1128:Generated_Source\PSoC4/PWM_1.c **** {
 1412              		.loc 1 1128 0
 1413              		.cfi_startproc
 1414 0000 90B5     		push	{r4, r7, lr}
 1415              		.cfi_def_cfa_offset 12
 1416              		.cfi_offset 4, -12
 1417              		.cfi_offset 7, -8
 1418              		.cfi_offset 14, -4
 1419 0002 85B0     		sub	sp, sp, #20
 1420              		.cfi_def_cfa_offset 32
 1421 0004 00AF     		add	r7, sp, #0
 1422              		.cfi_def_cfa_register 7
 1423 0006 7860     		str	r0, [r7, #4]
1129:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1130:Generated_Source\PSoC4/PWM_1.c **** 
1131:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1424              		.loc 1 1131 0
 1425 0008 0F23     		mov	r3, #15
 1426 000a FC18     		add	r4, r7, r3
 1427 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1428 0010 031C     		mov	r3, r0
 1429 0012 2370     		strb	r3, [r4]
1132:Generated_Source\PSoC4/PWM_1.c **** 
1133:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_RELOAD_MASK;
 1430              		.loc 1 1133 0
 1431 0014 0A4B     		ldr	r3, .L97
 1432 0016 0A4A     		ldr	r2, .L97
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 46


 1433 0018 1268     		ldr	r2, [r2]
 1434 001a 3021     		mov	r1, #48
 1435 001c 8A43     		bic	r2, r1
 1436 001e 1A60     		str	r2, [r3]
1134:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_RELOAD_SHIFT));
 1437              		.loc 1 1134 0
 1438 0020 074B     		ldr	r3, .L97
 1439 0022 074A     		ldr	r2, .L97
 1440 0024 1168     		ldr	r1, [r2]
 1441 0026 7A68     		ldr	r2, [r7, #4]
 1442 0028 1201     		lsl	r2, r2, #4
 1443 002a 0A43     		orr	r2, r1
 1444 002c 1A60     		str	r2, [r3]
1135:Generated_Source\PSoC4/PWM_1.c **** 
1136:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1445              		.loc 1 1136 0
 1446 002e 0F23     		mov	r3, #15
 1447 0030 FB18     		add	r3, r7, r3
 1448 0032 1B78     		ldrb	r3, [r3]
 1449 0034 181C     		mov	r0, r3
 1450 0036 FFF7FEFF 		bl	CyExitCriticalSection
1137:Generated_Source\PSoC4/PWM_1.c **** }
 1451              		.loc 1 1137 0
 1452 003a BD46     		mov	sp, r7
 1453 003c 05B0     		add	sp, sp, #20
 1454              		@ sp needed
 1455 003e 90BD     		pop	{r4, r7, pc}
 1456              	.L98:
 1457              		.align	2
 1458              	.L97:
 1459 0040 24012040 		.word	1075839268
 1460              		.cfi_endproc
 1461              	.LFE31:
 1462              		.size	PWM_1_SetReloadMode, .-PWM_1_SetReloadMode
 1463              		.section	.text.PWM_1_SetStartMode,"ax",%progbits
 1464              		.align	2
 1465              		.global	PWM_1_SetStartMode
 1466              		.code	16
 1467              		.thumb_func
 1468              		.type	PWM_1_SetStartMode, %function
 1469              	PWM_1_SetStartMode:
 1470              	.LFB32:
1138:Generated_Source\PSoC4/PWM_1.c **** 
1139:Generated_Source\PSoC4/PWM_1.c **** 
1140:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1141:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetStartMode
1142:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1143:Generated_Source\PSoC4/PWM_1.c **** *
1144:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1145:Generated_Source\PSoC4/PWM_1.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1146:Generated_Source\PSoC4/PWM_1.c **** *  phiB input.
1147:Generated_Source\PSoC4/PWM_1.c **** *
1148:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1149:Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1150:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1151:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1152:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 47


1153:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1154:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1155:Generated_Source\PSoC4/PWM_1.c **** *
1156:Generated_Source\PSoC4/PWM_1.c **** * Return:
1157:Generated_Source\PSoC4/PWM_1.c **** *  None
1158:Generated_Source\PSoC4/PWM_1.c **** *
1159:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1160:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetStartMode(uint32 triggerMode)
1161:Generated_Source\PSoC4/PWM_1.c **** {
 1471              		.loc 1 1161 0
 1472              		.cfi_startproc
 1473 0000 90B5     		push	{r4, r7, lr}
 1474              		.cfi_def_cfa_offset 12
 1475              		.cfi_offset 4, -12
 1476              		.cfi_offset 7, -8
 1477              		.cfi_offset 14, -4
 1478 0002 85B0     		sub	sp, sp, #20
 1479              		.cfi_def_cfa_offset 32
 1480 0004 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 1482 0006 7860     		str	r0, [r7, #4]
1162:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1163:Generated_Source\PSoC4/PWM_1.c **** 
1164:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1483              		.loc 1 1164 0
 1484 0008 0F23     		mov	r3, #15
 1485 000a FC18     		add	r4, r7, r3
 1486 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1487 0010 031C     		mov	r3, r0
 1488 0012 2370     		strb	r3, [r4]
1165:Generated_Source\PSoC4/PWM_1.c **** 
1166:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_START_MASK;
 1489              		.loc 1 1166 0
 1490 0014 0A4B     		ldr	r3, .L100
 1491 0016 0A4A     		ldr	r2, .L100
 1492 0018 1268     		ldr	r2, [r2]
 1493 001a 0A49     		ldr	r1, .L100+4
 1494 001c 0A40     		and	r2, r1
 1495 001e 1A60     		str	r2, [r3]
1167:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_START_SHIFT));
 1496              		.loc 1 1167 0
 1497 0020 074B     		ldr	r3, .L100
 1498 0022 074A     		ldr	r2, .L100
 1499 0024 1168     		ldr	r1, [r2]
 1500 0026 7A68     		ldr	r2, [r7, #4]
 1501 0028 1202     		lsl	r2, r2, #8
 1502 002a 0A43     		orr	r2, r1
 1503 002c 1A60     		str	r2, [r3]
1168:Generated_Source\PSoC4/PWM_1.c **** 
1169:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1504              		.loc 1 1169 0
 1505 002e 0F23     		mov	r3, #15
 1506 0030 FB18     		add	r3, r7, r3
 1507 0032 1B78     		ldrb	r3, [r3]
 1508 0034 181C     		mov	r0, r3
 1509 0036 FFF7FEFF 		bl	CyExitCriticalSection
1170:Generated_Source\PSoC4/PWM_1.c **** }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 48


 1510              		.loc 1 1170 0
 1511 003a BD46     		mov	sp, r7
 1512 003c 05B0     		add	sp, sp, #20
 1513              		@ sp needed
 1514 003e 90BD     		pop	{r4, r7, pc}
 1515              	.L101:
 1516              		.align	2
 1517              	.L100:
 1518 0040 24012040 		.word	1075839268
 1519 0044 FFFCFFFF 		.word	-769
 1520              		.cfi_endproc
 1521              	.LFE32:
 1522              		.size	PWM_1_SetStartMode, .-PWM_1_SetStartMode
 1523              		.section	.text.PWM_1_SetStopMode,"ax",%progbits
 1524              		.align	2
 1525              		.global	PWM_1_SetStopMode
 1526              		.code	16
 1527              		.thumb_func
 1528              		.type	PWM_1_SetStopMode, %function
 1529              	PWM_1_SetStopMode:
 1530              	.LFB33:
1171:Generated_Source\PSoC4/PWM_1.c **** 
1172:Generated_Source\PSoC4/PWM_1.c **** 
1173:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1174:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetStopMode
1175:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1176:Generated_Source\PSoC4/PWM_1.c **** *
1177:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1178:Generated_Source\PSoC4/PWM_1.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1179:Generated_Source\PSoC4/PWM_1.c **** *
1180:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1181:Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1182:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1183:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1184:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1185:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1186:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1187:Generated_Source\PSoC4/PWM_1.c **** *
1188:Generated_Source\PSoC4/PWM_1.c **** * Return:
1189:Generated_Source\PSoC4/PWM_1.c **** *  None
1190:Generated_Source\PSoC4/PWM_1.c **** *
1191:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1192:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetStopMode(uint32 triggerMode)
1193:Generated_Source\PSoC4/PWM_1.c **** {
 1531              		.loc 1 1193 0
 1532              		.cfi_startproc
 1533 0000 90B5     		push	{r4, r7, lr}
 1534              		.cfi_def_cfa_offset 12
 1535              		.cfi_offset 4, -12
 1536              		.cfi_offset 7, -8
 1537              		.cfi_offset 14, -4
 1538 0002 85B0     		sub	sp, sp, #20
 1539              		.cfi_def_cfa_offset 32
 1540 0004 00AF     		add	r7, sp, #0
 1541              		.cfi_def_cfa_register 7
 1542 0006 7860     		str	r0, [r7, #4]
1194:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 49


1195:Generated_Source\PSoC4/PWM_1.c **** 
1196:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1543              		.loc 1 1196 0
 1544 0008 0F23     		mov	r3, #15
 1545 000a FC18     		add	r4, r7, r3
 1546 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1547 0010 031C     		mov	r3, r0
 1548 0012 2370     		strb	r3, [r4]
1197:Generated_Source\PSoC4/PWM_1.c **** 
1198:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_STOP_MASK;
 1549              		.loc 1 1198 0
 1550 0014 0A4B     		ldr	r3, .L103
 1551 0016 0A4A     		ldr	r2, .L103
 1552 0018 1268     		ldr	r2, [r2]
 1553 001a C021     		mov	r1, #192
 1554 001c 8A43     		bic	r2, r1
 1555 001e 1A60     		str	r2, [r3]
1199:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_STOP_SHIFT));
 1556              		.loc 1 1199 0
 1557 0020 074B     		ldr	r3, .L103
 1558 0022 074A     		ldr	r2, .L103
 1559 0024 1168     		ldr	r1, [r2]
 1560 0026 7A68     		ldr	r2, [r7, #4]
 1561 0028 9201     		lsl	r2, r2, #6
 1562 002a 0A43     		orr	r2, r1
 1563 002c 1A60     		str	r2, [r3]
1200:Generated_Source\PSoC4/PWM_1.c **** 
1201:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1564              		.loc 1 1201 0
 1565 002e 0F23     		mov	r3, #15
 1566 0030 FB18     		add	r3, r7, r3
 1567 0032 1B78     		ldrb	r3, [r3]
 1568 0034 181C     		mov	r0, r3
 1569 0036 FFF7FEFF 		bl	CyExitCriticalSection
1202:Generated_Source\PSoC4/PWM_1.c **** }
 1570              		.loc 1 1202 0
 1571 003a BD46     		mov	sp, r7
 1572 003c 05B0     		add	sp, sp, #20
 1573              		@ sp needed
 1574 003e 90BD     		pop	{r4, r7, pc}
 1575              	.L104:
 1576              		.align	2
 1577              	.L103:
 1578 0040 24012040 		.word	1075839268
 1579              		.cfi_endproc
 1580              	.LFE33:
 1581              		.size	PWM_1_SetStopMode, .-PWM_1_SetStopMode
 1582              		.section	.text.PWM_1_SetCountMode,"ax",%progbits
 1583              		.align	2
 1584              		.global	PWM_1_SetCountMode
 1585              		.code	16
 1586              		.thumb_func
 1587              		.type	PWM_1_SetCountMode, %function
 1588              	PWM_1_SetCountMode:
 1589              	.LFB34:
1203:Generated_Source\PSoC4/PWM_1.c **** 
1204:Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 50


1205:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1206:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCountMode
1207:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1208:Generated_Source\PSoC4/PWM_1.c **** *
1209:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1210:Generated_Source\PSoC4/PWM_1.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1211:Generated_Source\PSoC4/PWM_1.c **** *  input.
1212:Generated_Source\PSoC4/PWM_1.c **** *
1213:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1214:Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1215:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1216:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1217:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1218:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1219:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1220:Generated_Source\PSoC4/PWM_1.c **** *
1221:Generated_Source\PSoC4/PWM_1.c **** * Return:
1222:Generated_Source\PSoC4/PWM_1.c **** *  None
1223:Generated_Source\PSoC4/PWM_1.c **** *
1224:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1225:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCountMode(uint32 triggerMode)
1226:Generated_Source\PSoC4/PWM_1.c **** {
 1590              		.loc 1 1226 0
 1591              		.cfi_startproc
 1592 0000 90B5     		push	{r4, r7, lr}
 1593              		.cfi_def_cfa_offset 12
 1594              		.cfi_offset 4, -12
 1595              		.cfi_offset 7, -8
 1596              		.cfi_offset 14, -4
 1597 0002 85B0     		sub	sp, sp, #20
 1598              		.cfi_def_cfa_offset 32
 1599 0004 00AF     		add	r7, sp, #0
 1600              		.cfi_def_cfa_register 7
 1601 0006 7860     		str	r0, [r7, #4]
1227:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1228:Generated_Source\PSoC4/PWM_1.c **** 
1229:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1602              		.loc 1 1229 0
 1603 0008 0F23     		mov	r3, #15
 1604 000a FC18     		add	r4, r7, r3
 1605 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1606 0010 031C     		mov	r3, r0
 1607 0012 2370     		strb	r3, [r4]
1230:Generated_Source\PSoC4/PWM_1.c **** 
1231:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_COUNT_MASK;
 1608              		.loc 1 1231 0
 1609 0014 0A4B     		ldr	r3, .L106
 1610 0016 0A4A     		ldr	r2, .L106
 1611 0018 1268     		ldr	r2, [r2]
 1612 001a 0C21     		mov	r1, #12
 1613 001c 8A43     		bic	r2, r1
 1614 001e 1A60     		str	r2, [r3]
1232:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_COUNT_SHIFT));
 1615              		.loc 1 1232 0
 1616 0020 074B     		ldr	r3, .L106
 1617 0022 074A     		ldr	r2, .L106
 1618 0024 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 51


 1619 0026 7A68     		ldr	r2, [r7, #4]
 1620 0028 9200     		lsl	r2, r2, #2
 1621 002a 0A43     		orr	r2, r1
 1622 002c 1A60     		str	r2, [r3]
1233:Generated_Source\PSoC4/PWM_1.c **** 
1234:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1623              		.loc 1 1234 0
 1624 002e 0F23     		mov	r3, #15
 1625 0030 FB18     		add	r3, r7, r3
 1626 0032 1B78     		ldrb	r3, [r3]
 1627 0034 181C     		mov	r0, r3
 1628 0036 FFF7FEFF 		bl	CyExitCriticalSection
1235:Generated_Source\PSoC4/PWM_1.c **** }
 1629              		.loc 1 1235 0
 1630 003a BD46     		mov	sp, r7
 1631 003c 05B0     		add	sp, sp, #20
 1632              		@ sp needed
 1633 003e 90BD     		pop	{r4, r7, pc}
 1634              	.L107:
 1635              		.align	2
 1636              	.L106:
 1637 0040 24012040 		.word	1075839268
 1638              		.cfi_endproc
 1639              	.LFE34:
 1640              		.size	PWM_1_SetCountMode, .-PWM_1_SetCountMode
 1641              		.section	.text.PWM_1_TriggerCommand,"ax",%progbits
 1642              		.align	2
 1643              		.global	PWM_1_TriggerCommand
 1644              		.code	16
 1645              		.thumb_func
 1646              		.type	PWM_1_TriggerCommand, %function
 1647              	PWM_1_TriggerCommand:
 1648              	.LFB35:
1236:Generated_Source\PSoC4/PWM_1.c **** 
1237:Generated_Source\PSoC4/PWM_1.c **** 
1238:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1239:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_TriggerCommand
1240:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1241:Generated_Source\PSoC4/PWM_1.c **** *
1242:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1243:Generated_Source\PSoC4/PWM_1.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1244:Generated_Source\PSoC4/PWM_1.c **** *  The mask can be used to apply this command simultaneously to more than one
1245:Generated_Source\PSoC4/PWM_1.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1246:Generated_Source\PSoC4/PWM_1.c **** *
1247:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1248:Generated_Source\PSoC4/PWM_1.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1249:Generated_Source\PSoC4/PWM_1.c **** *        command should apply to.  This function from one instance can be used
1250:Generated_Source\PSoC4/PWM_1.c **** *        to apply the command to any of the instances in the design.
1251:Generated_Source\PSoC4/PWM_1.c **** *        The mask value for a specific instance is available with the MASK
1252:Generated_Source\PSoC4/PWM_1.c **** *        define.
1253:Generated_Source\PSoC4/PWM_1.c **** *  command: Enumerated command values. Capture command only applicable for
1254:Generated_Source\PSoC4/PWM_1.c **** *           Timer/Counter with Capture and PWM modes.
1255:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1256:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_CAPTURE    - Trigger Capture/Switch command
1257:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_RELOAD     - Trigger Reload/Index command
1258:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_STOP       - Trigger Stop/Kill command
1259:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_START      - Trigger Start/phiB command
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 52


1260:Generated_Source\PSoC4/PWM_1.c **** *
1261:Generated_Source\PSoC4/PWM_1.c **** * Return:
1262:Generated_Source\PSoC4/PWM_1.c **** *  None
1263:Generated_Source\PSoC4/PWM_1.c **** *
1264:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1265:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_TriggerCommand(uint32 mask, uint32 command)
1266:Generated_Source\PSoC4/PWM_1.c **** {
 1649              		.loc 1 1266 0
 1650              		.cfi_startproc
 1651 0000 90B5     		push	{r4, r7, lr}
 1652              		.cfi_def_cfa_offset 12
 1653              		.cfi_offset 4, -12
 1654              		.cfi_offset 7, -8
 1655              		.cfi_offset 14, -4
 1656 0002 85B0     		sub	sp, sp, #20
 1657              		.cfi_def_cfa_offset 32
 1658 0004 00AF     		add	r7, sp, #0
 1659              		.cfi_def_cfa_register 7
 1660 0006 7860     		str	r0, [r7, #4]
 1661 0008 3960     		str	r1, [r7]
1267:Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1268:Generated_Source\PSoC4/PWM_1.c **** 
1269:Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1662              		.loc 1 1269 0
 1663 000a 0F23     		mov	r3, #15
 1664 000c FC18     		add	r4, r7, r3
 1665 000e FFF7FEFF 		bl	CyEnterCriticalSection
 1666 0012 031C     		mov	r3, r0
 1667 0014 2370     		strb	r3, [r4]
1270:Generated_Source\PSoC4/PWM_1.c **** 
1271:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_COMMAND_REG = ((uint32)(mask << command));
 1668              		.loc 1 1271 0
 1669 0016 074B     		ldr	r3, .L109
 1670 0018 3A68     		ldr	r2, [r7]
 1671 001a 7968     		ldr	r1, [r7, #4]
 1672 001c 9140     		lsl	r1, r1, r2
 1673 001e 0A1C     		mov	r2, r1
 1674 0020 1A60     		str	r2, [r3]
1272:Generated_Source\PSoC4/PWM_1.c **** 
1273:Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1675              		.loc 1 1273 0
 1676 0022 0F23     		mov	r3, #15
 1677 0024 FB18     		add	r3, r7, r3
 1678 0026 1B78     		ldrb	r3, [r3]
 1679 0028 181C     		mov	r0, r3
 1680 002a FFF7FEFF 		bl	CyExitCriticalSection
1274:Generated_Source\PSoC4/PWM_1.c **** }
 1681              		.loc 1 1274 0
 1682 002e BD46     		mov	sp, r7
 1683 0030 05B0     		add	sp, sp, #20
 1684              		@ sp needed
 1685 0032 90BD     		pop	{r4, r7, pc}
 1686              	.L110:
 1687              		.align	2
 1688              	.L109:
 1689 0034 08002040 		.word	1075838984
 1690              		.cfi_endproc
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 53


 1691              	.LFE35:
 1692              		.size	PWM_1_TriggerCommand, .-PWM_1_TriggerCommand
 1693              		.section	.text.PWM_1_ReadStatus,"ax",%progbits
 1694              		.align	2
 1695              		.global	PWM_1_ReadStatus
 1696              		.code	16
 1697              		.thumb_func
 1698              		.type	PWM_1_ReadStatus, %function
 1699              	PWM_1_ReadStatus:
 1700              	.LFB36:
1275:Generated_Source\PSoC4/PWM_1.c **** 
1276:Generated_Source\PSoC4/PWM_1.c **** 
1277:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1278:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadStatus
1279:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1280:Generated_Source\PSoC4/PWM_1.c **** *
1281:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1282:Generated_Source\PSoC4/PWM_1.c **** *  Reads the status of the PWM_1.
1283:Generated_Source\PSoC4/PWM_1.c **** *
1284:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1285:Generated_Source\PSoC4/PWM_1.c **** *  None
1286:Generated_Source\PSoC4/PWM_1.c **** *
1287:Generated_Source\PSoC4/PWM_1.c **** * Return:
1288:Generated_Source\PSoC4/PWM_1.c **** *  Status
1289:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1290:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_STATUS_DOWN    - Set if counting down
1291:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_STATUS_RUNNING - Set if counter is running
1292:Generated_Source\PSoC4/PWM_1.c **** *
1293:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1294:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadStatus(void)
1295:Generated_Source\PSoC4/PWM_1.c **** {
 1701              		.loc 1 1295 0
 1702              		.cfi_startproc
 1703 0000 80B5     		push	{r7, lr}
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 00AF     		add	r7, sp, #0
 1708              		.cfi_def_cfa_register 7
1296:Generated_Source\PSoC4/PWM_1.c ****     return ((PWM_1_STATUS_REG >> PWM_1_RUNNING_STATUS_SHIFT) |
 1709              		.loc 1 1296 0
 1710 0004 054B     		ldr	r3, .L113
 1711 0006 1B68     		ldr	r3, [r3]
 1712 0008 9A0F     		lsr	r2, r3, #30
1297:Generated_Source\PSoC4/PWM_1.c ****             (PWM_1_STATUS_REG & PWM_1_STATUS_DOWN));
 1713              		.loc 1 1297 0
 1714 000a 044B     		ldr	r3, .L113
 1715 000c 1B68     		ldr	r3, [r3]
 1716 000e 0121     		mov	r1, #1
 1717 0010 0B40     		and	r3, r1
1296:Generated_Source\PSoC4/PWM_1.c ****     return ((PWM_1_STATUS_REG >> PWM_1_RUNNING_STATUS_SHIFT) |
 1718              		.loc 1 1296 0
 1719 0012 1343     		orr	r3, r2
1298:Generated_Source\PSoC4/PWM_1.c **** }
 1720              		.loc 1 1298 0
 1721 0014 181C     		mov	r0, r3
 1722 0016 BD46     		mov	sp, r7
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 54


 1723              		@ sp needed
 1724 0018 80BD     		pop	{r7, pc}
 1725              	.L114:
 1726 001a C046     		.align	2
 1727              	.L113:
 1728 001c 04012040 		.word	1075839236
 1729              		.cfi_endproc
 1730              	.LFE36:
 1731              		.size	PWM_1_ReadStatus, .-PWM_1_ReadStatus
 1732              		.section	.text.PWM_1_SetInterruptMode,"ax",%progbits
 1733              		.align	2
 1734              		.global	PWM_1_SetInterruptMode
 1735              		.code	16
 1736              		.thumb_func
 1737              		.type	PWM_1_SetInterruptMode, %function
 1738              	PWM_1_SetInterruptMode:
 1739              	.LFB37:
1299:Generated_Source\PSoC4/PWM_1.c **** 
1300:Generated_Source\PSoC4/PWM_1.c **** 
1301:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1302:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetInterruptMode
1303:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1304:Generated_Source\PSoC4/PWM_1.c **** *
1305:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1306:Generated_Source\PSoC4/PWM_1.c **** *  Sets the interrupt mask to control which interrupt
1307:Generated_Source\PSoC4/PWM_1.c **** *  requests generate the interrupt signal.
1308:Generated_Source\PSoC4/PWM_1.c **** *
1309:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1310:Generated_Source\PSoC4/PWM_1.c **** *   interruptMask: Mask of bits to be enabled
1311:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1312:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1313:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1314:Generated_Source\PSoC4/PWM_1.c **** *
1315:Generated_Source\PSoC4/PWM_1.c **** * Return:
1316:Generated_Source\PSoC4/PWM_1.c **** *  None
1317:Generated_Source\PSoC4/PWM_1.c **** *
1318:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1319:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetInterruptMode(uint32 interruptMask)
1320:Generated_Source\PSoC4/PWM_1.c **** {
 1740              		.loc 1 1320 0
 1741              		.cfi_startproc
 1742 0000 80B5     		push	{r7, lr}
 1743              		.cfi_def_cfa_offset 8
 1744              		.cfi_offset 7, -8
 1745              		.cfi_offset 14, -4
 1746 0002 82B0     		sub	sp, sp, #8
 1747              		.cfi_def_cfa_offset 16
 1748 0004 00AF     		add	r7, sp, #0
 1749              		.cfi_def_cfa_register 7
 1750 0006 7860     		str	r0, [r7, #4]
1321:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_INTERRUPT_MASK_REG =  interruptMask;
 1751              		.loc 1 1321 0
 1752 0008 024B     		ldr	r3, .L116
 1753 000a 7A68     		ldr	r2, [r7, #4]
 1754 000c 1A60     		str	r2, [r3]
1322:Generated_Source\PSoC4/PWM_1.c **** }
 1755              		.loc 1 1322 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 55


 1756 000e BD46     		mov	sp, r7
 1757 0010 02B0     		add	sp, sp, #8
 1758              		@ sp needed
 1759 0012 80BD     		pop	{r7, pc}
 1760              	.L117:
 1761              		.align	2
 1762              	.L116:
 1763 0014 38012040 		.word	1075839288
 1764              		.cfi_endproc
 1765              	.LFE37:
 1766              		.size	PWM_1_SetInterruptMode, .-PWM_1_SetInterruptMode
 1767              		.section	.text.PWM_1_GetInterruptSourceMasked,"ax",%progbits
 1768              		.align	2
 1769              		.global	PWM_1_GetInterruptSourceMasked
 1770              		.code	16
 1771              		.thumb_func
 1772              		.type	PWM_1_GetInterruptSourceMasked, %function
 1773              	PWM_1_GetInterruptSourceMasked:
 1774              	.LFB38:
1323:Generated_Source\PSoC4/PWM_1.c **** 
1324:Generated_Source\PSoC4/PWM_1.c **** 
1325:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1326:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_GetInterruptSourceMasked
1327:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1328:Generated_Source\PSoC4/PWM_1.c **** *
1329:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1330:Generated_Source\PSoC4/PWM_1.c **** *  Gets the interrupt requests masked by the interrupt mask.
1331:Generated_Source\PSoC4/PWM_1.c **** *
1332:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1333:Generated_Source\PSoC4/PWM_1.c **** *   None
1334:Generated_Source\PSoC4/PWM_1.c **** *
1335:Generated_Source\PSoC4/PWM_1.c **** * Return:
1336:Generated_Source\PSoC4/PWM_1.c **** *  Masked interrupt source
1337:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1338:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1339:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1340:Generated_Source\PSoC4/PWM_1.c **** *
1341:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1342:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_GetInterruptSourceMasked(void)
1343:Generated_Source\PSoC4/PWM_1.c **** {
 1775              		.loc 1 1343 0
 1776              		.cfi_startproc
 1777 0000 80B5     		push	{r7, lr}
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 00AF     		add	r7, sp, #0
 1782              		.cfi_def_cfa_register 7
1344:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_INTERRUPT_MASKED_REG);
 1783              		.loc 1 1344 0
 1784 0004 024B     		ldr	r3, .L120
 1785 0006 1B68     		ldr	r3, [r3]
1345:Generated_Source\PSoC4/PWM_1.c **** }
 1786              		.loc 1 1345 0
 1787 0008 181C     		mov	r0, r3
 1788 000a BD46     		mov	sp, r7
 1789              		@ sp needed
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 56


 1790 000c 80BD     		pop	{r7, pc}
 1791              	.L121:
 1792 000e C046     		.align	2
 1793              	.L120:
 1794 0010 3C012040 		.word	1075839292
 1795              		.cfi_endproc
 1796              	.LFE38:
 1797              		.size	PWM_1_GetInterruptSourceMasked, .-PWM_1_GetInterruptSourceMasked
 1798              		.section	.text.PWM_1_GetInterruptSource,"ax",%progbits
 1799              		.align	2
 1800              		.global	PWM_1_GetInterruptSource
 1801              		.code	16
 1802              		.thumb_func
 1803              		.type	PWM_1_GetInterruptSource, %function
 1804              	PWM_1_GetInterruptSource:
 1805              	.LFB39:
1346:Generated_Source\PSoC4/PWM_1.c **** 
1347:Generated_Source\PSoC4/PWM_1.c **** 
1348:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1349:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_GetInterruptSource
1350:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1351:Generated_Source\PSoC4/PWM_1.c **** *
1352:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1353:Generated_Source\PSoC4/PWM_1.c **** *  Gets the interrupt requests (without masking).
1354:Generated_Source\PSoC4/PWM_1.c **** *
1355:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1356:Generated_Source\PSoC4/PWM_1.c **** *  None
1357:Generated_Source\PSoC4/PWM_1.c **** *
1358:Generated_Source\PSoC4/PWM_1.c **** * Return:
1359:Generated_Source\PSoC4/PWM_1.c **** *  Interrupt request value
1360:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1361:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1362:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1363:Generated_Source\PSoC4/PWM_1.c **** *
1364:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1365:Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_GetInterruptSource(void)
1366:Generated_Source\PSoC4/PWM_1.c **** {
 1806              		.loc 1 1366 0
 1807              		.cfi_startproc
 1808 0000 80B5     		push	{r7, lr}
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 7, -8
 1811              		.cfi_offset 14, -4
 1812 0002 00AF     		add	r7, sp, #0
 1813              		.cfi_def_cfa_register 7
1367:Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_INTERRUPT_REQ_REG);
 1814              		.loc 1 1367 0
 1815 0004 024B     		ldr	r3, .L124
 1816 0006 1B68     		ldr	r3, [r3]
1368:Generated_Source\PSoC4/PWM_1.c **** }
 1817              		.loc 1 1368 0
 1818 0008 181C     		mov	r0, r3
 1819 000a BD46     		mov	sp, r7
 1820              		@ sp needed
 1821 000c 80BD     		pop	{r7, pc}
 1822              	.L125:
 1823 000e C046     		.align	2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 57


 1824              	.L124:
 1825 0010 30012040 		.word	1075839280
 1826              		.cfi_endproc
 1827              	.LFE39:
 1828              		.size	PWM_1_GetInterruptSource, .-PWM_1_GetInterruptSource
 1829              		.section	.text.PWM_1_ClearInterrupt,"ax",%progbits
 1830              		.align	2
 1831              		.global	PWM_1_ClearInterrupt
 1832              		.code	16
 1833              		.thumb_func
 1834              		.type	PWM_1_ClearInterrupt, %function
 1835              	PWM_1_ClearInterrupt:
 1836              	.LFB40:
1369:Generated_Source\PSoC4/PWM_1.c **** 
1370:Generated_Source\PSoC4/PWM_1.c **** 
1371:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1372:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ClearInterrupt
1373:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1374:Generated_Source\PSoC4/PWM_1.c **** *
1375:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1376:Generated_Source\PSoC4/PWM_1.c **** *  Clears the interrupt request.
1377:Generated_Source\PSoC4/PWM_1.c **** *
1378:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1379:Generated_Source\PSoC4/PWM_1.c **** *   interruptMask: Mask of interrupts to clear
1380:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1381:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1382:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1383:Generated_Source\PSoC4/PWM_1.c **** *
1384:Generated_Source\PSoC4/PWM_1.c **** * Return:
1385:Generated_Source\PSoC4/PWM_1.c **** *  None
1386:Generated_Source\PSoC4/PWM_1.c **** *
1387:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1388:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_ClearInterrupt(uint32 interruptMask)
1389:Generated_Source\PSoC4/PWM_1.c **** {
 1837              		.loc 1 1389 0
 1838              		.cfi_startproc
 1839 0000 80B5     		push	{r7, lr}
 1840              		.cfi_def_cfa_offset 8
 1841              		.cfi_offset 7, -8
 1842              		.cfi_offset 14, -4
 1843 0002 82B0     		sub	sp, sp, #8
 1844              		.cfi_def_cfa_offset 16
 1845 0004 00AF     		add	r7, sp, #0
 1846              		.cfi_def_cfa_register 7
 1847 0006 7860     		str	r0, [r7, #4]
1390:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_INTERRUPT_REQ_REG = interruptMask;
 1848              		.loc 1 1390 0
 1849 0008 024B     		ldr	r3, .L127
 1850 000a 7A68     		ldr	r2, [r7, #4]
 1851 000c 1A60     		str	r2, [r3]
1391:Generated_Source\PSoC4/PWM_1.c **** }
 1852              		.loc 1 1391 0
 1853 000e BD46     		mov	sp, r7
 1854 0010 02B0     		add	sp, sp, #8
 1855              		@ sp needed
 1856 0012 80BD     		pop	{r7, pc}
 1857              	.L128:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 58


 1858              		.align	2
 1859              	.L127:
 1860 0014 30012040 		.word	1075839280
 1861              		.cfi_endproc
 1862              	.LFE40:
 1863              		.size	PWM_1_ClearInterrupt, .-PWM_1_ClearInterrupt
 1864              		.section	.text.PWM_1_SetInterrupt,"ax",%progbits
 1865              		.align	2
 1866              		.global	PWM_1_SetInterrupt
 1867              		.code	16
 1868              		.thumb_func
 1869              		.type	PWM_1_SetInterrupt, %function
 1870              	PWM_1_SetInterrupt:
 1871              	.LFB41:
1392:Generated_Source\PSoC4/PWM_1.c **** 
1393:Generated_Source\PSoC4/PWM_1.c **** 
1394:Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1395:Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetInterrupt
1396:Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1397:Generated_Source\PSoC4/PWM_1.c **** *
1398:Generated_Source\PSoC4/PWM_1.c **** * Summary:
1399:Generated_Source\PSoC4/PWM_1.c **** *  Sets a software interrupt request.
1400:Generated_Source\PSoC4/PWM_1.c **** *
1401:Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1402:Generated_Source\PSoC4/PWM_1.c **** *   interruptMask: Mask of interrupts to set
1403:Generated_Source\PSoC4/PWM_1.c **** *   Values:
1404:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1405:Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1406:Generated_Source\PSoC4/PWM_1.c **** *
1407:Generated_Source\PSoC4/PWM_1.c **** * Return:
1408:Generated_Source\PSoC4/PWM_1.c **** *  None
1409:Generated_Source\PSoC4/PWM_1.c **** *
1410:Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1411:Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetInterrupt(uint32 interruptMask)
1412:Generated_Source\PSoC4/PWM_1.c **** {
 1872              		.loc 1 1412 0
 1873              		.cfi_startproc
 1874 0000 80B5     		push	{r7, lr}
 1875              		.cfi_def_cfa_offset 8
 1876              		.cfi_offset 7, -8
 1877              		.cfi_offset 14, -4
 1878 0002 82B0     		sub	sp, sp, #8
 1879              		.cfi_def_cfa_offset 16
 1880 0004 00AF     		add	r7, sp, #0
 1881              		.cfi_def_cfa_register 7
 1882 0006 7860     		str	r0, [r7, #4]
1413:Generated_Source\PSoC4/PWM_1.c ****     PWM_1_INTERRUPT_SET_REG = interruptMask;
 1883              		.loc 1 1413 0
 1884 0008 024B     		ldr	r3, .L130
 1885 000a 7A68     		ldr	r2, [r7, #4]
 1886 000c 1A60     		str	r2, [r3]
1414:Generated_Source\PSoC4/PWM_1.c **** }
 1887              		.loc 1 1414 0
 1888 000e BD46     		mov	sp, r7
 1889 0010 02B0     		add	sp, sp, #8
 1890              		@ sp needed
 1891 0012 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 59


 1892              	.L131:
 1893              		.align	2
 1894              	.L130:
 1895 0014 34012040 		.word	1075839284
 1896              		.cfi_endproc
 1897              	.LFE41:
 1898              		.size	PWM_1_SetInterrupt, .-PWM_1_SetInterrupt
 1899              		.text
 1900              	.Letext0:
 1901              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1902              		.section	.debug_info,"",%progbits
 1903              	.Ldebug_info0:
 1904 0000 F0060000 		.4byte	0x6f0
 1905 0004 0400     		.2byte	0x4
 1906 0006 00000000 		.4byte	.Ldebug_abbrev0
 1907 000a 04       		.byte	0x4
 1908 000b 01       		.uleb128 0x1
 1909 000c EA040000 		.4byte	.LASF76
 1910 0010 01       		.byte	0x1
 1911 0011 BC000000 		.4byte	.LASF77
 1912 0015 06000000 		.4byte	.LASF78
 1913 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1914 001d 00000000 		.4byte	0
 1915 0021 00000000 		.4byte	.Ldebug_line0
 1916 0025 02       		.uleb128 0x2
 1917 0026 01       		.byte	0x1
 1918 0027 06       		.byte	0x6
 1919 0028 44010000 		.4byte	.LASF0
 1920 002c 02       		.uleb128 0x2
 1921 002d 01       		.byte	0x1
 1922 002e 08       		.byte	0x8
 1923 002f 57030000 		.4byte	.LASF1
 1924 0033 02       		.uleb128 0x2
 1925 0034 02       		.byte	0x2
 1926 0035 05       		.byte	0x5
 1927 0036 A0030000 		.4byte	.LASF2
 1928 003a 02       		.uleb128 0x2
 1929 003b 02       		.byte	0x2
 1930 003c 07       		.byte	0x7
 1931 003d 34020000 		.4byte	.LASF3
 1932 0041 02       		.uleb128 0x2
 1933 0042 04       		.byte	0x4
 1934 0043 05       		.byte	0x5
 1935 0044 76010000 		.4byte	.LASF4
 1936 0048 02       		.uleb128 0x2
 1937 0049 04       		.byte	0x4
 1938 004a 07       		.byte	0x7
 1939 004b F5010000 		.4byte	.LASF5
 1940 004f 02       		.uleb128 0x2
 1941 0050 08       		.byte	0x8
 1942 0051 05       		.byte	0x5
 1943 0052 36010000 		.4byte	.LASF6
 1944 0056 02       		.uleb128 0x2
 1945 0057 08       		.byte	0x8
 1946 0058 07       		.byte	0x7
 1947 0059 E2000000 		.4byte	.LASF7
 1948 005d 03       		.uleb128 0x3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 60


 1949 005e 04       		.byte	0x4
 1950 005f 05       		.byte	0x5
 1951 0060 696E7400 		.ascii	"int\000"
 1952 0064 02       		.uleb128 0x2
 1953 0065 04       		.byte	0x4
 1954 0066 07       		.byte	0x7
 1955 0067 D2010000 		.4byte	.LASF8
 1956 006b 04       		.uleb128 0x4
 1957 006c 7F010000 		.4byte	.LASF9
 1958 0070 02       		.byte	0x2
 1959 0071 B901     		.2byte	0x1b9
 1960 0073 2C000000 		.4byte	0x2c
 1961 0077 04       		.uleb128 0x4
 1962 0078 B1010000 		.4byte	.LASF10
 1963 007c 02       		.byte	0x2
 1964 007d BB01     		.2byte	0x1bb
 1965 007f 48000000 		.4byte	0x48
 1966 0083 02       		.uleb128 0x2
 1967 0084 04       		.byte	0x4
 1968 0085 04       		.byte	0x4
 1969 0086 0D030000 		.4byte	.LASF11
 1970 008a 02       		.uleb128 0x2
 1971 008b 08       		.byte	0x8
 1972 008c 04       		.byte	0x4
 1973 008d 85010000 		.4byte	.LASF12
 1974 0091 02       		.uleb128 0x2
 1975 0092 01       		.byte	0x1
 1976 0093 08       		.byte	0x8
 1977 0094 F5030000 		.4byte	.LASF13
 1978 0098 04       		.uleb128 0x4
 1979 0099 6D020000 		.4byte	.LASF14
 1980 009d 02       		.byte	0x2
 1981 009e 6502     		.2byte	0x265
 1982 00a0 A4000000 		.4byte	0xa4
 1983 00a4 05       		.uleb128 0x5
 1984 00a5 77000000 		.4byte	0x77
 1985 00a9 02       		.uleb128 0x2
 1986 00aa 04       		.byte	0x4
 1987 00ab 07       		.byte	0x7
 1988 00ac 9D020000 		.4byte	.LASF15
 1989 00b0 06       		.uleb128 0x6
 1990 00b1 62020000 		.4byte	.LASF16
 1991 00b5 01       		.byte	0x1
 1992 00b6 26       		.byte	0x26
 1993 00b7 00000000 		.4byte	.LFB2
 1994 00bb 58000000 		.4byte	.LFE2-.LFB2
 1995 00bf 01       		.uleb128 0x1
 1996 00c0 9C       		.byte	0x9c
 1997 00c1 07       		.uleb128 0x7
 1998 00c2 55020000 		.4byte	.LASF18
 1999 00c6 01       		.byte	0x1
 2000 00c7 B1       		.byte	0xb1
 2001 00c8 00000000 		.4byte	.LFB3
 2002 00cc 38000000 		.4byte	.LFE3-.LFB3
 2003 00d0 01       		.uleb128 0x1
 2004 00d1 9C       		.byte	0x9c
 2005 00d2 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 61


 2006 00d6 08       		.uleb128 0x8
 2007 00d7 94040000 		.4byte	.LASF20
 2008 00db 01       		.byte	0x1
 2009 00dc B3       		.byte	0xb3
 2010 00dd 6B000000 		.4byte	0x6b
 2011 00e1 02       		.uleb128 0x2
 2012 00e2 91       		.byte	0x91
 2013 00e3 6F       		.sleb128 -17
 2014 00e4 00       		.byte	0
 2015 00e5 06       		.uleb128 0x6
 2016 00e6 74040000 		.4byte	.LASF17
 2017 00ea 01       		.byte	0x1
 2018 00eb E6       		.byte	0xe6
 2019 00ec 00000000 		.4byte	.LFB4
 2020 00f0 24000000 		.4byte	.LFE4-.LFB4
 2021 00f4 01       		.uleb128 0x1
 2022 00f5 9C       		.byte	0x9c
 2023 00f6 09       		.uleb128 0x9
 2024 00f7 71000000 		.4byte	.LASF19
 2025 00fb 01       		.byte	0x1
 2026 00fc 0001     		.2byte	0x100
 2027 00fe 00000000 		.4byte	.LFB5
 2028 0102 30000000 		.4byte	.LFE5-.LFB5
 2029 0106 01       		.uleb128 0x1
 2030 0107 9C       		.byte	0x9c
 2031 0108 1C010000 		.4byte	0x11c
 2032 010c 0A       		.uleb128 0xa
 2033 010d 94040000 		.4byte	.LASF20
 2034 0111 01       		.byte	0x1
 2035 0112 0201     		.2byte	0x102
 2036 0114 6B000000 		.4byte	0x6b
 2037 0118 02       		.uleb128 0x2
 2038 0119 91       		.byte	0x91
 2039 011a 6F       		.sleb128 -17
 2040 011b 00       		.byte	0
 2041 011c 09       		.uleb128 0x9
 2042 011d DF010000 		.4byte	.LASF21
 2043 0121 01       		.byte	0x1
 2044 0122 2501     		.2byte	0x125
 2045 0124 00000000 		.4byte	.LFB6
 2046 0128 48000000 		.4byte	.LFE6-.LFB6
 2047 012c 01       		.uleb128 0x1
 2048 012d 9C       		.byte	0x9c
 2049 012e 51010000 		.4byte	0x151
 2050 0132 0B       		.uleb128 0xb
 2051 0133 FA030000 		.4byte	.LASF23
 2052 0137 01       		.byte	0x1
 2053 0138 2501     		.2byte	0x125
 2054 013a 77000000 		.4byte	0x77
 2055 013e 02       		.uleb128 0x2
 2056 013f 91       		.byte	0x91
 2057 0140 64       		.sleb128 -28
 2058 0141 0A       		.uleb128 0xa
 2059 0142 94040000 		.4byte	.LASF20
 2060 0146 01       		.byte	0x1
 2061 0147 2701     		.2byte	0x127
 2062 0149 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 62


 2063 014d 02       		.uleb128 0x2
 2064 014e 91       		.byte	0x91
 2065 014f 6F       		.sleb128 -17
 2066 0150 00       		.byte	0
 2067 0151 09       		.uleb128 0x9
 2068 0152 DA040000 		.4byte	.LASF22
 2069 0156 01       		.byte	0x1
 2070 0157 4601     		.2byte	0x146
 2071 0159 00000000 		.4byte	.LFB7
 2072 015d 48000000 		.4byte	.LFE7-.LFB7
 2073 0161 01       		.uleb128 0x1
 2074 0162 9C       		.byte	0x9c
 2075 0163 86010000 		.4byte	0x186
 2076 0167 0B       		.uleb128 0xb
 2077 0168 F9000000 		.4byte	.LASF24
 2078 016c 01       		.byte	0x1
 2079 016d 4601     		.2byte	0x146
 2080 016f 77000000 		.4byte	0x77
 2081 0173 02       		.uleb128 0x2
 2082 0174 91       		.byte	0x91
 2083 0175 64       		.sleb128 -28
 2084 0176 0A       		.uleb128 0xa
 2085 0177 94040000 		.4byte	.LASF20
 2086 017b 01       		.byte	0x1
 2087 017c 4801     		.2byte	0x148
 2088 017e 6B000000 		.4byte	0x6b
 2089 0182 02       		.uleb128 0x2
 2090 0183 91       		.byte	0x91
 2091 0184 6F       		.sleb128 -17
 2092 0185 00       		.byte	0
 2093 0186 09       		.uleb128 0x9
 2094 0187 14040000 		.4byte	.LASF25
 2095 018b 01       		.byte	0x1
 2096 018c 6B01     		.2byte	0x16b
 2097 018e 00000000 		.4byte	.LFB8
 2098 0192 48000000 		.4byte	.LFE8-.LFB8
 2099 0196 01       		.uleb128 0x1
 2100 0197 9C       		.byte	0x9c
 2101 0198 BB010000 		.4byte	0x1bb
 2102 019c 0B       		.uleb128 0xb
 2103 019d 13030000 		.4byte	.LASF26
 2104 01a1 01       		.byte	0x1
 2105 01a2 6B01     		.2byte	0x16b
 2106 01a4 77000000 		.4byte	0x77
 2107 01a8 02       		.uleb128 0x2
 2108 01a9 91       		.byte	0x91
 2109 01aa 64       		.sleb128 -28
 2110 01ab 0A       		.uleb128 0xa
 2111 01ac 94040000 		.4byte	.LASF20
 2112 01b0 01       		.byte	0x1
 2113 01b1 6D01     		.2byte	0x16d
 2114 01b3 6B000000 		.4byte	0x6b
 2115 01b7 02       		.uleb128 0x2
 2116 01b8 91       		.byte	0x91
 2117 01b9 6F       		.sleb128 -17
 2118 01ba 00       		.byte	0
 2119 01bb 09       		.uleb128 0x9
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 63


 2120 01bc 00010000 		.4byte	.LASF27
 2121 01c0 01       		.byte	0x1
 2122 01c1 8B01     		.2byte	0x18b
 2123 01c3 00000000 		.4byte	.LFB9
 2124 01c7 4C000000 		.4byte	.LFE9-.LFB9
 2125 01cb 01       		.uleb128 0x1
 2126 01cc 9C       		.byte	0x9c
 2127 01cd F0010000 		.4byte	0x1f0
 2128 01d1 0B       		.uleb128 0xb
 2129 01d2 47020000 		.4byte	.LASF28
 2130 01d6 01       		.byte	0x1
 2131 01d7 8B01     		.2byte	0x18b
 2132 01d9 77000000 		.4byte	0x77
 2133 01dd 02       		.uleb128 0x2
 2134 01de 91       		.byte	0x91
 2135 01df 64       		.sleb128 -28
 2136 01e0 0A       		.uleb128 0xa
 2137 01e1 94040000 		.4byte	.LASF20
 2138 01e5 01       		.byte	0x1
 2139 01e6 8D01     		.2byte	0x18d
 2140 01e8 6B000000 		.4byte	0x6b
 2141 01ec 02       		.uleb128 0x2
 2142 01ed 91       		.byte	0x91
 2143 01ee 6F       		.sleb128 -17
 2144 01ef 00       		.byte	0
 2145 01f0 0C       		.uleb128 0xc
 2146 01f1 BD020000 		.4byte	.LASF29
 2147 01f5 01       		.byte	0x1
 2148 01f6 C101     		.2byte	0x1c1
 2149 01f8 00000000 		.4byte	.LFB10
 2150 01fc 1C000000 		.4byte	.LFE10-.LFB10
 2151 0200 01       		.uleb128 0x1
 2152 0201 9C       		.byte	0x9c
 2153 0202 16020000 		.4byte	0x216
 2154 0206 0B       		.uleb128 0xb
 2155 0207 07020000 		.4byte	.LASF30
 2156 020b 01       		.byte	0x1
 2157 020c C101     		.2byte	0x1c1
 2158 020e 77000000 		.4byte	0x77
 2159 0212 02       		.uleb128 0x2
 2160 0213 91       		.byte	0x91
 2161 0214 74       		.sleb128 -12
 2162 0215 00       		.byte	0
 2163 0216 09       		.uleb128 0x9
 2164 0217 7A030000 		.4byte	.LASF31
 2165 021b 01       		.byte	0x1
 2166 021c E501     		.2byte	0x1e5
 2167 021e 00000000 		.4byte	.LFB11
 2168 0222 48000000 		.4byte	.LFE11-.LFB11
 2169 0226 01       		.uleb128 0x1
 2170 0227 9C       		.byte	0x9c
 2171 0228 4B020000 		.4byte	0x24b
 2172 022c 0B       		.uleb128 0xb
 2173 022d A6020000 		.4byte	.LASF32
 2174 0231 01       		.byte	0x1
 2175 0232 E501     		.2byte	0x1e5
 2176 0234 77000000 		.4byte	0x77
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 64


 2177 0238 02       		.uleb128 0x2
 2178 0239 91       		.byte	0x91
 2179 023a 64       		.sleb128 -28
 2180 023b 0A       		.uleb128 0xa
 2181 023c 94040000 		.4byte	.LASF20
 2182 0240 01       		.byte	0x1
 2183 0241 E701     		.2byte	0x1e7
 2184 0243 6B000000 		.4byte	0x6b
 2185 0247 02       		.uleb128 0x2
 2186 0248 91       		.byte	0x91
 2187 0249 6F       		.sleb128 -17
 2188 024a 00       		.byte	0
 2189 024b 09       		.uleb128 0x9
 2190 024c 86020000 		.4byte	.LASF33
 2191 0250 01       		.byte	0x1
 2192 0251 0702     		.2byte	0x207
 2193 0253 00000000 		.4byte	.LFB12
 2194 0257 48000000 		.4byte	.LFE12-.LFB12
 2195 025b 01       		.uleb128 0x1
 2196 025c 9C       		.byte	0x9c
 2197 025d 80020000 		.4byte	0x280
 2198 0261 0B       		.uleb128 0xb
 2199 0262 8F030000 		.4byte	.LASF34
 2200 0266 01       		.byte	0x1
 2201 0267 0702     		.2byte	0x207
 2202 0269 77000000 		.4byte	0x77
 2203 026d 02       		.uleb128 0x2
 2204 026e 91       		.byte	0x91
 2205 026f 64       		.sleb128 -28
 2206 0270 0A       		.uleb128 0xa
 2207 0271 94040000 		.4byte	.LASF20
 2208 0275 01       		.byte	0x1
 2209 0276 0902     		.2byte	0x209
 2210 0278 6B000000 		.4byte	0x6b
 2211 027c 02       		.uleb128 0x2
 2212 027d 91       		.byte	0x91
 2213 027e 6F       		.sleb128 -17
 2214 027f 00       		.byte	0
 2215 0280 09       		.uleb128 0x9
 2216 0281 65030000 		.4byte	.LASF35
 2217 0285 01       		.byte	0x1
 2218 0286 2802     		.2byte	0x228
 2219 0288 00000000 		.4byte	.LFB13
 2220 028c 4C000000 		.4byte	.LFE13-.LFB13
 2221 0290 01       		.uleb128 0x1
 2222 0291 9C       		.byte	0x9c
 2223 0292 B5020000 		.4byte	0x2b5
 2224 0296 0B       		.uleb128 0xb
 2225 0297 C9010000 		.4byte	.LASF36
 2226 029b 01       		.byte	0x1
 2227 029c 2802     		.2byte	0x228
 2228 029e 77000000 		.4byte	0x77
 2229 02a2 02       		.uleb128 0x2
 2230 02a3 91       		.byte	0x91
 2231 02a4 64       		.sleb128 -28
 2232 02a5 0A       		.uleb128 0xa
 2233 02a6 94040000 		.4byte	.LASF20
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 65


 2234 02aa 01       		.byte	0x1
 2235 02ab 2A02     		.2byte	0x22a
 2236 02ad 6B000000 		.4byte	0x6b
 2237 02b1 02       		.uleb128 0x2
 2238 02b2 91       		.byte	0x91
 2239 02b3 6F       		.sleb128 -17
 2240 02b4 00       		.byte	0
 2241 02b5 09       		.uleb128 0x9
 2242 02b6 31030000 		.4byte	.LASF37
 2243 02ba 01       		.byte	0x1
 2244 02bb 4902     		.2byte	0x249
 2245 02bd 00000000 		.4byte	.LFB14
 2246 02c1 48000000 		.4byte	.LFE14-.LFB14
 2247 02c5 01       		.uleb128 0x1
 2248 02c6 9C       		.byte	0x9c
 2249 02c7 EA020000 		.4byte	0x2ea
 2250 02cb 0B       		.uleb128 0xb
 2251 02cc C4010000 		.4byte	.LASF38
 2252 02d0 01       		.byte	0x1
 2253 02d1 4902     		.2byte	0x249
 2254 02d3 77000000 		.4byte	0x77
 2255 02d7 02       		.uleb128 0x2
 2256 02d8 91       		.byte	0x91
 2257 02d9 64       		.sleb128 -28
 2258 02da 0A       		.uleb128 0xa
 2259 02db 94040000 		.4byte	.LASF20
 2260 02df 01       		.byte	0x1
 2261 02e0 4B02     		.2byte	0x24b
 2262 02e2 6B000000 		.4byte	0x6b
 2263 02e6 02       		.uleb128 0x2
 2264 02e7 91       		.byte	0x91
 2265 02e8 6F       		.sleb128 -17
 2266 02e9 00       		.byte	0
 2267 02ea 0C       		.uleb128 0xc
 2268 02eb 73020000 		.4byte	.LASF39
 2269 02ef 01       		.byte	0x1
 2270 02f0 6702     		.2byte	0x267
 2271 02f2 00000000 		.4byte	.LFB15
 2272 02f6 1C000000 		.4byte	.LFE15-.LFB15
 2273 02fa 01       		.uleb128 0x1
 2274 02fb 9C       		.byte	0x9c
 2275 02fc 10030000 		.4byte	0x310
 2276 0300 0B       		.uleb128 0xb
 2277 0301 00000000 		.4byte	.LASF40
 2278 0305 01       		.byte	0x1
 2279 0306 6702     		.2byte	0x267
 2280 0308 77000000 		.4byte	0x77
 2281 030c 02       		.uleb128 0x2
 2282 030d 91       		.byte	0x91
 2283 030e 74       		.sleb128 -12
 2284 030f 00       		.byte	0
 2285 0310 0D       		.uleb128 0xd
 2286 0311 8C010000 		.4byte	.LASF45
 2287 0315 01       		.byte	0x1
 2288 0316 7B02     		.2byte	0x27b
 2289 0318 77000000 		.4byte	0x77
 2290 031c 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 66


 2291 0320 18000000 		.4byte	.LFE16-.LFB16
 2292 0324 01       		.uleb128 0x1
 2293 0325 9C       		.byte	0x9c
 2294 0326 09       		.uleb128 0x9
 2295 0327 CE020000 		.4byte	.LASF41
 2296 032b 01       		.byte	0x1
 2297 032c 9802     		.2byte	0x298
 2298 032e 00000000 		.4byte	.LFB17
 2299 0332 48000000 		.4byte	.LFE17-.LFB17
 2300 0336 01       		.uleb128 0x1
 2301 0337 9C       		.byte	0x9c
 2302 0338 5B030000 		.4byte	0x35b
 2303 033c 0B       		.uleb128 0xb
 2304 033d 52040000 		.4byte	.LASF42
 2305 0341 01       		.byte	0x1
 2306 0342 9802     		.2byte	0x298
 2307 0344 77000000 		.4byte	0x77
 2308 0348 02       		.uleb128 0x2
 2309 0349 91       		.byte	0x91
 2310 034a 64       		.sleb128 -28
 2311 034b 0A       		.uleb128 0xa
 2312 034c 94040000 		.4byte	.LASF20
 2313 0350 01       		.byte	0x1
 2314 0351 9A02     		.2byte	0x29a
 2315 0353 6B000000 		.4byte	0x6b
 2316 0357 02       		.uleb128 0x2
 2317 0358 91       		.byte	0x91
 2318 0359 6F       		.sleb128 -17
 2319 035a 00       		.byte	0
 2320 035b 0C       		.uleb128 0xc
 2321 035c A5040000 		.4byte	.LASF43
 2322 0360 01       		.byte	0x1
 2323 0361 B502     		.2byte	0x2b5
 2324 0363 00000000 		.4byte	.LFB18
 2325 0367 1C000000 		.4byte	.LFE18-.LFB18
 2326 036b 01       		.uleb128 0x1
 2327 036c 9C       		.byte	0x9c
 2328 036d 81030000 		.4byte	0x381
 2329 0371 0B       		.uleb128 0xb
 2330 0372 DB000000 		.4byte	.LASF44
 2331 0376 01       		.byte	0x1
 2332 0377 B502     		.2byte	0x2b5
 2333 0379 77000000 		.4byte	0x77
 2334 037d 02       		.uleb128 0x2
 2335 037e 91       		.byte	0x91
 2336 037f 74       		.sleb128 -12
 2337 0380 00       		.byte	0
 2338 0381 0D       		.uleb128 0xd
 2339 0382 10020000 		.4byte	.LASF46
 2340 0386 01       		.byte	0x1
 2341 0387 C902     		.2byte	0x2c9
 2342 0389 77000000 		.4byte	0x77
 2343 038d 00000000 		.4byte	.LFB19
 2344 0391 18000000 		.4byte	.LFE19-.LFB19
 2345 0395 01       		.uleb128 0x1
 2346 0396 9C       		.byte	0x9c
 2347 0397 09       		.uleb128 0x9
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 67


 2348 0398 F8020000 		.4byte	.LASF47
 2349 039c 01       		.byte	0x1
 2350 039d E302     		.2byte	0x2e3
 2351 039f 00000000 		.4byte	.LFB20
 2352 03a3 48000000 		.4byte	.LFE20-.LFB20
 2353 03a7 01       		.uleb128 0x1
 2354 03a8 9C       		.byte	0x9c
 2355 03a9 CC030000 		.4byte	0x3cc
 2356 03ad 0B       		.uleb128 0xb
 2357 03ae 5E040000 		.4byte	.LASF48
 2358 03b2 01       		.byte	0x1
 2359 03b3 E302     		.2byte	0x2e3
 2360 03b5 77000000 		.4byte	0x77
 2361 03b9 02       		.uleb128 0x2
 2362 03ba 91       		.byte	0x91
 2363 03bb 64       		.sleb128 -28
 2364 03bc 0A       		.uleb128 0xa
 2365 03bd 94040000 		.4byte	.LASF20
 2366 03c1 01       		.byte	0x1
 2367 03c2 E502     		.2byte	0x2e5
 2368 03c4 6B000000 		.4byte	0x6b
 2369 03c8 02       		.uleb128 0x2
 2370 03c9 91       		.byte	0x91
 2371 03ca 6F       		.sleb128 -17
 2372 03cb 00       		.byte	0
 2373 03cc 0C       		.uleb128 0xc
 2374 03cd A7000000 		.4byte	.LASF49
 2375 03d1 01       		.byte	0x1
 2376 03d2 FE02     		.2byte	0x2fe
 2377 03d4 00000000 		.4byte	.LFB21
 2378 03d8 1C000000 		.4byte	.LFE21-.LFB21
 2379 03dc 01       		.uleb128 0x1
 2380 03dd 9C       		.byte	0x9c
 2381 03de F2030000 		.4byte	0x3f2
 2382 03e2 0B       		.uleb128 0xb
 2383 03e3 78050000 		.4byte	.LASF50
 2384 03e7 01       		.byte	0x1
 2385 03e8 FE02     		.2byte	0x2fe
 2386 03ea 77000000 		.4byte	0x77
 2387 03ee 02       		.uleb128 0x2
 2388 03ef 91       		.byte	0x91
 2389 03f0 74       		.sleb128 -12
 2390 03f1 00       		.byte	0
 2391 03f2 0D       		.uleb128 0xd
 2392 03f3 1D030000 		.4byte	.LASF51
 2393 03f7 01       		.byte	0x1
 2394 03f8 1203     		.2byte	0x312
 2395 03fa 77000000 		.4byte	0x77
 2396 03fe 00000000 		.4byte	.LFB22
 2397 0402 18000000 		.4byte	.LFE22-.LFB22
 2398 0406 01       		.uleb128 0x1
 2399 0407 9C       		.byte	0x9c
 2400 0408 09       		.uleb128 0x9
 2401 0409 AA030000 		.4byte	.LASF52
 2402 040d 01       		.byte	0x1
 2403 040e 2C03     		.2byte	0x32c
 2404 0410 00000000 		.4byte	.LFB23
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 68


 2405 0414 48000000 		.4byte	.LFE23-.LFB23
 2406 0418 01       		.uleb128 0x1
 2407 0419 9C       		.byte	0x9c
 2408 041a 3D040000 		.4byte	0x43d
 2409 041e 0B       		.uleb128 0xb
 2410 041f 5E040000 		.4byte	.LASF48
 2411 0423 01       		.byte	0x1
 2412 0424 2C03     		.2byte	0x32c
 2413 0426 77000000 		.4byte	0x77
 2414 042a 02       		.uleb128 0x2
 2415 042b 91       		.byte	0x91
 2416 042c 64       		.sleb128 -28
 2417 042d 0A       		.uleb128 0xa
 2418 042e 94040000 		.4byte	.LASF20
 2419 0432 01       		.byte	0x1
 2420 0433 2E03     		.2byte	0x32e
 2421 0435 6B000000 		.4byte	0x6b
 2422 0439 02       		.uleb128 0x2
 2423 043a 91       		.byte	0x91
 2424 043b 6F       		.sleb128 -17
 2425 043c 00       		.byte	0
 2426 043d 0C       		.uleb128 0xc
 2427 043e 21020000 		.4byte	.LASF53
 2428 0442 01       		.byte	0x1
 2429 0443 5103     		.2byte	0x351
 2430 0445 00000000 		.4byte	.LFB24
 2431 0449 1C000000 		.4byte	.LFE24-.LFB24
 2432 044d 01       		.uleb128 0x1
 2433 044e 9C       		.byte	0x9c
 2434 044f 63040000 		.4byte	0x463
 2435 0453 0B       		.uleb128 0xb
 2436 0454 B5020000 		.4byte	.LASF54
 2437 0458 01       		.byte	0x1
 2438 0459 5103     		.2byte	0x351
 2439 045b 77000000 		.4byte	0x77
 2440 045f 02       		.uleb128 0x2
 2441 0460 91       		.byte	0x91
 2442 0461 74       		.sleb128 -12
 2443 0462 00       		.byte	0
 2444 0463 0D       		.uleb128 0xd
 2445 0464 11010000 		.4byte	.LASF55
 2446 0468 01       		.byte	0x1
 2447 0469 8403     		.2byte	0x384
 2448 046b 77000000 		.4byte	0x77
 2449 046f 00000000 		.4byte	.LFB25
 2450 0473 18000000 		.4byte	.LFE25-.LFB25
 2451 0477 01       		.uleb128 0x1
 2452 0478 9C       		.byte	0x9c
 2453 0479 0C       		.uleb128 0xc
 2454 047a 3C040000 		.4byte	.LASF56
 2455 047e 01       		.byte	0x1
 2456 047f BA03     		.2byte	0x3ba
 2457 0481 00000000 		.4byte	.LFB26
 2458 0485 1C000000 		.4byte	.LFE26-.LFB26
 2459 0489 01       		.uleb128 0x1
 2460 048a 9C       		.byte	0x9c
 2461 048b 9F040000 		.4byte	0x49f
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 69


 2462 048f 0B       		.uleb128 0xb
 2463 0490 69040000 		.4byte	.LASF57
 2464 0494 01       		.byte	0x1
 2465 0495 BA03     		.2byte	0x3ba
 2466 0497 77000000 		.4byte	0x77
 2467 049b 02       		.uleb128 0x2
 2468 049c 91       		.byte	0x91
 2469 049d 74       		.sleb128 -12
 2470 049e 00       		.byte	0
 2471 049f 0D       		.uleb128 0xd
 2472 04a0 E3020000 		.4byte	.LASF58
 2473 04a4 01       		.byte	0x1
 2474 04a5 E803     		.2byte	0x3e8
 2475 04a7 77000000 		.4byte	0x77
 2476 04ab 00000000 		.4byte	.LFB27
 2477 04af 18000000 		.4byte	.LFE27-.LFB27
 2478 04b3 01       		.uleb128 0x1
 2479 04b4 9C       		.byte	0x9c
 2480 04b5 0D       		.uleb128 0xd
 2481 04b6 7C000000 		.4byte	.LASF59
 2482 04ba 01       		.byte	0x1
 2483 04bb 1604     		.2byte	0x416
 2484 04bd 77000000 		.4byte	0x77
 2485 04c1 00000000 		.4byte	.LFB28
 2486 04c5 18000000 		.4byte	.LFE28-.LFB28
 2487 04c9 01       		.uleb128 0x1
 2488 04ca 9C       		.byte	0x9c
 2489 04cb 0D       		.uleb128 0xd
 2490 04cc 50010000 		.4byte	.LASF60
 2491 04d0 01       		.byte	0x1
 2492 04d1 2B04     		.2byte	0x42b
 2493 04d3 77000000 		.4byte	0x77
 2494 04d7 00000000 		.4byte	.LFB29
 2495 04db 18000000 		.4byte	.LFE29-.LFB29
 2496 04df 01       		.uleb128 0x1
 2497 04e0 9C       		.byte	0x9c
 2498 04e1 09       		.uleb128 0x9
 2499 04e2 B7040000 		.4byte	.LASF61
 2500 04e6 01       		.byte	0x1
 2501 04e7 4604     		.2byte	0x446
 2502 04e9 00000000 		.4byte	.LFB30
 2503 04ed 44000000 		.4byte	.LFE30-.LFB30
 2504 04f1 01       		.uleb128 0x1
 2505 04f2 9C       		.byte	0x9c
 2506 04f3 16050000 		.4byte	0x516
 2507 04f7 0B       		.uleb128 0xb
 2508 04f8 B8010000 		.4byte	.LASF62
 2509 04fc 01       		.byte	0x1
 2510 04fd 4604     		.2byte	0x446
 2511 04ff 77000000 		.4byte	0x77
 2512 0503 02       		.uleb128 0x2
 2513 0504 91       		.byte	0x91
 2514 0505 64       		.sleb128 -28
 2515 0506 0A       		.uleb128 0xa
 2516 0507 94040000 		.4byte	.LASF20
 2517 050b 01       		.byte	0x1
 2518 050c 4804     		.2byte	0x448
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 70


 2519 050e 6B000000 		.4byte	0x6b
 2520 0512 02       		.uleb128 0x2
 2521 0513 91       		.byte	0x91
 2522 0514 6F       		.sleb128 -17
 2523 0515 00       		.byte	0
 2524 0516 09       		.uleb128 0x9
 2525 0517 80040000 		.4byte	.LASF63
 2526 051b 01       		.byte	0x1
 2527 051c 6704     		.2byte	0x467
 2528 051e 00000000 		.4byte	.LFB31
 2529 0522 44000000 		.4byte	.LFE31-.LFB31
 2530 0526 01       		.uleb128 0x1
 2531 0527 9C       		.byte	0x9c
 2532 0528 4B050000 		.4byte	0x54b
 2533 052c 0B       		.uleb128 0xb
 2534 052d B8010000 		.4byte	.LASF62
 2535 0531 01       		.byte	0x1
 2536 0532 6704     		.2byte	0x467
 2537 0534 77000000 		.4byte	0x77
 2538 0538 02       		.uleb128 0x2
 2539 0539 91       		.byte	0x91
 2540 053a 64       		.sleb128 -28
 2541 053b 0A       		.uleb128 0xa
 2542 053c 94040000 		.4byte	.LASF20
 2543 0540 01       		.byte	0x1
 2544 0541 6904     		.2byte	0x469
 2545 0543 6B000000 		.4byte	0x6b
 2546 0547 02       		.uleb128 0x2
 2547 0548 91       		.byte	0x91
 2548 0549 6F       		.sleb128 -17
 2549 054a 00       		.byte	0
 2550 054b 09       		.uleb128 0x9
 2551 054c 44030000 		.4byte	.LASF64
 2552 0550 01       		.byte	0x1
 2553 0551 8804     		.2byte	0x488
 2554 0553 00000000 		.4byte	.LFB32
 2555 0557 48000000 		.4byte	.LFE32-.LFB32
 2556 055b 01       		.uleb128 0x1
 2557 055c 9C       		.byte	0x9c
 2558 055d 80050000 		.4byte	0x580
 2559 0561 0B       		.uleb128 0xb
 2560 0562 B8010000 		.4byte	.LASF62
 2561 0566 01       		.byte	0x1
 2562 0567 8804     		.2byte	0x488
 2563 0569 77000000 		.4byte	0x77
 2564 056d 02       		.uleb128 0x2
 2565 056e 91       		.byte	0x91
 2566 056f 64       		.sleb128 -28
 2567 0570 0A       		.uleb128 0xa
 2568 0571 94040000 		.4byte	.LASF20
 2569 0575 01       		.byte	0x1
 2570 0576 8A04     		.2byte	0x48a
 2571 0578 6B000000 		.4byte	0x6b
 2572 057c 02       		.uleb128 0x2
 2573 057d 91       		.byte	0x91
 2574 057e 6F       		.sleb128 -17
 2575 057f 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 71


 2576 0580 09       		.uleb128 0x9
 2577 0581 E3030000 		.4byte	.LASF65
 2578 0585 01       		.byte	0x1
 2579 0586 A804     		.2byte	0x4a8
 2580 0588 00000000 		.4byte	.LFB33
 2581 058c 44000000 		.4byte	.LFE33-.LFB33
 2582 0590 01       		.uleb128 0x1
 2583 0591 9C       		.byte	0x9c
 2584 0592 B5050000 		.4byte	0x5b5
 2585 0596 0B       		.uleb128 0xb
 2586 0597 B8010000 		.4byte	.LASF62
 2587 059b 01       		.byte	0x1
 2588 059c A804     		.2byte	0x4a8
 2589 059e 77000000 		.4byte	0x77
 2590 05a2 02       		.uleb128 0x2
 2591 05a3 91       		.byte	0x91
 2592 05a4 64       		.sleb128 -28
 2593 05a5 0A       		.uleb128 0xa
 2594 05a6 94040000 		.4byte	.LASF20
 2595 05aa 01       		.byte	0x1
 2596 05ab AA04     		.2byte	0x4aa
 2597 05ad 6B000000 		.4byte	0x6b
 2598 05b1 02       		.uleb128 0x2
 2599 05b2 91       		.byte	0x91
 2600 05b3 6F       		.sleb128 -17
 2601 05b4 00       		.byte	0
 2602 05b5 09       		.uleb128 0x9
 2603 05b6 9E010000 		.4byte	.LASF66
 2604 05ba 01       		.byte	0x1
 2605 05bb C904     		.2byte	0x4c9
 2606 05bd 00000000 		.4byte	.LFB34
 2607 05c1 44000000 		.4byte	.LFE34-.LFB34
 2608 05c5 01       		.uleb128 0x1
 2609 05c6 9C       		.byte	0x9c
 2610 05c7 EA050000 		.4byte	0x5ea
 2611 05cb 0B       		.uleb128 0xb
 2612 05cc B8010000 		.4byte	.LASF62
 2613 05d0 01       		.byte	0x1
 2614 05d1 C904     		.2byte	0x4c9
 2615 05d3 77000000 		.4byte	0x77
 2616 05d7 02       		.uleb128 0x2
 2617 05d8 91       		.byte	0x91
 2618 05d9 64       		.sleb128 -28
 2619 05da 0A       		.uleb128 0xa
 2620 05db 94040000 		.4byte	.LASF20
 2621 05df 01       		.byte	0x1
 2622 05e0 CB04     		.2byte	0x4cb
 2623 05e2 6B000000 		.4byte	0x6b
 2624 05e6 02       		.uleb128 0x2
 2625 05e7 91       		.byte	0x91
 2626 05e8 6F       		.sleb128 -17
 2627 05e9 00       		.byte	0
 2628 05ea 09       		.uleb128 0x9
 2629 05eb FF030000 		.4byte	.LASF67
 2630 05ef 01       		.byte	0x1
 2631 05f0 F104     		.2byte	0x4f1
 2632 05f2 00000000 		.4byte	.LFB35
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 72


 2633 05f6 38000000 		.4byte	.LFE35-.LFB35
 2634 05fa 01       		.uleb128 0x1
 2635 05fb 9C       		.byte	0x9c
 2636 05fc 2E060000 		.4byte	0x62e
 2637 0600 0B       		.uleb128 0xb
 2638 0601 C4010000 		.4byte	.LASF38
 2639 0605 01       		.byte	0x1
 2640 0606 F104     		.2byte	0x4f1
 2641 0608 77000000 		.4byte	0x77
 2642 060c 02       		.uleb128 0x2
 2643 060d 91       		.byte	0x91
 2644 060e 64       		.sleb128 -28
 2645 060f 0B       		.uleb128 0xb
 2646 0610 ED010000 		.4byte	.LASF68
 2647 0614 01       		.byte	0x1
 2648 0615 F104     		.2byte	0x4f1
 2649 0617 77000000 		.4byte	0x77
 2650 061b 02       		.uleb128 0x2
 2651 061c 91       		.byte	0x91
 2652 061d 60       		.sleb128 -32
 2653 061e 0A       		.uleb128 0xa
 2654 061f 94040000 		.4byte	.LASF20
 2655 0623 01       		.byte	0x1
 2656 0624 F304     		.2byte	0x4f3
 2657 0626 6B000000 		.4byte	0x6b
 2658 062a 02       		.uleb128 0x2
 2659 062b 91       		.byte	0x91
 2660 062c 6F       		.sleb128 -17
 2661 062d 00       		.byte	0
 2662 062e 0D       		.uleb128 0xd
 2663 062f 65010000 		.4byte	.LASF69
 2664 0633 01       		.byte	0x1
 2665 0634 0E05     		.2byte	0x50e
 2666 0636 77000000 		.4byte	0x77
 2667 063a 00000000 		.4byte	.LFB36
 2668 063e 20000000 		.4byte	.LFE36-.LFB36
 2669 0642 01       		.uleb128 0x1
 2670 0643 9C       		.byte	0x9c
 2671 0644 0C       		.uleb128 0xc
 2672 0645 CC030000 		.4byte	.LASF70
 2673 0649 01       		.byte	0x1
 2674 064a 2705     		.2byte	0x527
 2675 064c 00000000 		.4byte	.LFB37
 2676 0650 18000000 		.4byte	.LFE37-.LFB37
 2677 0654 01       		.uleb128 0x1
 2678 0655 9C       		.byte	0x9c
 2679 0656 6A060000 		.4byte	0x66a
 2680 065a 0B       		.uleb128 0xb
 2681 065b BE030000 		.4byte	.LASF71
 2682 065f 01       		.byte	0x1
 2683 0660 2705     		.2byte	0x527
 2684 0662 77000000 		.4byte	0x77
 2685 0666 02       		.uleb128 0x2
 2686 0667 91       		.byte	0x91
 2687 0668 74       		.sleb128 -12
 2688 0669 00       		.byte	0
 2689 066a 0D       		.uleb128 0xd
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 73


 2690 066b 82050000 		.4byte	.LASF72
 2691 066f 01       		.byte	0x1
 2692 0670 3E05     		.2byte	0x53e
 2693 0672 77000000 		.4byte	0x77
 2694 0676 00000000 		.4byte	.LFB38
 2695 067a 14000000 		.4byte	.LFE38-.LFB38
 2696 067e 01       		.uleb128 0x1
 2697 067f 9C       		.byte	0x9c
 2698 0680 0D       		.uleb128 0xd
 2699 0681 8E000000 		.4byte	.LASF73
 2700 0685 01       		.byte	0x1
 2701 0686 5505     		.2byte	0x555
 2702 0688 77000000 		.4byte	0x77
 2703 068c 00000000 		.4byte	.LFB39
 2704 0690 14000000 		.4byte	.LFE39-.LFB39
 2705 0694 01       		.uleb128 0x1
 2706 0695 9C       		.byte	0x9c
 2707 0696 0C       		.uleb128 0xc
 2708 0697 27040000 		.4byte	.LASF74
 2709 069b 01       		.byte	0x1
 2710 069c 6C05     		.2byte	0x56c
 2711 069e 00000000 		.4byte	.LFB40
 2712 06a2 18000000 		.4byte	.LFE40-.LFB40
 2713 06a6 01       		.uleb128 0x1
 2714 06a7 9C       		.byte	0x9c
 2715 06a8 BC060000 		.4byte	0x6bc
 2716 06ac 0B       		.uleb128 0xb
 2717 06ad BE030000 		.4byte	.LASF71
 2718 06b1 01       		.byte	0x1
 2719 06b2 6C05     		.2byte	0x56c
 2720 06b4 77000000 		.4byte	0x77
 2721 06b8 02       		.uleb128 0x2
 2722 06b9 91       		.byte	0x91
 2723 06ba 74       		.sleb128 -12
 2724 06bb 00       		.byte	0
 2725 06bc 0C       		.uleb128 0xc
 2726 06bd 23010000 		.4byte	.LASF75
 2727 06c1 01       		.byte	0x1
 2728 06c2 8305     		.2byte	0x583
 2729 06c4 00000000 		.4byte	.LFB41
 2730 06c8 18000000 		.4byte	.LFE41-.LFB41
 2731 06cc 01       		.uleb128 0x1
 2732 06cd 9C       		.byte	0x9c
 2733 06ce E2060000 		.4byte	0x6e2
 2734 06d2 0B       		.uleb128 0xb
 2735 06d3 BE030000 		.4byte	.LASF71
 2736 06d7 01       		.byte	0x1
 2737 06d8 8305     		.2byte	0x583
 2738 06da 77000000 		.4byte	0x77
 2739 06de 02       		.uleb128 0x2
 2740 06df 91       		.byte	0x91
 2741 06e0 74       		.sleb128 -12
 2742 06e1 00       		.byte	0
 2743 06e2 0E       		.uleb128 0xe
 2744 06e3 CC040000 		.4byte	.LASF79
 2745 06e7 01       		.byte	0x1
 2746 06e8 15       		.byte	0x15
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 74


 2747 06e9 6B000000 		.4byte	0x6b
 2748 06ed 05       		.uleb128 0x5
 2749 06ee 03       		.byte	0x3
 2750 06ef 00000000 		.4byte	PWM_1_initVar
 2751 06f3 00       		.byte	0
 2752              		.section	.debug_abbrev,"",%progbits
 2753              	.Ldebug_abbrev0:
 2754 0000 01       		.uleb128 0x1
 2755 0001 11       		.uleb128 0x11
 2756 0002 01       		.byte	0x1
 2757 0003 25       		.uleb128 0x25
 2758 0004 0E       		.uleb128 0xe
 2759 0005 13       		.uleb128 0x13
 2760 0006 0B       		.uleb128 0xb
 2761 0007 03       		.uleb128 0x3
 2762 0008 0E       		.uleb128 0xe
 2763 0009 1B       		.uleb128 0x1b
 2764 000a 0E       		.uleb128 0xe
 2765 000b 55       		.uleb128 0x55
 2766 000c 17       		.uleb128 0x17
 2767 000d 11       		.uleb128 0x11
 2768 000e 01       		.uleb128 0x1
 2769 000f 10       		.uleb128 0x10
 2770 0010 17       		.uleb128 0x17
 2771 0011 00       		.byte	0
 2772 0012 00       		.byte	0
 2773 0013 02       		.uleb128 0x2
 2774 0014 24       		.uleb128 0x24
 2775 0015 00       		.byte	0
 2776 0016 0B       		.uleb128 0xb
 2777 0017 0B       		.uleb128 0xb
 2778 0018 3E       		.uleb128 0x3e
 2779 0019 0B       		.uleb128 0xb
 2780 001a 03       		.uleb128 0x3
 2781 001b 0E       		.uleb128 0xe
 2782 001c 00       		.byte	0
 2783 001d 00       		.byte	0
 2784 001e 03       		.uleb128 0x3
 2785 001f 24       		.uleb128 0x24
 2786 0020 00       		.byte	0
 2787 0021 0B       		.uleb128 0xb
 2788 0022 0B       		.uleb128 0xb
 2789 0023 3E       		.uleb128 0x3e
 2790 0024 0B       		.uleb128 0xb
 2791 0025 03       		.uleb128 0x3
 2792 0026 08       		.uleb128 0x8
 2793 0027 00       		.byte	0
 2794 0028 00       		.byte	0
 2795 0029 04       		.uleb128 0x4
 2796 002a 16       		.uleb128 0x16
 2797 002b 00       		.byte	0
 2798 002c 03       		.uleb128 0x3
 2799 002d 0E       		.uleb128 0xe
 2800 002e 3A       		.uleb128 0x3a
 2801 002f 0B       		.uleb128 0xb
 2802 0030 3B       		.uleb128 0x3b
 2803 0031 05       		.uleb128 0x5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 75


 2804 0032 49       		.uleb128 0x49
 2805 0033 13       		.uleb128 0x13
 2806 0034 00       		.byte	0
 2807 0035 00       		.byte	0
 2808 0036 05       		.uleb128 0x5
 2809 0037 35       		.uleb128 0x35
 2810 0038 00       		.byte	0
 2811 0039 49       		.uleb128 0x49
 2812 003a 13       		.uleb128 0x13
 2813 003b 00       		.byte	0
 2814 003c 00       		.byte	0
 2815 003d 06       		.uleb128 0x6
 2816 003e 2E       		.uleb128 0x2e
 2817 003f 00       		.byte	0
 2818 0040 3F       		.uleb128 0x3f
 2819 0041 19       		.uleb128 0x19
 2820 0042 03       		.uleb128 0x3
 2821 0043 0E       		.uleb128 0xe
 2822 0044 3A       		.uleb128 0x3a
 2823 0045 0B       		.uleb128 0xb
 2824 0046 3B       		.uleb128 0x3b
 2825 0047 0B       		.uleb128 0xb
 2826 0048 27       		.uleb128 0x27
 2827 0049 19       		.uleb128 0x19
 2828 004a 11       		.uleb128 0x11
 2829 004b 01       		.uleb128 0x1
 2830 004c 12       		.uleb128 0x12
 2831 004d 06       		.uleb128 0x6
 2832 004e 40       		.uleb128 0x40
 2833 004f 18       		.uleb128 0x18
 2834 0050 9642     		.uleb128 0x2116
 2835 0052 19       		.uleb128 0x19
 2836 0053 00       		.byte	0
 2837 0054 00       		.byte	0
 2838 0055 07       		.uleb128 0x7
 2839 0056 2E       		.uleb128 0x2e
 2840 0057 01       		.byte	0x1
 2841 0058 3F       		.uleb128 0x3f
 2842 0059 19       		.uleb128 0x19
 2843 005a 03       		.uleb128 0x3
 2844 005b 0E       		.uleb128 0xe
 2845 005c 3A       		.uleb128 0x3a
 2846 005d 0B       		.uleb128 0xb
 2847 005e 3B       		.uleb128 0x3b
 2848 005f 0B       		.uleb128 0xb
 2849 0060 27       		.uleb128 0x27
 2850 0061 19       		.uleb128 0x19
 2851 0062 11       		.uleb128 0x11
 2852 0063 01       		.uleb128 0x1
 2853 0064 12       		.uleb128 0x12
 2854 0065 06       		.uleb128 0x6
 2855 0066 40       		.uleb128 0x40
 2856 0067 18       		.uleb128 0x18
 2857 0068 9642     		.uleb128 0x2116
 2858 006a 19       		.uleb128 0x19
 2859 006b 01       		.uleb128 0x1
 2860 006c 13       		.uleb128 0x13
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 76


 2861 006d 00       		.byte	0
 2862 006e 00       		.byte	0
 2863 006f 08       		.uleb128 0x8
 2864 0070 34       		.uleb128 0x34
 2865 0071 00       		.byte	0
 2866 0072 03       		.uleb128 0x3
 2867 0073 0E       		.uleb128 0xe
 2868 0074 3A       		.uleb128 0x3a
 2869 0075 0B       		.uleb128 0xb
 2870 0076 3B       		.uleb128 0x3b
 2871 0077 0B       		.uleb128 0xb
 2872 0078 49       		.uleb128 0x49
 2873 0079 13       		.uleb128 0x13
 2874 007a 02       		.uleb128 0x2
 2875 007b 18       		.uleb128 0x18
 2876 007c 00       		.byte	0
 2877 007d 00       		.byte	0
 2878 007e 09       		.uleb128 0x9
 2879 007f 2E       		.uleb128 0x2e
 2880 0080 01       		.byte	0x1
 2881 0081 3F       		.uleb128 0x3f
 2882 0082 19       		.uleb128 0x19
 2883 0083 03       		.uleb128 0x3
 2884 0084 0E       		.uleb128 0xe
 2885 0085 3A       		.uleb128 0x3a
 2886 0086 0B       		.uleb128 0xb
 2887 0087 3B       		.uleb128 0x3b
 2888 0088 05       		.uleb128 0x5
 2889 0089 27       		.uleb128 0x27
 2890 008a 19       		.uleb128 0x19
 2891 008b 11       		.uleb128 0x11
 2892 008c 01       		.uleb128 0x1
 2893 008d 12       		.uleb128 0x12
 2894 008e 06       		.uleb128 0x6
 2895 008f 40       		.uleb128 0x40
 2896 0090 18       		.uleb128 0x18
 2897 0091 9642     		.uleb128 0x2116
 2898 0093 19       		.uleb128 0x19
 2899 0094 01       		.uleb128 0x1
 2900 0095 13       		.uleb128 0x13
 2901 0096 00       		.byte	0
 2902 0097 00       		.byte	0
 2903 0098 0A       		.uleb128 0xa
 2904 0099 34       		.uleb128 0x34
 2905 009a 00       		.byte	0
 2906 009b 03       		.uleb128 0x3
 2907 009c 0E       		.uleb128 0xe
 2908 009d 3A       		.uleb128 0x3a
 2909 009e 0B       		.uleb128 0xb
 2910 009f 3B       		.uleb128 0x3b
 2911 00a0 05       		.uleb128 0x5
 2912 00a1 49       		.uleb128 0x49
 2913 00a2 13       		.uleb128 0x13
 2914 00a3 02       		.uleb128 0x2
 2915 00a4 18       		.uleb128 0x18
 2916 00a5 00       		.byte	0
 2917 00a6 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 77


 2918 00a7 0B       		.uleb128 0xb
 2919 00a8 05       		.uleb128 0x5
 2920 00a9 00       		.byte	0
 2921 00aa 03       		.uleb128 0x3
 2922 00ab 0E       		.uleb128 0xe
 2923 00ac 3A       		.uleb128 0x3a
 2924 00ad 0B       		.uleb128 0xb
 2925 00ae 3B       		.uleb128 0x3b
 2926 00af 05       		.uleb128 0x5
 2927 00b0 49       		.uleb128 0x49
 2928 00b1 13       		.uleb128 0x13
 2929 00b2 02       		.uleb128 0x2
 2930 00b3 18       		.uleb128 0x18
 2931 00b4 00       		.byte	0
 2932 00b5 00       		.byte	0
 2933 00b6 0C       		.uleb128 0xc
 2934 00b7 2E       		.uleb128 0x2e
 2935 00b8 01       		.byte	0x1
 2936 00b9 3F       		.uleb128 0x3f
 2937 00ba 19       		.uleb128 0x19
 2938 00bb 03       		.uleb128 0x3
 2939 00bc 0E       		.uleb128 0xe
 2940 00bd 3A       		.uleb128 0x3a
 2941 00be 0B       		.uleb128 0xb
 2942 00bf 3B       		.uleb128 0x3b
 2943 00c0 05       		.uleb128 0x5
 2944 00c1 27       		.uleb128 0x27
 2945 00c2 19       		.uleb128 0x19
 2946 00c3 11       		.uleb128 0x11
 2947 00c4 01       		.uleb128 0x1
 2948 00c5 12       		.uleb128 0x12
 2949 00c6 06       		.uleb128 0x6
 2950 00c7 40       		.uleb128 0x40
 2951 00c8 18       		.uleb128 0x18
 2952 00c9 9742     		.uleb128 0x2117
 2953 00cb 19       		.uleb128 0x19
 2954 00cc 01       		.uleb128 0x1
 2955 00cd 13       		.uleb128 0x13
 2956 00ce 00       		.byte	0
 2957 00cf 00       		.byte	0
 2958 00d0 0D       		.uleb128 0xd
 2959 00d1 2E       		.uleb128 0x2e
 2960 00d2 00       		.byte	0
 2961 00d3 3F       		.uleb128 0x3f
 2962 00d4 19       		.uleb128 0x19
 2963 00d5 03       		.uleb128 0x3
 2964 00d6 0E       		.uleb128 0xe
 2965 00d7 3A       		.uleb128 0x3a
 2966 00d8 0B       		.uleb128 0xb
 2967 00d9 3B       		.uleb128 0x3b
 2968 00da 05       		.uleb128 0x5
 2969 00db 27       		.uleb128 0x27
 2970 00dc 19       		.uleb128 0x19
 2971 00dd 49       		.uleb128 0x49
 2972 00de 13       		.uleb128 0x13
 2973 00df 11       		.uleb128 0x11
 2974 00e0 01       		.uleb128 0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 78


 2975 00e1 12       		.uleb128 0x12
 2976 00e2 06       		.uleb128 0x6
 2977 00e3 40       		.uleb128 0x40
 2978 00e4 18       		.uleb128 0x18
 2979 00e5 9742     		.uleb128 0x2117
 2980 00e7 19       		.uleb128 0x19
 2981 00e8 00       		.byte	0
 2982 00e9 00       		.byte	0
 2983 00ea 0E       		.uleb128 0xe
 2984 00eb 34       		.uleb128 0x34
 2985 00ec 00       		.byte	0
 2986 00ed 03       		.uleb128 0x3
 2987 00ee 0E       		.uleb128 0xe
 2988 00ef 3A       		.uleb128 0x3a
 2989 00f0 0B       		.uleb128 0xb
 2990 00f1 3B       		.uleb128 0x3b
 2991 00f2 0B       		.uleb128 0xb
 2992 00f3 49       		.uleb128 0x49
 2993 00f4 13       		.uleb128 0x13
 2994 00f5 3F       		.uleb128 0x3f
 2995 00f6 19       		.uleb128 0x19
 2996 00f7 02       		.uleb128 0x2
 2997 00f8 18       		.uleb128 0x18
 2998 00f9 00       		.byte	0
 2999 00fa 00       		.byte	0
 3000 00fb 00       		.byte	0
 3001              		.section	.debug_aranges,"",%progbits
 3002 0000 54010000 		.4byte	0x154
 3003 0004 0200     		.2byte	0x2
 3004 0006 00000000 		.4byte	.Ldebug_info0
 3005 000a 04       		.byte	0x4
 3006 000b 00       		.byte	0
 3007 000c 0000     		.2byte	0
 3008 000e 0000     		.2byte	0
 3009 0010 00000000 		.4byte	.LFB2
 3010 0014 58000000 		.4byte	.LFE2-.LFB2
 3011 0018 00000000 		.4byte	.LFB3
 3012 001c 38000000 		.4byte	.LFE3-.LFB3
 3013 0020 00000000 		.4byte	.LFB4
 3014 0024 24000000 		.4byte	.LFE4-.LFB4
 3015 0028 00000000 		.4byte	.LFB5
 3016 002c 30000000 		.4byte	.LFE5-.LFB5
 3017 0030 00000000 		.4byte	.LFB6
 3018 0034 48000000 		.4byte	.LFE6-.LFB6
 3019 0038 00000000 		.4byte	.LFB7
 3020 003c 48000000 		.4byte	.LFE7-.LFB7
 3021 0040 00000000 		.4byte	.LFB8
 3022 0044 48000000 		.4byte	.LFE8-.LFB8
 3023 0048 00000000 		.4byte	.LFB9
 3024 004c 4C000000 		.4byte	.LFE9-.LFB9
 3025 0050 00000000 		.4byte	.LFB10
 3026 0054 1C000000 		.4byte	.LFE10-.LFB10
 3027 0058 00000000 		.4byte	.LFB11
 3028 005c 48000000 		.4byte	.LFE11-.LFB11
 3029 0060 00000000 		.4byte	.LFB12
 3030 0064 48000000 		.4byte	.LFE12-.LFB12
 3031 0068 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 79


 3032 006c 4C000000 		.4byte	.LFE13-.LFB13
 3033 0070 00000000 		.4byte	.LFB14
 3034 0074 48000000 		.4byte	.LFE14-.LFB14
 3035 0078 00000000 		.4byte	.LFB15
 3036 007c 1C000000 		.4byte	.LFE15-.LFB15
 3037 0080 00000000 		.4byte	.LFB16
 3038 0084 18000000 		.4byte	.LFE16-.LFB16
 3039 0088 00000000 		.4byte	.LFB17
 3040 008c 48000000 		.4byte	.LFE17-.LFB17
 3041 0090 00000000 		.4byte	.LFB18
 3042 0094 1C000000 		.4byte	.LFE18-.LFB18
 3043 0098 00000000 		.4byte	.LFB19
 3044 009c 18000000 		.4byte	.LFE19-.LFB19
 3045 00a0 00000000 		.4byte	.LFB20
 3046 00a4 48000000 		.4byte	.LFE20-.LFB20
 3047 00a8 00000000 		.4byte	.LFB21
 3048 00ac 1C000000 		.4byte	.LFE21-.LFB21
 3049 00b0 00000000 		.4byte	.LFB22
 3050 00b4 18000000 		.4byte	.LFE22-.LFB22
 3051 00b8 00000000 		.4byte	.LFB23
 3052 00bc 48000000 		.4byte	.LFE23-.LFB23
 3053 00c0 00000000 		.4byte	.LFB24
 3054 00c4 1C000000 		.4byte	.LFE24-.LFB24
 3055 00c8 00000000 		.4byte	.LFB25
 3056 00cc 18000000 		.4byte	.LFE25-.LFB25
 3057 00d0 00000000 		.4byte	.LFB26
 3058 00d4 1C000000 		.4byte	.LFE26-.LFB26
 3059 00d8 00000000 		.4byte	.LFB27
 3060 00dc 18000000 		.4byte	.LFE27-.LFB27
 3061 00e0 00000000 		.4byte	.LFB28
 3062 00e4 18000000 		.4byte	.LFE28-.LFB28
 3063 00e8 00000000 		.4byte	.LFB29
 3064 00ec 18000000 		.4byte	.LFE29-.LFB29
 3065 00f0 00000000 		.4byte	.LFB30
 3066 00f4 44000000 		.4byte	.LFE30-.LFB30
 3067 00f8 00000000 		.4byte	.LFB31
 3068 00fc 44000000 		.4byte	.LFE31-.LFB31
 3069 0100 00000000 		.4byte	.LFB32
 3070 0104 48000000 		.4byte	.LFE32-.LFB32
 3071 0108 00000000 		.4byte	.LFB33
 3072 010c 44000000 		.4byte	.LFE33-.LFB33
 3073 0110 00000000 		.4byte	.LFB34
 3074 0114 44000000 		.4byte	.LFE34-.LFB34
 3075 0118 00000000 		.4byte	.LFB35
 3076 011c 38000000 		.4byte	.LFE35-.LFB35
 3077 0120 00000000 		.4byte	.LFB36
 3078 0124 20000000 		.4byte	.LFE36-.LFB36
 3079 0128 00000000 		.4byte	.LFB37
 3080 012c 18000000 		.4byte	.LFE37-.LFB37
 3081 0130 00000000 		.4byte	.LFB38
 3082 0134 14000000 		.4byte	.LFE38-.LFB38
 3083 0138 00000000 		.4byte	.LFB39
 3084 013c 14000000 		.4byte	.LFE39-.LFB39
 3085 0140 00000000 		.4byte	.LFB40
 3086 0144 18000000 		.4byte	.LFE40-.LFB40
 3087 0148 00000000 		.4byte	.LFB41
 3088 014c 18000000 		.4byte	.LFE41-.LFB41
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 80


 3089 0150 00000000 		.4byte	0
 3090 0154 00000000 		.4byte	0
 3091              		.section	.debug_ranges,"",%progbits
 3092              	.Ldebug_ranges0:
 3093 0000 00000000 		.4byte	.LFB2
 3094 0004 58000000 		.4byte	.LFE2
 3095 0008 00000000 		.4byte	.LFB3
 3096 000c 38000000 		.4byte	.LFE3
 3097 0010 00000000 		.4byte	.LFB4
 3098 0014 24000000 		.4byte	.LFE4
 3099 0018 00000000 		.4byte	.LFB5
 3100 001c 30000000 		.4byte	.LFE5
 3101 0020 00000000 		.4byte	.LFB6
 3102 0024 48000000 		.4byte	.LFE6
 3103 0028 00000000 		.4byte	.LFB7
 3104 002c 48000000 		.4byte	.LFE7
 3105 0030 00000000 		.4byte	.LFB8
 3106 0034 48000000 		.4byte	.LFE8
 3107 0038 00000000 		.4byte	.LFB9
 3108 003c 4C000000 		.4byte	.LFE9
 3109 0040 00000000 		.4byte	.LFB10
 3110 0044 1C000000 		.4byte	.LFE10
 3111 0048 00000000 		.4byte	.LFB11
 3112 004c 48000000 		.4byte	.LFE11
 3113 0050 00000000 		.4byte	.LFB12
 3114 0054 48000000 		.4byte	.LFE12
 3115 0058 00000000 		.4byte	.LFB13
 3116 005c 4C000000 		.4byte	.LFE13
 3117 0060 00000000 		.4byte	.LFB14
 3118 0064 48000000 		.4byte	.LFE14
 3119 0068 00000000 		.4byte	.LFB15
 3120 006c 1C000000 		.4byte	.LFE15
 3121 0070 00000000 		.4byte	.LFB16
 3122 0074 18000000 		.4byte	.LFE16
 3123 0078 00000000 		.4byte	.LFB17
 3124 007c 48000000 		.4byte	.LFE17
 3125 0080 00000000 		.4byte	.LFB18
 3126 0084 1C000000 		.4byte	.LFE18
 3127 0088 00000000 		.4byte	.LFB19
 3128 008c 18000000 		.4byte	.LFE19
 3129 0090 00000000 		.4byte	.LFB20
 3130 0094 48000000 		.4byte	.LFE20
 3131 0098 00000000 		.4byte	.LFB21
 3132 009c 1C000000 		.4byte	.LFE21
 3133 00a0 00000000 		.4byte	.LFB22
 3134 00a4 18000000 		.4byte	.LFE22
 3135 00a8 00000000 		.4byte	.LFB23
 3136 00ac 48000000 		.4byte	.LFE23
 3137 00b0 00000000 		.4byte	.LFB24
 3138 00b4 1C000000 		.4byte	.LFE24
 3139 00b8 00000000 		.4byte	.LFB25
 3140 00bc 18000000 		.4byte	.LFE25
 3141 00c0 00000000 		.4byte	.LFB26
 3142 00c4 1C000000 		.4byte	.LFE26
 3143 00c8 00000000 		.4byte	.LFB27
 3144 00cc 18000000 		.4byte	.LFE27
 3145 00d0 00000000 		.4byte	.LFB28
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 81


 3146 00d4 18000000 		.4byte	.LFE28
 3147 00d8 00000000 		.4byte	.LFB29
 3148 00dc 18000000 		.4byte	.LFE29
 3149 00e0 00000000 		.4byte	.LFB30
 3150 00e4 44000000 		.4byte	.LFE30
 3151 00e8 00000000 		.4byte	.LFB31
 3152 00ec 44000000 		.4byte	.LFE31
 3153 00f0 00000000 		.4byte	.LFB32
 3154 00f4 48000000 		.4byte	.LFE32
 3155 00f8 00000000 		.4byte	.LFB33
 3156 00fc 44000000 		.4byte	.LFE33
 3157 0100 00000000 		.4byte	.LFB34
 3158 0104 44000000 		.4byte	.LFE34
 3159 0108 00000000 		.4byte	.LFB35
 3160 010c 38000000 		.4byte	.LFE35
 3161 0110 00000000 		.4byte	.LFB36
 3162 0114 20000000 		.4byte	.LFE36
 3163 0118 00000000 		.4byte	.LFB37
 3164 011c 18000000 		.4byte	.LFE37
 3165 0120 00000000 		.4byte	.LFB38
 3166 0124 14000000 		.4byte	.LFE38
 3167 0128 00000000 		.4byte	.LFB39
 3168 012c 14000000 		.4byte	.LFE39
 3169 0130 00000000 		.4byte	.LFB40
 3170 0134 18000000 		.4byte	.LFE40
 3171 0138 00000000 		.4byte	.LFB41
 3172 013c 18000000 		.4byte	.LFE41
 3173 0140 00000000 		.4byte	0
 3174 0144 00000000 		.4byte	0
 3175              		.section	.debug_line,"",%progbits
 3176              	.Ldebug_line0:
 3177 0000 6F030000 		.section	.debug_str,"MS",%progbits,1
 3177      02004200 
 3177      00000201 
 3177      FB0E0D00 
 3177      01010101 
 3178              	.LASF40:
 3179 0000 636F756E 		.ascii	"count\000"
 3179      7400
 3180              	.LASF78:
 3181 0006 433A5C55 		.ascii	"C:\\Users\\Andrew Joseph\\Desktop\\Senior Design\\t"
 3181      73657273 
 3181      5C416E64 
 3181      72657720 
 3181      4A6F7365 
 3182 0034 72756E6B 		.ascii	"runk\\src\\PSoC_Core\\fNIR PSoC Central\\fNIR PSoC "
 3182      5C737263 
 3182      5C50536F 
 3182      435F436F 
 3182      72655C66 
 3183 0063 43656E74 		.ascii	"Central.cydsn\000"
 3183      72616C2E 
 3183      63796473 
 3183      6E00
 3184              	.LASF19:
 3185 0071 50574D5F 		.ascii	"PWM_1_Stop\000"
 3185      315F5374 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 82


 3185      6F7000
 3186              	.LASF59:
 3187 007c 50574D5F 		.ascii	"PWM_1_ReadCapture\000"
 3187      315F5265 
 3187      61644361 
 3187      70747572 
 3187      6500
 3188              	.LASF73:
 3189 008e 50574D5F 		.ascii	"PWM_1_GetInterruptSource\000"
 3189      315F4765 
 3189      74496E74 
 3189      65727275 
 3189      7074536F 
 3190              	.LASF49:
 3191 00a7 50574D5F 		.ascii	"PWM_1_WritePeriodBuf\000"
 3191      315F5772 
 3191      69746550 
 3191      6572696F 
 3191      64427566 
 3192              	.LASF77:
 3193 00bc 47656E65 		.ascii	"Generated_Source\\PSoC4\\PWM_1.c\000"
 3193      72617465 
 3193      645F536F 
 3193      75726365 
 3193      5C50536F 
 3194              	.LASF44:
 3195 00db 70657269 		.ascii	"period\000"
 3195      6F6400
 3196              	.LASF7:
 3197 00e2 6C6F6E67 		.ascii	"long long unsigned int\000"
 3197      206C6F6E 
 3197      6720756E 
 3197      7369676E 
 3197      65642069 
 3198              	.LASF24:
 3199 00f9 71644D6F 		.ascii	"qdMode\000"
 3199      646500
 3200              	.LASF27:
 3201 0100 50574D5F 		.ascii	"PWM_1_SetOneShot\000"
 3201      315F5365 
 3201      744F6E65 
 3201      53686F74 
 3201      00
 3202              	.LASF55:
 3203 0111 50574D5F 		.ascii	"PWM_1_ReadCompare\000"
 3203      315F5265 
 3203      6164436F 
 3203      6D706172 
 3203      6500
 3204              	.LASF75:
 3205 0123 50574D5F 		.ascii	"PWM_1_SetInterrupt\000"
 3205      315F5365 
 3205      74496E74 
 3205      65727275 
 3205      707400
 3206              	.LASF6:
 3207 0136 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 83


 3207      206C6F6E 
 3207      6720696E 
 3207      7400
 3208              	.LASF0:
 3209 0144 7369676E 		.ascii	"signed char\000"
 3209      65642063 
 3209      68617200 
 3210              	.LASF60:
 3211 0150 50574D5F 		.ascii	"PWM_1_ReadCaptureBuf\000"
 3211      315F5265 
 3211      61644361 
 3211      70747572 
 3211      65427566 
 3212              	.LASF69:
 3213 0165 50574D5F 		.ascii	"PWM_1_ReadStatus\000"
 3213      315F5265 
 3213      61645374 
 3213      61747573 
 3213      00
 3214              	.LASF4:
 3215 0176 6C6F6E67 		.ascii	"long int\000"
 3215      20696E74 
 3215      00
 3216              	.LASF9:
 3217 017f 75696E74 		.ascii	"uint8\000"
 3217      3800
 3218              	.LASF12:
 3219 0185 646F7562 		.ascii	"double\000"
 3219      6C6500
 3220              	.LASF45:
 3221 018c 50574D5F 		.ascii	"PWM_1_ReadCounter\000"
 3221      315F5265 
 3221      6164436F 
 3221      756E7465 
 3221      7200
 3222              	.LASF66:
 3223 019e 50574D5F 		.ascii	"PWM_1_SetCountMode\000"
 3223      315F5365 
 3223      74436F75 
 3223      6E744D6F 
 3223      646500
 3224              	.LASF10:
 3225 01b1 75696E74 		.ascii	"uint32\000"
 3225      333200
 3226              	.LASF62:
 3227 01b8 74726967 		.ascii	"triggerMode\000"
 3227      6765724D 
 3227      6F646500 
 3228              	.LASF38:
 3229 01c4 6D61736B 		.ascii	"mask\000"
 3229      00
 3230              	.LASF36:
 3231 01c9 64656164 		.ascii	"deadTime\000"
 3231      54696D65 
 3231      00
 3232              	.LASF8:
 3233 01d2 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 84


 3233      676E6564 
 3233      20696E74 
 3233      00
 3234              	.LASF21:
 3235 01df 50574D5F 		.ascii	"PWM_1_SetMode\000"
 3235      315F5365 
 3235      744D6F64 
 3235      6500
 3236              	.LASF68:
 3237 01ed 636F6D6D 		.ascii	"command\000"
 3237      616E6400 
 3238              	.LASF5:
 3239 01f5 6C6F6E67 		.ascii	"long unsigned int\000"
 3239      20756E73 
 3239      69676E65 
 3239      6420696E 
 3239      7400
 3240              	.LASF30:
 3241 0207 6D6F6465 		.ascii	"modeMask\000"
 3241      4D61736B 
 3241      00
 3242              	.LASF46:
 3243 0210 50574D5F 		.ascii	"PWM_1_ReadPeriod\000"
 3243      315F5265 
 3243      61645065 
 3243      72696F64 
 3243      00
 3244              	.LASF53:
 3245 0221 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 3245      315F5772 
 3245      69746543 
 3245      6F6D7061 
 3245      726500
 3246              	.LASF3:
 3247 0234 73686F72 		.ascii	"short unsigned int\000"
 3247      7420756E 
 3247      7369676E 
 3247      65642069 
 3247      6E7400
 3248              	.LASF28:
 3249 0247 6F6E6553 		.ascii	"oneShotEnable\000"
 3249      686F7445 
 3249      6E61626C 
 3249      6500
 3250              	.LASF18:
 3251 0255 50574D5F 		.ascii	"PWM_1_Enable\000"
 3251      315F456E 
 3251      61626C65 
 3251      00
 3252              	.LASF16:
 3253 0262 50574D5F 		.ascii	"PWM_1_Init\000"
 3253      315F496E 
 3253      697400
 3254              	.LASF14:
 3255 026d 72656733 		.ascii	"reg32\000"
 3255      3200
 3256              	.LASF39:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 85


 3257 0273 50574D5F 		.ascii	"PWM_1_WriteCounter\000"
 3257      315F5772 
 3257      69746543 
 3257      6F756E74 
 3257      657200
 3258              	.LASF33:
 3259 0286 50574D5F 		.ascii	"PWM_1_SetPWMStopOnKill\000"
 3259      315F5365 
 3259      7450574D 
 3259      53746F70 
 3259      4F6E4B69 
 3260              	.LASF15:
 3261 029d 73697A65 		.ascii	"sizetype\000"
 3261      74797065 
 3261      00
 3262              	.LASF32:
 3263 02a6 73796E63 		.ascii	"syncKillEnable\000"
 3263      4B696C6C 
 3263      456E6162 
 3263      6C6500
 3264              	.LASF54:
 3265 02b5 636F6D70 		.ascii	"compare\000"
 3265      61726500 
 3266              	.LASF29:
 3267 02bd 50574D5F 		.ascii	"PWM_1_SetPWMMode\000"
 3267      315F5365 
 3267      7450574D 
 3267      4D6F6465 
 3267      00
 3268              	.LASF41:
 3269 02ce 50574D5F 		.ascii	"PWM_1_SetCounterMode\000"
 3269      315F5365 
 3269      74436F75 
 3269      6E746572 
 3269      4D6F6465 
 3270              	.LASF58:
 3271 02e3 50574D5F 		.ascii	"PWM_1_ReadCompareBuf\000"
 3271      315F5265 
 3271      6164436F 
 3271      6D706172 
 3271      65427566 
 3272              	.LASF47:
 3273 02f8 50574D5F 		.ascii	"PWM_1_SetCompareSwap\000"
 3273      315F5365 
 3273      74436F6D 
 3273      70617265 
 3273      53776170 
 3274              	.LASF11:
 3275 030d 666C6F61 		.ascii	"float\000"
 3275      7400
 3276              	.LASF26:
 3277 0313 70726573 		.ascii	"prescaler\000"
 3277      63616C65 
 3277      7200
 3278              	.LASF51:
 3279 031d 50574D5F 		.ascii	"PWM_1_ReadPeriodBuf\000"
 3279      315F5265 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 86


 3279      61645065 
 3279      72696F64 
 3279      42756600 
 3280              	.LASF37:
 3281 0331 50574D5F 		.ascii	"PWM_1_SetPWMInvert\000"
 3281      315F5365 
 3281      7450574D 
 3281      496E7665 
 3281      727400
 3282              	.LASF64:
 3283 0344 50574D5F 		.ascii	"PWM_1_SetStartMode\000"
 3283      315F5365 
 3283      74537461 
 3283      72744D6F 
 3283      646500
 3284              	.LASF1:
 3285 0357 756E7369 		.ascii	"unsigned char\000"
 3285      676E6564 
 3285      20636861 
 3285      7200
 3286              	.LASF35:
 3287 0365 50574D5F 		.ascii	"PWM_1_SetPWMDeadTime\000"
 3287      315F5365 
 3287      7450574D 
 3287      44656164 
 3287      54696D65 
 3288              	.LASF31:
 3289 037a 50574D5F 		.ascii	"PWM_1_SetPWMSyncKill\000"
 3289      315F5365 
 3289      7450574D 
 3289      53796E63 
 3289      4B696C6C 
 3290              	.LASF34:
 3291 038f 73746F70 		.ascii	"stopOnKillEnable\000"
 3291      4F6E4B69 
 3291      6C6C456E 
 3291      61626C65 
 3291      00
 3292              	.LASF2:
 3293 03a0 73686F72 		.ascii	"short int\000"
 3293      7420696E 
 3293      7400
 3294              	.LASF52:
 3295 03aa 50574D5F 		.ascii	"PWM_1_SetPeriodSwap\000"
 3295      315F5365 
 3295      74506572 
 3295      696F6453 
 3295      77617000 
 3296              	.LASF71:
 3297 03be 696E7465 		.ascii	"interruptMask\000"
 3297      72727570 
 3297      744D6173 
 3297      6B00
 3298              	.LASF70:
 3299 03cc 50574D5F 		.ascii	"PWM_1_SetInterruptMode\000"
 3299      315F5365 
 3299      74496E74 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 87


 3299      65727275 
 3299      70744D6F 
 3300              	.LASF65:
 3301 03e3 50574D5F 		.ascii	"PWM_1_SetStopMode\000"
 3301      315F5365 
 3301      7453746F 
 3301      704D6F64 
 3301      6500
 3302              	.LASF13:
 3303 03f5 63686172 		.ascii	"char\000"
 3303      00
 3304              	.LASF23:
 3305 03fa 6D6F6465 		.ascii	"mode\000"
 3305      00
 3306              	.LASF67:
 3307 03ff 50574D5F 		.ascii	"PWM_1_TriggerCommand\000"
 3307      315F5472 
 3307      69676765 
 3307      72436F6D 
 3307      6D616E64 
 3308              	.LASF25:
 3309 0414 50574D5F 		.ascii	"PWM_1_SetPrescaler\000"
 3309      315F5365 
 3309      74507265 
 3309      7363616C 
 3309      657200
 3310              	.LASF74:
 3311 0427 50574D5F 		.ascii	"PWM_1_ClearInterrupt\000"
 3311      315F436C 
 3311      65617249 
 3311      6E746572 
 3311      72757074 
 3312              	.LASF56:
 3313 043c 50574D5F 		.ascii	"PWM_1_WriteCompareBuf\000"
 3313      315F5772 
 3313      69746543 
 3313      6F6D7061 
 3313      72654275 
 3314              	.LASF42:
 3315 0452 636F756E 		.ascii	"counterMode\000"
 3315      7465724D 
 3315      6F646500 
 3316              	.LASF48:
 3317 045e 73776170 		.ascii	"swapEnable\000"
 3317      456E6162 
 3317      6C6500
 3318              	.LASF57:
 3319 0469 636F6D70 		.ascii	"compareBuf\000"
 3319      61726542 
 3319      756600
 3320              	.LASF17:
 3321 0474 50574D5F 		.ascii	"PWM_1_Start\000"
 3321      315F5374 
 3321      61727400 
 3322              	.LASF63:
 3323 0480 50574D5F 		.ascii	"PWM_1_SetReloadMode\000"
 3323      315F5365 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 88


 3323      7452656C 
 3323      6F61644D 
 3323      6F646500 
 3324              	.LASF20:
 3325 0494 656E6162 		.ascii	"enableInterrupts\000"
 3325      6C65496E 
 3325      74657272 
 3325      75707473 
 3325      00
 3326              	.LASF43:
 3327 04a5 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 3327      315F5772 
 3327      69746550 
 3327      6572696F 
 3327      6400
 3328              	.LASF61:
 3329 04b7 50574D5F 		.ascii	"PWM_1_SetCaptureMode\000"
 3329      315F5365 
 3329      74436170 
 3329      74757265 
 3329      4D6F6465 
 3330              	.LASF79:
 3331 04cc 50574D5F 		.ascii	"PWM_1_initVar\000"
 3331      315F696E 
 3331      69745661 
 3331      7200
 3332              	.LASF22:
 3333 04da 50574D5F 		.ascii	"PWM_1_SetQDMode\000"
 3333      315F5365 
 3333      7451444D 
 3333      6F646500 
 3334              	.LASF76:
 3335 04ea 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3335      4320342E 
 3335      392E3320 
 3335      32303135 
 3335      30333033 
 3336 051d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 3336      20726576 
 3336      6973696F 
 3336      6E203232 
 3336      31323230 
 3337 0550 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3337      66756E63 
 3337      74696F6E 
 3337      2D736563 
 3337      74696F6E 
 3338              	.LASF50:
 3339 0578 70657269 		.ascii	"periodBuf\000"
 3339      6F644275 
 3339      6600
 3340              	.LASF72:
 3341 0582 50574D5F 		.ascii	"PWM_1_GetInterruptSourceMasked\000"
 3341      315F4765 
 3341      74496E74 
 3341      65727275 
 3341      7074536F 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccfsLR0F.s 			page 89


 3342              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
