ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CyLib.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	cydelayFreqHz
  18              		.data
  19              		.align	2
  20              		.type	cydelayFreqHz, %object
  21              		.size	cydelayFreqHz, 4
  22              	cydelayFreqHz:
  23 0000 006CDC02 		.word	48000000
  24              		.global	cydelayFreqKhz
  25              		.align	2
  26              		.type	cydelayFreqKhz, %object
  27              		.size	cydelayFreqKhz, 4
  28              	cydelayFreqKhz:
  29 0004 80BB0000 		.word	48000
  30              		.global	cydelayFreqMhz
  31              		.type	cydelayFreqMhz, %object
  32              		.size	cydelayFreqMhz, 1
  33              	cydelayFreqMhz:
  34 0008 30       		.byte	48
  35              		.global	cydelay32kMs
  36 0009 000000   		.align	2
  37              		.type	cydelay32kMs, %object
  38              		.size	cydelay32kMs, 4
  39              	cydelay32kMs:
  40 000c 0000C05D 		.word	1572864000
  41              		.bss
  42              		.align	2
  43              	CySysTickCallbacks:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.global	CySysTickInitVar
  46              		.align	2
  47              		.type	CySysTickInitVar, %object
  48              		.size	CySysTickInitVar, 4
  49              	CySysTickInitVar:
  50 0014 00000000 		.space	4
  51              		.global	cyImoFreqMhz2Reg
  52              		.section	.rodata
  53              		.align	2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 2


  54              		.type	cyImoFreqMhz2Reg, %object
  55              		.size	cyImoFreqMhz2Reg, 46
  56              	cyImoFreqMhz2Reg:
  57 0000 03       		.byte	3
  58 0001 04       		.byte	4
  59 0002 05       		.byte	5
  60 0003 06       		.byte	6
  61 0004 07       		.byte	7
  62 0005 08       		.byte	8
  63 0006 09       		.byte	9
  64 0007 0A       		.byte	10
  65 0008 0B       		.byte	11
  66 0009 0C       		.byte	12
  67 000a 0E       		.byte	14
  68 000b 0F       		.byte	15
  69 000c 10       		.byte	16
  70 000d 11       		.byte	17
  71 000e 12       		.byte	18
  72 000f 13       		.byte	19
  73 0010 14       		.byte	20
  74 0011 15       		.byte	21
  75 0012 16       		.byte	22
  76 0013 17       		.byte	23
  77 0014 18       		.byte	24
  78 0015 19       		.byte	25
  79 0016 1B       		.byte	27
  80 0017 1C       		.byte	28
  81 0018 1D       		.byte	29
  82 0019 1E       		.byte	30
  83 001a 1F       		.byte	31
  84 001b 20       		.byte	32
  85 001c 21       		.byte	33
  86 001d 22       		.byte	34
  87 001e 23       		.byte	35
  88 001f 25       		.byte	37
  89 0020 26       		.byte	38
  90 0021 27       		.byte	39
  91 0022 28       		.byte	40
  92 0023 29       		.byte	41
  93 0024 2A       		.byte	42
  94 0025 2B       		.byte	43
  95 0026 2E       		.byte	46
  96 0027 2F       		.byte	47
  97 0028 30       		.byte	48
  98 0029 31       		.byte	49
  99 002a 32       		.byte	50
 100 002b 33       		.byte	51
 101 002c 34       		.byte	52
 102 002d 35       		.byte	53
 103              		.global	CySysClkPumpConfig
 104 002e 0000     		.data
 105              		.align	2
 106              		.type	CySysClkPumpConfig, %object
 107              		.size	CySysClkPumpConfig, 4
 108              	CySysClkPumpConfig:
 109 0010 01000000 		.word	1
 110              		.section	.text.CySysClkImoStart,"ax",%progbits
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 3


 111              		.align	2
 112              		.global	CySysClkImoStart
 113              		.code	16
 114              		.thumb_func
 115              		.type	CySysClkImoStart, %function
 116              	CySysClkImoStart:
 117              	.LFB2:
 118              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.50
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* #if (CY_IP_SRSSV2 && CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 4


  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  75:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  76:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  77:Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  78:Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  79:Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  80:Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  81:Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  82:Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  83:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  84:Generated_Source\PSoC4/CyLib.c **** 
  85:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  86:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  87:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  88:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  89:Generated_Source\PSoC4/CyLib.c **** 
  90:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  91:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  92:Generated_Source\PSoC4/CyLib.c **** 
  93:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  94:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  95:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  96:Generated_Source\PSoC4/CyLib.c **** *
  97:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  98:Generated_Source\PSoC4/CyLib.c **** *
  99:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 100:Generated_Source\PSoC4/CyLib.c **** * this function will also enable WCO lock if selected in the Design Wide
 101:Generated_Source\PSoC4/CyLib.c **** * Resources tab.
 102:Generated_Source\PSoC4/CyLib.c **** *
 103:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L / devices, this function will also enable USB lock if selected
 104:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
 105:Generated_Source\PSoC4/CyLib.c **** *
 106:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 5


 107:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 108:Generated_Source\PSoC4/CyLib.c **** {
 119              		.loc 1 108 0
 120              		.cfi_startproc
 121 0000 80B5     		push	{r7, lr}
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 00AF     		add	r7, sp, #0
 126              		.cfi_def_cfa_register 7
 109:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 127              		.loc 1 109 0
 128 0004 044B     		ldr	r3, .L2
 129 0006 044A     		ldr	r2, .L2
 130 0008 1268     		ldr	r2, [r2]
 131 000a 8021     		mov	r1, #128
 132 000c 0906     		lsl	r1, r1, #24
 133 000e 0A43     		orr	r2, r1
 134 0010 1A60     		str	r2, [r3]
 110:Generated_Source\PSoC4/CyLib.c **** 
 111:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 112:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 113:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 114:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 115:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 116:Generated_Source\PSoC4/CyLib.c **** 
 117:Generated_Source\PSoC4/CyLib.c **** 
 118:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 119:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 120:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 121:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 122:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 123:Generated_Source\PSoC4/CyLib.c **** 
 124:Generated_Source\PSoC4/CyLib.c **** }
 135              		.loc 1 124 0
 136 0012 BD46     		mov	sp, r7
 137              		@ sp needed
 138 0014 80BD     		pop	{r7, pc}
 139              	.L3:
 140 0016 C046     		.align	2
 141              	.L2:
 142 0018 08010B40 		.word	1074462984
 143              		.cfi_endproc
 144              	.LFE2:
 145              		.size	CySysClkImoStart, .-CySysClkImoStart
 146              		.section	.text.CySysClkImoStop,"ax",%progbits
 147              		.align	2
 148              		.global	CySysClkImoStop
 149              		.code	16
 150              		.thumb_func
 151              		.type	CySysClkImoStop, %function
 152              	CySysClkImoStop:
 153              	.LFB3:
 125:Generated_Source\PSoC4/CyLib.c **** 
 126:Generated_Source\PSoC4/CyLib.c **** 
 127:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 128:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 6


 129:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 130:Generated_Source\PSoC4/CyLib.c **** *
 131:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 132:Generated_Source\PSoC4/CyLib.c **** *
 133:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 134:Generated_Source\PSoC4/CyLib.c **** * this function will also disable WCO lock.
 135:Generated_Source\PSoC4/CyLib.c **** *
 136:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 137:Generated_Source\PSoC4/CyLib.c **** *
 138:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 139:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 140:Generated_Source\PSoC4/CyLib.c **** {
 154              		.loc 1 140 0
 155              		.cfi_startproc
 156 0000 80B5     		push	{r7, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 160 0002 00AF     		add	r7, sp, #0
 161              		.cfi_def_cfa_register 7
 141:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 142:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 143:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 144:Generated_Source\PSoC4/CyLib.c **** 
 145:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 146:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 147:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 148:Generated_Source\PSoC4/CyLib.c **** 
 149:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 162              		.loc 1 149 0
 163 0004 034B     		ldr	r3, .L5
 164 0006 034A     		ldr	r2, .L5
 165 0008 1268     		ldr	r2, [r2]
 166 000a 5200     		lsl	r2, r2, #1
 167 000c 5208     		lsr	r2, r2, #1
 168 000e 1A60     		str	r2, [r3]
 150:Generated_Source\PSoC4/CyLib.c **** }
 169              		.loc 1 150 0
 170 0010 BD46     		mov	sp, r7
 171              		@ sp needed
 172 0012 80BD     		pop	{r7, pc}
 173              	.L6:
 174              		.align	2
 175              	.L5:
 176 0014 08010B40 		.word	1074462984
 177              		.cfi_endproc
 178              	.LFE3:
 179              		.size	CySysClkImoStop, .-CySysClkImoStop
 180              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
 181              		.align	2
 182              		.global	CySysClkWriteHfclkDirect
 183              		.code	16
 184              		.thumb_func
 185              		.type	CySysClkWriteHfclkDirect, %function
 186              	CySysClkWriteHfclkDirect:
 187              	.LFB4:
 151:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 7


 152:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 153:Generated_Source\PSoC4/CyLib.c **** 
 154:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 155:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 156:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 157:Generated_Source\PSoC4/CyLib.c ****     *
 158:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 159:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 160:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 161:Generated_Source\PSoC4/CyLib.c ****     *
 162:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 163:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 164:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 165:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 166:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 167:Generated_Source\PSoC4/CyLib.c ****     *
 168:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 169:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 170:Generated_Source\PSoC4/CyLib.c ****     *
 171:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 172:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 173:Generated_Source\PSoC4/CyLib.c ****     *
 174:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 175:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 176:Generated_Source\PSoC4/CyLib.c ****     {
 177:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 178:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 179:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 180:Generated_Source\PSoC4/CyLib.c **** 
 181:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 182:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 183:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 184:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 185:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 186:Generated_Source\PSoC4/CyLib.c **** 
 187:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 188:Generated_Source\PSoC4/CyLib.c ****         {
 189:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 190:Generated_Source\PSoC4/CyLib.c **** 
 191:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 192:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 193:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 194:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 195:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 196:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 197:Generated_Source\PSoC4/CyLib.c **** 
 198:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 199:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 200:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 201:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 202:Generated_Source\PSoC4/CyLib.c ****                 {
 203:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 204:Generated_Source\PSoC4/CyLib.c ****                     {
 205:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 206:Generated_Source\PSoC4/CyLib.c ****                         break;
 207:Generated_Source\PSoC4/CyLib.c ****                     }
 208:Generated_Source\PSoC4/CyLib.c ****                 }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 8


 209:Generated_Source\PSoC4/CyLib.c ****             #else
 210:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 211:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 212:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 213:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 214:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 215:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 216:Generated_Source\PSoC4/CyLib.c ****                 #else
 217:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 218:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 219:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 220:Generated_Source\PSoC4/CyLib.c **** 
 221:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 222:Generated_Source\PSoC4/CyLib.c **** 
 223:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 224:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 225:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 226:Generated_Source\PSoC4/CyLib.c ****                 {
 227:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 228:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 229:Generated_Source\PSoC4/CyLib.c ****                 }
 230:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 231:Generated_Source\PSoC4/CyLib.c **** 
 232:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 233:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 234:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 235:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 236:Generated_Source\PSoC4/CyLib.c **** 
 237:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 238:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 239:Generated_Source\PSoC4/CyLib.c **** 
 240:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 241:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 242:Generated_Source\PSoC4/CyLib.c **** 
 243:Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 244:Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 245:Generated_Source\PSoC4/CyLib.c ****             {
 246:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 247:Generated_Source\PSoC4/CyLib.c ****             }
 248:Generated_Source\PSoC4/CyLib.c ****             else
 249:Generated_Source\PSoC4/CyLib.c ****             {
 250:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 251:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 252:Generated_Source\PSoC4/CyLib.c **** 
 253:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 254:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 255:Generated_Source\PSoC4/CyLib.c **** 
 256:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 257:Generated_Source\PSoC4/CyLib.c ****             }
 258:Generated_Source\PSoC4/CyLib.c **** 
 259:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 260:Generated_Source\PSoC4/CyLib.c **** 
 261:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 262:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 263:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 264:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 265:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 9


 266:Generated_Source\PSoC4/CyLib.c **** 
 267:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 268:Generated_Source\PSoC4/CyLib.c ****         }
 269:Generated_Source\PSoC4/CyLib.c ****     }
 270:Generated_Source\PSoC4/CyLib.c **** 
 271:Generated_Source\PSoC4/CyLib.c **** 
 272:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 273:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 274:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 275:Generated_Source\PSoC4/CyLib.c ****     *
 276:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 277:Generated_Source\PSoC4/CyLib.c ****     *
 278:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 279:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 280:Generated_Source\PSoC4/CyLib.c ****     *
 281:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 282:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 283:Generated_Source\PSoC4/CyLib.c ****     *
 284:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 285:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 286:Generated_Source\PSoC4/CyLib.c ****     {
 287:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 288:Generated_Source\PSoC4/CyLib.c ****     }
 289:Generated_Source\PSoC4/CyLib.c **** 
 290:Generated_Source\PSoC4/CyLib.c **** 
 291:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 292:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 293:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 294:Generated_Source\PSoC4/CyLib.c ****     *
 295:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 296:Generated_Source\PSoC4/CyLib.c ****     *
 297:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 298:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 299:Generated_Source\PSoC4/CyLib.c ****     *
 300:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 301:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 302:Generated_Source\PSoC4/CyLib.c ****     *
 303:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 304:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 305:Generated_Source\PSoC4/CyLib.c ****     {
 306:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 307:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 308:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 309:Generated_Source\PSoC4/CyLib.c ****     }
 310:Generated_Source\PSoC4/CyLib.c **** 
 311:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 312:Generated_Source\PSoC4/CyLib.c **** 
 313:Generated_Source\PSoC4/CyLib.c **** 
 314:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 315:Generated_Source\PSoC4/CyLib.c **** 
 316:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 317:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 318:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 319:Generated_Source\PSoC4/CyLib.c ****     *
 320:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 321:Generated_Source\PSoC4/CyLib.c ****     *
 322:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 10


 323:Generated_Source\PSoC4/CyLib.c ****     *
 324:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 325:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 326:Generated_Source\PSoC4/CyLib.c ****     *
 327:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 328:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 329:Generated_Source\PSoC4/CyLib.c ****     *
 330:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 331:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 332:Generated_Source\PSoC4/CyLib.c ****     {
 333:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 334:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 335:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 336:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 337:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 338:Generated_Source\PSoC4/CyLib.c **** 
 339:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 340:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 341:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_MASK;
 342:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 343:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 344:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 345:Generated_Source\PSoC4/CyLib.c **** 
 346:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 347:Generated_Source\PSoC4/CyLib.c ****     }
 348:Generated_Source\PSoC4/CyLib.c **** 
 349:Generated_Source\PSoC4/CyLib.c **** 
 350:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 351:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 352:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 353:Generated_Source\PSoC4/CyLib.c ****     *
 354:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 355:Generated_Source\PSoC4/CyLib.c ****     *
 356:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 357:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 358:Generated_Source\PSoC4/CyLib.c ****     *
 359:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 360:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 361:Generated_Source\PSoC4/CyLib.c ****     *
 362:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 363:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 364:Generated_Source\PSoC4/CyLib.c ****     {
 365:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 366:Generated_Source\PSoC4/CyLib.c **** 
 367:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 368:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 369:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 370:Generated_Source\PSoC4/CyLib.c ****                                     CySysClkImoTrim4;
 371:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 372:Generated_Source\PSoC4/CyLib.c ****     }
 373:Generated_Source\PSoC4/CyLib.c **** 
 374:Generated_Source\PSoC4/CyLib.c **** 
 375:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 376:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 377:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 378:Generated_Source\PSoC4/CyLib.c ****     *
 379:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 11


 380:Generated_Source\PSoC4/CyLib.c ****     *
 381:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 382:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 383:Generated_Source\PSoC4/CyLib.c ****     *
 384:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 385:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 386:Generated_Source\PSoC4/CyLib.c ****     *
 387:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 388:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 389:Generated_Source\PSoC4/CyLib.c ****     {
 390:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 391:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 392:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 393:Generated_Source\PSoC4/CyLib.c ****     }
 394:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 395:Generated_Source\PSoC4/CyLib.c **** 
 396:Generated_Source\PSoC4/CyLib.c **** 
 397:Generated_Source\PSoC4/CyLib.c **** 
 398:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 399:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 400:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 401:Generated_Source\PSoC4/CyLib.c **** *
 402:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 403:Generated_Source\PSoC4/CyLib.c **** *
 404:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 405:Generated_Source\PSoC4/CyLib.c **** *
 406:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 407:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 408:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 409:Generated_Source\PSoC4/CyLib.c **** *
 410:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 411:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 412:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 413:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 414:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 415:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 416:Generated_Source\PSoC4/CyLib.c **** *
 417:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 418:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 419:Generated_Source\PSoC4/CyLib.c **** *
 420:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 421:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 422:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 423:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 424:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L.
 425:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L.
 426:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 427:Generated_Source\PSoC4/CyLib.c **** *
 428:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 429:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 430:Generated_Source\PSoC4/CyLib.c **** {
 188              		.loc 1 430 0
 189              		.cfi_startproc
 190 0000 90B5     		push	{r4, r7, lr}
 191              		.cfi_def_cfa_offset 12
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 7, -8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 12


 194              		.cfi_offset 14, -4
 195 0002 85B0     		sub	sp, sp, #20
 196              		.cfi_def_cfa_offset 32
 197 0004 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
 199 0006 7860     		str	r0, [r7, #4]
 431:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 432:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 433:Generated_Source\PSoC4/CyLib.c **** 
 434:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 200              		.loc 1 434 0
 201 0008 0F23     		mov	r3, #15
 202 000a FC18     		add	r4, r7, r3
 203 000c FFF7FEFF 		bl	CyEnterCriticalSection
 204 0010 031C     		mov	r3, r0
 205 0012 2370     		strb	r3, [r4]
 435:Generated_Source\PSoC4/CyLib.c **** 
 436:Generated_Source\PSoC4/CyLib.c **** 
 437:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 206              		.loc 1 437 0
 207 0014 0B4B     		ldr	r3, .L8
 208 0016 1B68     		ldr	r3, [r3]
 209 0018 0722     		mov	r2, #7
 210 001a 9343     		bic	r3, r2
 211 001c BB60     		str	r3, [r7, #8]
 438:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 439:Generated_Source\PSoC4/CyLib.c **** 
 440:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 441:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 442:Generated_Source\PSoC4/CyLib.c ****     {
 443:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 444:Generated_Source\PSoC4/CyLib.c ****     }
 445:Generated_Source\PSoC4/CyLib.c ****     else
 446:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 447:Generated_Source\PSoC4/CyLib.c ****     {
 448:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 212              		.loc 1 448 0
 213 001e 7B68     		ldr	r3, [r7, #4]
 214 0020 0722     		mov	r2, #7
 215 0022 1340     		and	r3, r2
 216 0024 BA68     		ldr	r2, [r7, #8]
 217 0026 1343     		orr	r3, r2
 218 0028 BB60     		str	r3, [r7, #8]
 449:Generated_Source\PSoC4/CyLib.c ****     }
 450:Generated_Source\PSoC4/CyLib.c **** 
 451:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 219              		.loc 1 451 0
 220 002a 064B     		ldr	r3, .L8
 221 002c BA68     		ldr	r2, [r7, #8]
 222 002e 1A60     		str	r2, [r3]
 452:Generated_Source\PSoC4/CyLib.c **** 
 453:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 223              		.loc 1 453 0
 224 0030 0F23     		mov	r3, #15
 225 0032 FB18     		add	r3, r7, r3
 226 0034 1B78     		ldrb	r3, [r3]
 227 0036 181C     		mov	r0, r3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 13


 228 0038 FFF7FEFF 		bl	CyExitCriticalSection
 454:Generated_Source\PSoC4/CyLib.c **** }
 229              		.loc 1 454 0
 230 003c BD46     		mov	sp, r7
 231 003e 05B0     		add	sp, sp, #20
 232              		@ sp needed
 233 0040 90BD     		pop	{r4, r7, pc}
 234              	.L9:
 235 0042 C046     		.align	2
 236              	.L8:
 237 0044 00010B40 		.word	1074462976
 238              		.cfi_endproc
 239              	.LFE4:
 240              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 241              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 242              		.align	2
 243              		.global	CySysEnablePumpClock
 244              		.code	16
 245              		.thumb_func
 246              		.type	CySysEnablePumpClock, %function
 247              	CySysEnablePumpClock:
 248              	.LFB5:
 455:Generated_Source\PSoC4/CyLib.c **** 
 456:Generated_Source\PSoC4/CyLib.c **** 
 457:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 458:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 459:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 460:Generated_Source\PSoC4/CyLib.c **** *
 461:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
 462:Generated_Source\PSoC4/CyLib.c **** *
 463:Generated_Source\PSoC4/CyLib.c **** * \param enable  
 464:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 465:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of 
 466:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 467:Generated_Source\PSoC4/CyLib.c **** *
 468:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 469:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation 
 470:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 471:Generated_Source\PSoC4/CyLib.c **** *
 472:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 473:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 474:Generated_Source\PSoC4/CyLib.c **** {
 249              		.loc 1 474 0
 250              		.cfi_startproc
 251 0000 80B5     		push	{r7, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 82B0     		sub	sp, sp, #8
 256              		.cfi_def_cfa_offset 16
 257 0004 00AF     		add	r7, sp, #0
 258              		.cfi_def_cfa_register 7
 259 0006 7860     		str	r0, [r7, #4]
 475:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 476:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 260              		.loc 1 476 0
 261 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 14


 262 000a 0122     		mov	r2, #1
 263 000c 1340     		and	r3, r2
 264 000e 08D0     		beq	.L11
 477:Generated_Source\PSoC4/CyLib.c ****         {
 478:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 265              		.loc 1 478 0
 266 0010 0C4A     		ldr	r2, .L13
 267 0012 0C4B     		ldr	r3, .L13
 268 0014 1968     		ldr	r1, [r3]
 269 0016 0C4B     		ldr	r3, .L13+4
 270 0018 1B68     		ldr	r3, [r3]
 271 001a 5B06     		lsl	r3, r3, #25
 272 001c 0B43     		orr	r3, r1
 273 001e 1360     		str	r3, [r2]
 274 0020 0CE0     		b	.L10
 275              	.L11:
 479:Generated_Source\PSoC4/CyLib.c ****         }
 480:Generated_Source\PSoC4/CyLib.c ****         else
 481:Generated_Source\PSoC4/CyLib.c ****         {
 482:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 276              		.loc 1 482 0
 277 0022 084B     		ldr	r3, .L13
 278 0024 1B68     		ldr	r3, [r3]
 279 0026 5B0E     		lsr	r3, r3, #25
 280 0028 0722     		mov	r2, #7
 281 002a 1A40     		and	r2, r3
 282 002c 064B     		ldr	r3, .L13+4
 283 002e 1A60     		str	r2, [r3]
 483:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 484:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 284              		.loc 1 484 0
 285 0030 044B     		ldr	r3, .L13
 286 0032 044A     		ldr	r2, .L13
 287 0034 1268     		ldr	r2, [r2]
 288 0036 0549     		ldr	r1, .L13+8
 289 0038 0A40     		and	r2, r1
 290 003a 1A60     		str	r2, [r3]
 291              	.L10:
 485:Generated_Source\PSoC4/CyLib.c ****         }
 486:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 487:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 488:Generated_Source\PSoC4/CyLib.c ****         {
 489:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 490:Generated_Source\PSoC4/CyLib.c ****         }
 491:Generated_Source\PSoC4/CyLib.c ****         else
 492:Generated_Source\PSoC4/CyLib.c ****         {
 493:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) & 
 494:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 495:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 496:Generated_Source\PSoC4/CyLib.c ****         }
 497:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 498:Generated_Source\PSoC4/CyLib.c **** }
 292              		.loc 1 498 0
 293 003c BD46     		mov	sp, r7
 294 003e 02B0     		add	sp, sp, #8
 295              		@ sp needed
 296 0040 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 15


 297              	.L14:
 298 0042 C046     		.align	2
 299              	.L13:
 300 0044 08010B40 		.word	1074462984
 301 0048 00000000 		.word	CySysClkPumpConfig
 302 004c FFFFFFF1 		.word	-234881025
 303              		.cfi_endproc
 304              	.LFE5:
 305              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 306              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 307              		.align	2
 308              		.global	CySysClkGetSysclkSource
 309              		.code	16
 310              		.thumb_func
 311              		.type	CySysClkGetSysclkSource, %function
 312              	CySysClkGetSysclkSource:
 313              	.LFB6:
 499:Generated_Source\PSoC4/CyLib.c **** 
 500:Generated_Source\PSoC4/CyLib.c **** 
 501:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 502:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 503:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 504:Generated_Source\PSoC4/CyLib.c **** *
 505:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 506:Generated_Source\PSoC4/CyLib.c **** *
 507:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 508:Generated_Source\PSoC4/CyLib.c **** *
 509:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 510:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 511:Generated_Source\PSoC4/CyLib.c **** {
 314              		.loc 1 511 0
 315              		.cfi_startproc
 316 0000 90B5     		push	{r4, r7, lr}
 317              		.cfi_def_cfa_offset 12
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 7, -8
 320              		.cfi_offset 14, -4
 321 0002 83B0     		sub	sp, sp, #12
 322              		.cfi_def_cfa_offset 24
 323 0004 00AF     		add	r7, sp, #0
 324              		.cfi_def_cfa_register 7
 512:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 513:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 514:Generated_Source\PSoC4/CyLib.c **** 
 515:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 325              		.loc 1 515 0
 326 0006 FC1D     		add	r4, r7, #7
 327 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 328 000c 031C     		mov	r3, r0
 329 000e 2370     		strb	r3, [r4]
 516:Generated_Source\PSoC4/CyLib.c **** 
 517:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 518:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 519:Generated_Source\PSoC4/CyLib.c ****     {
 520:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 521:Generated_Source\PSoC4/CyLib.c ****     }
 522:Generated_Source\PSoC4/CyLib.c ****     else
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 16


 523:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 524:Generated_Source\PSoC4/CyLib.c ****     {
 525:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 330              		.loc 1 525 0
 331 0010 074B     		ldr	r3, .L17
 332 0012 1B68     		ldr	r3, [r3]
 333 0014 0722     		mov	r2, #7
 334 0016 1340     		and	r3, r2
 335 0018 3B60     		str	r3, [r7]
 526:Generated_Source\PSoC4/CyLib.c ****     }
 527:Generated_Source\PSoC4/CyLib.c **** 
 528:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 336              		.loc 1 528 0
 337 001a FB1D     		add	r3, r7, #7
 338 001c 1B78     		ldrb	r3, [r3]
 339 001e 181C     		mov	r0, r3
 340 0020 FFF7FEFF 		bl	CyExitCriticalSection
 529:Generated_Source\PSoC4/CyLib.c **** 
 530:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 341              		.loc 1 530 0
 342 0024 3B68     		ldr	r3, [r7]
 531:Generated_Source\PSoC4/CyLib.c **** }
 343              		.loc 1 531 0
 344 0026 181C     		mov	r0, r3
 345 0028 BD46     		mov	sp, r7
 346 002a 03B0     		add	sp, sp, #12
 347              		@ sp needed
 348 002c 90BD     		pop	{r4, r7, pc}
 349              	.L18:
 350 002e C046     		.align	2
 351              	.L17:
 352 0030 00010B40 		.word	1074462976
 353              		.cfi_endproc
 354              	.LFE6:
 355              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 356              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 357              		.align	2
 358              		.global	CySysClkWriteSysclkDiv
 359              		.code	16
 360              		.thumb_func
 361              		.type	CySysClkWriteSysclkDiv, %function
 362              	CySysClkWriteSysclkDiv:
 363              	.LFB7:
 532:Generated_Source\PSoC4/CyLib.c **** 
 533:Generated_Source\PSoC4/CyLib.c **** 
 534:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 535:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 536:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 537:Generated_Source\PSoC4/CyLib.c **** *
 538:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 539:Generated_Source\PSoC4/CyLib.c **** *
 540:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 541:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 542:Generated_Source\PSoC4/CyLib.c **** *
 543:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 544:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 545:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 17


 546:Generated_Source\PSoC4/CyLib.c **** *
 547:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 548:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 549:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 550:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 551:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 552:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 553:Generated_Source\PSoC4/CyLib.c **** *
 554:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 555:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 556:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 557:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 558:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 559:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 560:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 561:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 562:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 563:Generated_Source\PSoC4/CyLib.c **** *
 564:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 565:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 566:Generated_Source\PSoC4/CyLib.c **** {
 364              		.loc 1 566 0
 365              		.cfi_startproc
 366 0000 90B5     		push	{r4, r7, lr}
 367              		.cfi_def_cfa_offset 12
 368              		.cfi_offset 4, -12
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 85B0     		sub	sp, sp, #20
 372              		.cfi_def_cfa_offset 32
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 375 0006 7860     		str	r0, [r7, #4]
 567:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 568:Generated_Source\PSoC4/CyLib.c **** 
 569:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 376              		.loc 1 569 0
 377 0008 0F23     		mov	r3, #15
 378 000a FC18     		add	r4, r7, r3
 379 000c FFF7FEFF 		bl	CyEnterCriticalSection
 380 0010 031C     		mov	r3, r0
 381 0012 2370     		strb	r3, [r4]
 570:Generated_Source\PSoC4/CyLib.c **** 
 571:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 382              		.loc 1 571 0
 383 0014 094B     		ldr	r3, .L20
 384 0016 7A68     		ldr	r2, [r7, #4]
 385 0018 0721     		mov	r1, #7
 386 001a 0A40     		and	r2, r1
 387 001c D104     		lsl	r1, r2, #19
 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 573:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 388              		.loc 1 573 0
 389 001e 074A     		ldr	r2, .L20
 390 0020 1268     		ldr	r2, [r2]
 391 0022 0748     		ldr	r0, .L20+4
 392 0024 0240     		and	r2, r0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 18


 572:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 393              		.loc 1 572 0
 394 0026 0A43     		orr	r2, r1
 571:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 395              		.loc 1 571 0
 396 0028 1A60     		str	r2, [r3]
 574:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 575:Generated_Source\PSoC4/CyLib.c **** 
 576:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 397              		.loc 1 576 0
 398 002a 0F23     		mov	r3, #15
 399 002c FB18     		add	r3, r7, r3
 400 002e 1B78     		ldrb	r3, [r3]
 401 0030 181C     		mov	r0, r3
 402 0032 FFF7FEFF 		bl	CyExitCriticalSection
 577:Generated_Source\PSoC4/CyLib.c **** }
 403              		.loc 1 577 0
 404 0036 BD46     		mov	sp, r7
 405 0038 05B0     		add	sp, sp, #20
 406              		@ sp needed
 407 003a 90BD     		pop	{r4, r7, pc}
 408              	.L21:
 409              		.align	2
 410              	.L20:
 411 003c 00010B40 		.word	1074462976
 412 0040 FFFFC7FF 		.word	-3670017
 413              		.cfi_endproc
 414              	.LFE7:
 415              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 416              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 417              		.align	2
 418              		.global	CySysClkWriteImoFreq
 419              		.code	16
 420              		.thumb_func
 421              		.type	CySysClkWriteImoFreq, %function
 422              	CySysClkWriteImoFreq:
 423              	.LFB8:
 578:Generated_Source\PSoC4/CyLib.c **** 
 579:Generated_Source\PSoC4/CyLib.c **** 
 580:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 581:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 582:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 583:Generated_Source\PSoC4/CyLib.c **** *
 584:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 585:Generated_Source\PSoC4/CyLib.c **** *
 586:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 587:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 588:Generated_Source\PSoC4/CyLib.c **** *
 589:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 590:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 591:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 592:Generated_Source\PSoC4/CyLib.c **** *
 593:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 594:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 595:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 596:Generated_Source\PSoC4/CyLib.c **** *
 597:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 19


 598:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 599:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 600:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 601:Generated_Source\PSoC4/CyLib.c **** *
 602:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 603:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 604:Generated_Source\PSoC4/CyLib.c **** *
 605:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 606:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 607:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 608:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 609:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 610:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 611:Generated_Source\PSoC4/CyLib.c **** *
 612:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 613:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 614:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 615:Generated_Source\PSoC4/CyLib.c **** *
 616:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 617:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 618:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC 4400: Valid range [24-48] with step size equals
 619:Generated_Source\PSoC4/CyLib.c **** * 4.
 620:Generated_Source\PSoC4/CyLib.c **** *
 621:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 622:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 623:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 624:Generated_Source\PSoC4/CyLib.c ****     {
 424              		.loc 1 624 0
 425              		.cfi_startproc
 426 0000 90B5     		push	{r4, r7, lr}
 427              		.cfi_def_cfa_offset 12
 428              		.cfi_offset 4, -12
 429              		.cfi_offset 7, -8
 430              		.cfi_offset 14, -4
 431 0002 85B0     		sub	sp, sp, #20
 432              		.cfi_def_cfa_offset 32
 433 0004 00AF     		add	r7, sp, #0
 434              		.cfi_def_cfa_register 7
 435 0006 7860     		str	r0, [r7, #4]
 625:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 626:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 627:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 628:Generated_Source\PSoC4/CyLib.c ****         #else
 629:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 630:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 631:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 632:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 633:Generated_Source\PSoC4/CyLib.c ****             uint8  imoTrim1Value;
 634:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 635:Generated_Source\PSoC4/CyLib.c **** 
 636:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 637:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 638:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 639:Generated_Source\PSoC4/CyLib.c **** 
 640:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 641:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 642:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 20


 643:Generated_Source\PSoC4/CyLib.c **** 
 644:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 645:Generated_Source\PSoC4/CyLib.c **** 
 646:Generated_Source\PSoC4/CyLib.c **** 
 647:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 436              		.loc 1 647 0
 437 0008 0C23     		mov	r3, #12
 438 000a FC18     		add	r4, r7, r3
 439 000c FFF7FEFF 		bl	CyEnterCriticalSection
 440 0010 031C     		mov	r3, r0
 441 0012 2370     		strb	r3, [r4]
 648:Generated_Source\PSoC4/CyLib.c **** 
 649:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 650:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 651:Generated_Source\PSoC4/CyLib.c ****             {
 652:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 653:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 654:Generated_Source\PSoC4/CyLib.c ****             }
 655:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 656:Generated_Source\PSoC4/CyLib.c **** 
 657:Generated_Source\PSoC4/CyLib.c **** 
 658:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 659:Generated_Source\PSoC4/CyLib.c **** 
 660:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 661:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 662:Generated_Source\PSoC4/CyLib.c ****                 {
 663:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 664:Generated_Source\PSoC4/CyLib.c **** 
 665:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 666:Generated_Source\PSoC4/CyLib.c ****                 {
 667:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 668:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
 669:Generated_Source\PSoC4/CyLib.c ****                 }
 670:Generated_Source\PSoC4/CyLib.c **** 
 671:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 672:Generated_Source\PSoC4/CyLib.c ****                 }
 673:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 674:Generated_Source\PSoC4/CyLib.c **** 
 675:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 676:Generated_Source\PSoC4/CyLib.c **** 
 677:Generated_Source\PSoC4/CyLib.c **** 
 678:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 679:Generated_Source\PSoC4/CyLib.c **** 
 680:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 681:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 682:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 683:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 684:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 685:Generated_Source\PSoC4/CyLib.c **** 
 686:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 687:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 688:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 689:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 690:Generated_Source\PSoC4/CyLib.c **** 
 691:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 692:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 693:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 21


 694:Generated_Source\PSoC4/CyLib.c **** 
 695:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 696:Generated_Source\PSoC4/CyLib.c **** 
 697:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 442              		.loc 1 697 0
 443 0014 7B68     		ldr	r3, [r7, #4]
 444 0016 022B     		cmp	r3, #2
 445 0018 00D8     		bhi	.LCB296
 446 001a B4E0     		b	.L23	@long jump
 447              	.LCB296:
 448              		.loc 1 697 0 is_stmt 0 discriminator 1
 449 001c 7B68     		ldr	r3, [r7, #4]
 450 001e 302B     		cmp	r3, #48
 451 0020 00D9     		bls	.LCB299
 452 0022 B0E0     		b	.L23	@long jump
 453              	.LCB299:
 698:Generated_Source\PSoC4/CyLib.c ****         {
 699:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 454              		.loc 1 699 0 is_stmt 1
 455 0024 5E4B     		ldr	r3, .L34
 456 0026 1B78     		ldrb	r3, [r3]
 457 0028 DBB2     		uxtb	r3, r3
 458 002a 1A1E     		sub	r2, r3, #0
 459 002c 7B68     		ldr	r3, [r7, #4]
 460 002e 9A42     		cmp	r2, r3
 461 0030 0AD3     		bcc	.L24
 700:Generated_Source\PSoC4/CyLib.c ****             {
 701:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 462              		.loc 1 701 0
 463 0032 5C4A     		ldr	r2, .L34+4
 464 0034 0F23     		mov	r3, #15
 465 0036 FB18     		add	r3, r7, r3
 466 0038 1278     		ldrb	r2, [r2]
 467 003a 1A70     		strb	r2, [r3]
 702:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 468              		.loc 1 702 0
 469 003c 5A4A     		ldr	r2, .L34+8
 470 003e 0E23     		mov	r3, #14
 471 0040 FB18     		add	r3, r7, r3
 472 0042 1278     		ldrb	r2, [r2]
 473 0044 1A70     		strb	r2, [r3]
 474 0046 3FE0     		b	.L25
 475              	.L24:
 703:Generated_Source\PSoC4/CyLib.c ****             }
 704:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 476              		.loc 1 704 0
 477 0048 584B     		ldr	r3, .L34+12
 478 004a 1B78     		ldrb	r3, [r3]
 479 004c DBB2     		uxtb	r3, r3
 480 004e 1A1E     		sub	r2, r3, #0
 481 0050 7B68     		ldr	r3, [r7, #4]
 482 0052 9A42     		cmp	r2, r3
 483 0054 0AD3     		bcc	.L26
 705:Generated_Source\PSoC4/CyLib.c ****             {
 706:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 484              		.loc 1 706 0
 485 0056 564A     		ldr	r2, .L34+16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 22


 486 0058 0F23     		mov	r3, #15
 487 005a FB18     		add	r3, r7, r3
 488 005c 1278     		ldrb	r2, [r2]
 489 005e 1A70     		strb	r2, [r3]
 707:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 490              		.loc 1 707 0
 491 0060 544A     		ldr	r2, .L34+20
 492 0062 0E23     		mov	r3, #14
 493 0064 FB18     		add	r3, r7, r3
 494 0066 1278     		ldrb	r2, [r2]
 495 0068 1A70     		strb	r2, [r3]
 496 006a 2DE0     		b	.L25
 497              	.L26:
 708:Generated_Source\PSoC4/CyLib.c ****             }
 709:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 498              		.loc 1 709 0
 499 006c 524B     		ldr	r3, .L34+24
 500 006e 1B78     		ldrb	r3, [r3]
 501 0070 DBB2     		uxtb	r3, r3
 502 0072 1A1E     		sub	r2, r3, #0
 503 0074 7B68     		ldr	r3, [r7, #4]
 504 0076 9A42     		cmp	r2, r3
 505 0078 0AD3     		bcc	.L27
 710:Generated_Source\PSoC4/CyLib.c ****             {
 711:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 506              		.loc 1 711 0
 507 007a 504A     		ldr	r2, .L34+28
 508 007c 0F23     		mov	r3, #15
 509 007e FB18     		add	r3, r7, r3
 510 0080 1278     		ldrb	r2, [r2]
 511 0082 1A70     		strb	r2, [r3]
 712:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 512              		.loc 1 712 0
 513 0084 4E4A     		ldr	r2, .L34+32
 514 0086 0E23     		mov	r3, #14
 515 0088 FB18     		add	r3, r7, r3
 516 008a 1278     		ldrb	r2, [r2]
 517 008c 1A70     		strb	r2, [r3]
 518 008e 1BE0     		b	.L25
 519              	.L27:
 713:Generated_Source\PSoC4/CyLib.c ****             }
 714:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 520              		.loc 1 714 0
 521 0090 4C4B     		ldr	r3, .L34+36
 522 0092 1B78     		ldrb	r3, [r3]
 523 0094 DBB2     		uxtb	r3, r3
 524 0096 1A1E     		sub	r2, r3, #0
 525 0098 7B68     		ldr	r3, [r7, #4]
 526 009a 9A42     		cmp	r2, r3
 527 009c 0AD3     		bcc	.L28
 715:Generated_Source\PSoC4/CyLib.c ****             {
 716:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 528              		.loc 1 716 0
 529 009e 4A4A     		ldr	r2, .L34+40
 530 00a0 0F23     		mov	r3, #15
 531 00a2 FB18     		add	r3, r7, r3
 532 00a4 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 23


 533 00a6 1A70     		strb	r2, [r3]
 717:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 534              		.loc 1 717 0
 535 00a8 484A     		ldr	r2, .L34+44
 536 00aa 0E23     		mov	r3, #14
 537 00ac FB18     		add	r3, r7, r3
 538 00ae 1278     		ldrb	r2, [r2]
 539 00b0 1A70     		strb	r2, [r3]
 540 00b2 09E0     		b	.L25
 541              	.L28:
 718:Generated_Source\PSoC4/CyLib.c ****             }
 719:Generated_Source\PSoC4/CyLib.c ****             else
 720:Generated_Source\PSoC4/CyLib.c ****             {
 721:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 542              		.loc 1 721 0
 543 00b4 464A     		ldr	r2, .L34+48
 544 00b6 0F23     		mov	r3, #15
 545 00b8 FB18     		add	r3, r7, r3
 546 00ba 1278     		ldrb	r2, [r2]
 547 00bc 1A70     		strb	r2, [r3]
 722:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 548              		.loc 1 722 0
 549 00be 454A     		ldr	r2, .L34+52
 550 00c0 0E23     		mov	r3, #14
 551 00c2 FB18     		add	r3, r7, r3
 552 00c4 1278     		ldrb	r2, [r2]
 553 00c6 1A70     		strb	r2, [r3]
 554              	.L25:
 723:Generated_Source\PSoC4/CyLib.c ****             }
 724:Generated_Source\PSoC4/CyLib.c **** 
 725:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 726:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 555              		.loc 1 726 0
 556 00c8 7B68     		ldr	r3, [r7, #4]
 557 00ca DA1E     		sub	r2, r3, #3
 558 00cc 0B23     		mov	r3, #11
 559 00ce FB18     		add	r3, r7, r3
 560 00d0 4149     		ldr	r1, .L34+56
 561 00d2 8A5C     		ldrb	r2, [r1, r2]
 562 00d4 1A70     		strb	r2, [r3]
 727:Generated_Source\PSoC4/CyLib.c **** 
 728:Generated_Source\PSoC4/CyLib.c **** 
 729:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 730:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 731:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 732:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 733:Generated_Source\PSoC4/CyLib.c ****             *
 734:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 735:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 736:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 737:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 738:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 563              		.loc 1 738 0
 564 00d6 0B23     		mov	r3, #11
 565 00d8 FB18     		add	r3, r7, r3
 566 00da 1B78     		ldrb	r3, [r3]
 567 00dc 2F2B     		cmp	r3, #47
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 24


 568 00de 0DD9     		bls	.L29
 569              		.loc 1 738 0 is_stmt 0 discriminator 1
 570 00e0 7B68     		ldr	r3, [r7, #4]
 571 00e2 2A2B     		cmp	r3, #42
 572 00e4 0AD9     		bls	.L29
 739:Generated_Source\PSoC4/CyLib.c ****             {
 740:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 741:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 573              		.loc 1 741 0 is_stmt 1
 574 00e6 3D4B     		ldr	r3, .L34+60
 575 00e8 1922     		mov	r2, #25
 576 00ea 1A60     		str	r2, [r3]
 742:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 743:Generated_Source\PSoC4/CyLib.c **** 
 744:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 577              		.loc 1 744 0
 578 00ec 0520     		mov	r0, #5
 579 00ee FFF7FEFF 		bl	CyDelayCycles
 745:Generated_Source\PSoC4/CyLib.c **** 
 746:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 580              		.loc 1 746 0
 581 00f2 0D23     		mov	r3, #13
 582 00f4 FB18     		add	r3, r7, r3
 583 00f6 1922     		mov	r2, #25
 584 00f8 1A70     		strb	r2, [r3]
 585 00fa 07E0     		b	.L30
 586              	.L29:
 747:Generated_Source\PSoC4/CyLib.c ****             }
 748:Generated_Source\PSoC4/CyLib.c ****             else
 749:Generated_Source\PSoC4/CyLib.c ****             {
 750:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 587              		.loc 1 750 0
 588 00fc 374B     		ldr	r3, .L34+60
 589 00fe 1B68     		ldr	r3, [r3]
 590 0100 DAB2     		uxtb	r2, r3
 591 0102 0D23     		mov	r3, #13
 592 0104 FB18     		add	r3, r7, r3
 593 0106 3F21     		mov	r1, #63
 594 0108 0A40     		and	r2, r1
 595 010a 1A70     		strb	r2, [r3]
 596              	.L30:
 751:Generated_Source\PSoC4/CyLib.c ****             }
 752:Generated_Source\PSoC4/CyLib.c **** 
 753:Generated_Source\PSoC4/CyLib.c **** 
 754:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 755:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 756:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 757:Generated_Source\PSoC4/CyLib.c ****             *
 758:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 759:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 760:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 761:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 762:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 597              		.loc 1 762 0
 598 010c 0B23     		mov	r3, #11
 599 010e FA18     		add	r2, r7, r3
 600 0110 0D23     		mov	r3, #13
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 25


 601 0112 FB18     		add	r3, r7, r3
 602 0114 1278     		ldrb	r2, [r2]
 603 0116 1B78     		ldrb	r3, [r3]
 604 0118 9A42     		cmp	r2, r3
 605 011a 08D2     		bcs	.L31
 763:Generated_Source\PSoC4/CyLib.c ****             {
 764:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 765:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 606              		.loc 1 765 0
 607 011c 2F4B     		ldr	r3, .L34+60
 608 011e 7A68     		ldr	r2, [r7, #4]
 609 0120 033A     		sub	r2, r2, #3
 610 0122 2D49     		ldr	r1, .L34+56
 611 0124 8A5C     		ldrb	r2, [r1, r2]
 612 0126 1A60     		str	r2, [r3]
 766:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 613              		.loc 1 766 0
 614 0128 0520     		mov	r0, #5
 615 012a FFF7FEFF 		bl	CyDelayCycles
 616              	.L31:
 767:Generated_Source\PSoC4/CyLib.c ****             }
 768:Generated_Source\PSoC4/CyLib.c **** 
 769:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 770:Generated_Source\PSoC4/CyLib.c **** 
 771:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 772:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 773:Generated_Source\PSoC4/CyLib.c ****                 {
 774:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 775:Generated_Source\PSoC4/CyLib.c ****                 }
 776:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 777:Generated_Source\PSoC4/CyLib.c ****                 {
 778:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 779:Generated_Source\PSoC4/CyLib.c ****                 }
 780:Generated_Source\PSoC4/CyLib.c ****                 else
 781:Generated_Source\PSoC4/CyLib.c ****                 {
 782:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE
 783:Generated_Source\PSoC4/CyLib.c ****                 }
 784:Generated_Source\PSoC4/CyLib.c ****             #else
 785:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFF
 617              		.loc 1 785 0
 618 012e 7B68     		ldr	r3, [r7, #4]
 619 0130 284A     		ldr	r2, .L34+52
 620 0132 9A18     		add	r2, r3, r2
 621 0134 0A23     		mov	r3, #10
 622 0136 FB18     		add	r3, r7, r3
 623 0138 1278     		ldrb	r2, [r2]
 624 013a 1A70     		strb	r2, [r3]
 786:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 787:Generated_Source\PSoC4/CyLib.c **** 
 788:Generated_Source\PSoC4/CyLib.c **** 
 789:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 625              		.loc 1 789 0
 626 013c 284B     		ldr	r3, .L34+64
 627 013e 0A22     		mov	r2, #10
 628 0140 BA18     		add	r2, r7, r2
 629 0142 1278     		ldrb	r2, [r2]
 630 0144 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 26


 790:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 631              		.loc 1 790 0
 632 0146 274B     		ldr	r3, .L34+68
 633 0148 0F22     		mov	r2, #15
 634 014a BA18     		add	r2, r7, r2
 635 014c 1278     		ldrb	r2, [r2]
 636 014e 1A60     		str	r2, [r3]
 791:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 637              		.loc 1 791 0
 638 0150 254B     		ldr	r3, .L34+72
 639 0152 0E22     		mov	r2, #14
 640 0154 BA18     		add	r2, r7, r2
 641 0156 1278     		ldrb	r2, [r2]
 642 0158 1A60     		str	r2, [r3]
 792:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 643              		.loc 1 792 0
 644 015a 0520     		mov	r0, #5
 645 015c FFF7FEFF 		bl	CyDelayUs
 793:Generated_Source\PSoC4/CyLib.c **** 
 794:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 646              		.loc 1 794 0
 647 0160 0B23     		mov	r3, #11
 648 0162 FA18     		add	r2, r7, r3
 649 0164 0D23     		mov	r3, #13
 650 0166 FB18     		add	r3, r7, r3
 651 0168 1278     		ldrb	r2, [r2]
 652 016a 1B78     		ldrb	r3, [r3]
 653 016c 9A42     		cmp	r2, r3
 654 016e 09D9     		bls	.L32
 795:Generated_Source\PSoC4/CyLib.c ****             {
 796:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 797:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 655              		.loc 1 797 0
 656 0170 1A4B     		ldr	r3, .L34+60
 657 0172 7A68     		ldr	r2, [r7, #4]
 658 0174 033A     		sub	r2, r2, #3
 659 0176 1849     		ldr	r1, .L34+56
 660 0178 8A5C     		ldrb	r2, [r1, r2]
 661 017a 1A60     		str	r2, [r3]
 798:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 662              		.loc 1 798 0
 663 017c 0520     		mov	r0, #5
 664 017e FFF7FEFF 		bl	CyDelayCycles
 794:Generated_Source\PSoC4/CyLib.c ****             {
 665              		.loc 1 794 0
 666 0182 03E0     		b	.L33
 667              	.L32:
 668 0184 02E0     		b	.L33
 669              	.L23:
 799:Generated_Source\PSoC4/CyLib.c ****             }
 800:Generated_Source\PSoC4/CyLib.c ****         }
 801:Generated_Source\PSoC4/CyLib.c ****         else
 802:Generated_Source\PSoC4/CyLib.c ****         {
 803:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 804:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 670              		.loc 1 804 0 discriminator 1
 671 0186 0020     		mov	r0, #0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 27


 672 0188 FFF7FEFF 		bl	CyHalt
 673              	.L33:
 805:Generated_Source\PSoC4/CyLib.c ****         }
 806:Generated_Source\PSoC4/CyLib.c **** 
 807:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 808:Generated_Source\PSoC4/CyLib.c **** 
 809:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 810:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 811:Generated_Source\PSoC4/CyLib.c ****             {
 812:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 813:Generated_Source\PSoC4/CyLib.c ****             }
 814:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 815:Generated_Source\PSoC4/CyLib.c **** 
 816:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 817:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 818:Generated_Source\PSoC4/CyLib.c ****             {
 819:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 820:Generated_Source\PSoC4/CyLib.c ****             }
 821:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 822:Generated_Source\PSoC4/CyLib.c **** 
 823:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 674              		.loc 1 823 0
 675 018c 0C23     		mov	r3, #12
 676 018e FB18     		add	r3, r7, r3
 677 0190 1B78     		ldrb	r3, [r3]
 678 0192 181C     		mov	r0, r3
 679 0194 FFF7FEFF 		bl	CyExitCriticalSection
 824:Generated_Source\PSoC4/CyLib.c ****     }
 680              		.loc 1 824 0
 681 0198 BD46     		mov	sp, r7
 682 019a 05B0     		add	sp, sp, #20
 683              		@ sp needed
 684 019c 90BD     		pop	{r4, r7, pc}
 685              	.L35:
 686 019e C046     		.align	2
 687              	.L34:
 688 01a0 40F3FF0F 		.word	268432192
 689 01a4 41F3FF0F 		.word	268432193
 690 01a8 42F3FF0F 		.word	268432194
 691 01ac 43F3FF0F 		.word	268432195
 692 01b0 44F3FF0F 		.word	268432196
 693 01b4 45F3FF0F 		.word	268432197
 694 01b8 46F3FF0F 		.word	268432198
 695 01bc 47F3FF0F 		.word	268432199
 696 01c0 48F3FF0F 		.word	268432200
 697 01c4 49F3FF0F 		.word	268432201
 698 01c8 4AF3FF0F 		.word	268432202
 699 01cc 4BF3FF0F 		.word	268432203
 700 01d0 4CF3FF0F 		.word	268432204
 701 01d4 4DF3FF0F 		.word	268432205
 702 01d8 00000000 		.word	cyImoFreqMhz2Reg
 703 01dc 2CFF0B40 		.word	1074528044
 704 01e0 28FF0B40 		.word	1074528040
 705 01e4 1CFF0B40 		.word	1074528028
 706 01e8 20FF0B40 		.word	1074528032
 707              		.cfi_endproc
 708              	.LFE8:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 28


 709              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 710              		.section	.text.CySysClkEcoStart,"ax",%progbits
 711              		.align	2
 712              		.global	CySysClkEcoStart
 713              		.code	16
 714              		.thumb_func
 715              		.type	CySysClkEcoStart, %function
 716              	CySysClkEcoStart:
 717              	.LFB9:
 825:Generated_Source\PSoC4/CyLib.c **** 
 826:Generated_Source\PSoC4/CyLib.c **** #else
 827:Generated_Source\PSoC4/CyLib.c **** 
 828:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 829:Generated_Source\PSoC4/CyLib.c ****     {
 830:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 831:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 832:Generated_Source\PSoC4/CyLib.c **** 
 833:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 834:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 835:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 836:Generated_Source\PSoC4/CyLib.c ****         
 837:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 838:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 839:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 840:Generated_Source\PSoC4/CyLib.c **** 
 841:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 842:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 843:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
 844:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
 845:Generated_Source\PSoC4/CyLib.c ****         #else
 846:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 847:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 848:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 849:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 850:Generated_Source\PSoC4/CyLib.c ****         {
 851:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 852:Generated_Source\PSoC4/CyLib.c **** 
 853:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 854:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 855:Generated_Source\PSoC4/CyLib.c ****                 {
 856:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 857:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 858:Generated_Source\PSoC4/CyLib.c ****                 }
 859:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 860:Generated_Source\PSoC4/CyLib.c **** 
 861:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 862:Generated_Source\PSoC4/CyLib.c **** 
 863:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 864:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 865:Generated_Source\PSoC4/CyLib.c ****                     {
 866:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 867:Generated_Source\PSoC4/CyLib.c **** 
 868:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 869:Generated_Source\PSoC4/CyLib.c ****                     {
 870:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 871:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 872:Generated_Source\PSoC4/CyLib.c ****                     }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 29


 873:Generated_Source\PSoC4/CyLib.c **** 
 874:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 875:Generated_Source\PSoC4/CyLib.c ****                     }
 876:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 877:Generated_Source\PSoC4/CyLib.c **** 
 878:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 879:Generated_Source\PSoC4/CyLib.c **** 
 880:Generated_Source\PSoC4/CyLib.c **** 
 881:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 882:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 883:Generated_Source\PSoC4/CyLib.c **** 
 884:Generated_Source\PSoC4/CyLib.c **** 
 885:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 886:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 887:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 888:Generated_Source\PSoC4/CyLib.c ****                 {
 889:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 890:Generated_Source\PSoC4/CyLib.c ****                 }
 891:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 892:Generated_Source\PSoC4/CyLib.c ****                 {
 893:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 894:Generated_Source\PSoC4/CyLib.c ****                 }
 895:Generated_Source\PSoC4/CyLib.c ****                 else
 896:Generated_Source\PSoC4/CyLib.c ****                 {
 897:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 898:Generated_Source\PSoC4/CyLib.c ****                 }
 899:Generated_Source\PSoC4/CyLib.c ****             #else
 900:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 901:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 902:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 903:Generated_Source\PSoC4/CyLib.c **** 
 904:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
 905:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
 906:Generated_Source\PSoC4/CyLib.c **** 
 907:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
 908:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
 909:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 910:Generated_Source\PSoC4/CyLib.c **** 
 911:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 912:Generated_Source\PSoC4/CyLib.c **** 
 913:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 914:Generated_Source\PSoC4/CyLib.c ****             {
 915:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 916:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 917:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 918:Generated_Source\PSoC4/CyLib.c **** 
 919:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 920:Generated_Source\PSoC4/CyLib.c **** 
 921:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
 922:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 923:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 924:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 925:Generated_Source\PSoC4/CyLib.c ****             }
 926:Generated_Source\PSoC4/CyLib.c **** 
 927:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 928:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
 929:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 30


 930:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
 931:Generated_Source\PSoC4/CyLib.c ****                 }
 932:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 933:Generated_Source\PSoC4/CyLib.c ****         
 934:Generated_Source\PSoC4/CyLib.c ****         
 935:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 936:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
 937:Generated_Source\PSoC4/CyLib.c ****                 {
 938:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
 939:Generated_Source\PSoC4/CyLib.c ****                 }
 940:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 941:Generated_Source\PSoC4/CyLib.c **** 
 942:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 943:Generated_Source\PSoC4/CyLib.c ****         }
 944:Generated_Source\PSoC4/CyLib.c ****         else
 945:Generated_Source\PSoC4/CyLib.c ****         {
 946:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 947:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 948:Generated_Source\PSoC4/CyLib.c ****         }
 949:Generated_Source\PSoC4/CyLib.c ****     }
 950:Generated_Source\PSoC4/CyLib.c **** 
 951:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
 952:Generated_Source\PSoC4/CyLib.c **** 
 953:Generated_Source\PSoC4/CyLib.c **** 
 954:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
 955:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 956:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
 957:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 958:Generated_Source\PSoC4/CyLib.c ****     *
 959:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
 960:Generated_Source\PSoC4/CyLib.c ****     *
 961:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
 962:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
 963:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
 964:Generated_Source\PSoC4/CyLib.c ****     *
 965:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 966:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 967:Generated_Source\PSoC4/CyLib.c ****     *
 968:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
 969:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 970:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
 971:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
 972:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 973:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
 974:Generated_Source\PSoC4/CyLib.c ****     *
 975:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
 976:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
 977:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
 978:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
 979:Generated_Source\PSoC4/CyLib.c ****     *
 980:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 981:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
 982:Generated_Source\PSoC4/CyLib.c ****     {
 983:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 984:Generated_Source\PSoC4/CyLib.c **** 
 985:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 986:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 31


 987:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 988:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 989:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 990:Generated_Source\PSoC4/CyLib.c **** 
 991:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 992:Generated_Source\PSoC4/CyLib.c ****     }
 993:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
 994:Generated_Source\PSoC4/CyLib.c **** 
 995:Generated_Source\PSoC4/CyLib.c **** 
 996:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
 997:Generated_Source\PSoC4/CyLib.c **** 
 998:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 999:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
1000:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1001:Generated_Source\PSoC4/CyLib.c ****     *
1002:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1003:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1004:Generated_Source\PSoC4/CyLib.c ****     *
1005:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1006:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1007:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1008:Generated_Source\PSoC4/CyLib.c ****     * called.
1009:Generated_Source\PSoC4/CyLib.c ****     *
1010:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1011:Generated_Source\PSoC4/CyLib.c ****     *
1012:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1013:Generated_Source\PSoC4/CyLib.c ****     *
1014:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1015:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1016:Generated_Source\PSoC4/CyLib.c ****     *
1017:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1018:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1019:Generated_Source\PSoC4/CyLib.c ****     *
1020:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1021:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1022:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1023:Generated_Source\PSoC4/CyLib.c ****     *
1024:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1025:Generated_Source\PSoC4/CyLib.c ****     *
1026:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1027:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1028:Generated_Source\PSoC4/CyLib.c ****     {
 718              		.loc 1 1028 0
 719              		.cfi_startproc
 720 0000 80B5     		push	{r7, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 7, -8
 723              		.cfi_offset 14, -4
 724 0002 84B0     		sub	sp, sp, #16
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 7860     		str	r0, [r7, #4]
1029:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
 729              		.loc 1 1029 0
 730 0008 0023     		mov	r3, #0
 731 000a FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 32


1030:Generated_Source\PSoC4/CyLib.c **** 
1031:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1032:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1033:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 732              		.loc 1 1033 0
 733 000c 154B     		ldr	r3, .L42
 734 000e 154A     		ldr	r2, .L42
 735 0010 1268     		ldr	r2, [r2]
 736 0012 0121     		mov	r1, #1
 737 0014 0A43     		orr	r2, r1
 738 0016 1A60     		str	r2, [r3]
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1036:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
 739              		.loc 1 1036 0
 740 0018 134B     		ldr	r3, .L42+4
 741 001a 144A     		ldr	r2, .L42+8
 742 001c 1A60     		str	r2, [r3]
1037:Generated_Source\PSoC4/CyLib.c **** 
1038:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1039:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 743              		.loc 1 1039 0
 744 001e 144B     		ldr	r3, .L42+12
 745 0020 134A     		ldr	r2, .L42+12
 746 0022 1268     		ldr	r2, [r2]
 747 0024 8021     		mov	r1, #128
 748 0026 0902     		lsl	r1, r1, #8
 749 0028 0A43     		orr	r2, r1
 750 002a 1A60     		str	r2, [r3]
1040:Generated_Source\PSoC4/CyLib.c ****         
1041:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1042:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
1043:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1044:Generated_Source\PSoC4/CyLib.c ****             
1045:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1046:Generated_Source\PSoC4/CyLib.c ****             {
1047:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1048:Generated_Source\PSoC4/CyLib.c ****             }
1049:Generated_Source\PSoC4/CyLib.c ****             else
1050:Generated_Source\PSoC4/CyLib.c ****             {
1051:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1052:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1053:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1054:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1055:Generated_Source\PSoC4/CyLib.c ****             
1056:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
1057:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1058:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1059:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
1060:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1061:Generated_Source\PSoC4/CyLib.c ****                 
1062:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1063:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1064:Generated_Source\PSoC4/CyLib.c ****                 {
1065:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1066:Generated_Source\PSoC4/CyLib.c ****                 }
1067:Generated_Source\PSoC4/CyLib.c ****                 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 33


1068:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1069:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1070:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1071:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1072:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1073:Generated_Source\PSoC4/CyLib.c **** 
1074:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1075:Generated_Source\PSoC4/CyLib.c ****                 {
1076:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
1077:Generated_Source\PSoC4/CyLib.c ****                 }
1078:Generated_Source\PSoC4/CyLib.c **** 
1079:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1080:Generated_Source\PSoC4/CyLib.c ****                 {
1081:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1082:Generated_Source\PSoC4/CyLib.c ****                 }
1083:Generated_Source\PSoC4/CyLib.c ****                 
1084:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1085:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1086:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1087:Generated_Source\PSoC4/CyLib.c ****                 
1088:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1089:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1090:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1091:Generated_Source\PSoC4/CyLib.c ****                 #else
1092:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1093:Generated_Source\PSoC4/CyLib.c ****                 #endif
1094:Generated_Source\PSoC4/CyLib.c ****                 
1095:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1096:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1097:Generated_Source\PSoC4/CyLib.c ****                 {
1098:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1099:Generated_Source\PSoC4/CyLib.c ****                 }
1100:Generated_Source\PSoC4/CyLib.c ****                 
1101:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1102:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD | 
1103:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1104:Generated_Source\PSoC4/CyLib.c ****                                             
1105:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1106:Generated_Source\PSoC4/CyLib.c ****                 {
1107:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1108:Generated_Source\PSoC4/CyLib.c ****                 }
1109:Generated_Source\PSoC4/CyLib.c **** 
1110:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1111:Generated_Source\PSoC4/CyLib.c ****                 
1112:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1113:Generated_Source\PSoC4/CyLib.c ****                 
1114:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1115:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1116:Generated_Source\PSoC4/CyLib.c ****                 
1117:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1118:Generated_Source\PSoC4/CyLib.c ****                 {
1119:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
1120:Generated_Source\PSoC4/CyLib.c ****                 }
1121:Generated_Source\PSoC4/CyLib.c ****                 
1122:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1123:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1124:Generated_Source\PSoC4/CyLib.c ****                 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 34


1125:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1126:Generated_Source\PSoC4/CyLib.c ****                 {
1127:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1128:Generated_Source\PSoC4/CyLib.c ****                 }
1129:Generated_Source\PSoC4/CyLib.c ****                 
1130:Generated_Source\PSoC4/CyLib.c ****             }
1131:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 */
1132:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1133:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
1134:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1135:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1136:Generated_Source\PSoC4/CyLib.c **** 
1137:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
 751              		.loc 1 1137 0
 752 002c 7B68     		ldr	r3, [r7, #4]
 753 002e 002B     		cmp	r3, #0
 754 0030 12D0     		beq	.L37
1138:Generated_Source\PSoC4/CyLib.c ****         {
1139:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
 755              		.loc 1 1139 0
 756 0032 1023     		mov	r3, #16
 757 0034 FB60     		str	r3, [r7, #12]
1140:Generated_Source\PSoC4/CyLib.c **** 
1141:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
 758              		.loc 1 1141 0
 759 0036 0CE0     		b	.L38
 760              	.L40:
1142:Generated_Source\PSoC4/CyLib.c ****             {
1143:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
 761              		.loc 1 1143 0
 762 0038 0120     		mov	r0, #1
 763 003a FFF7FEFF 		bl	CyDelayUs
1144:Generated_Source\PSoC4/CyLib.c **** 
1145:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
 764              		.loc 1 1145 0
 765 003e FFF7FEFF 		bl	CySysClkEcoReadStatus
 766 0042 031E     		sub	r3, r0, #0
 767 0044 02D0     		beq	.L39
1146:Generated_Source\PSoC4/CyLib.c ****                 {
1147:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
 768              		.loc 1 1147 0
 769 0046 0023     		mov	r3, #0
 770 0048 FB60     		str	r3, [r7, #12]
1148:Generated_Source\PSoC4/CyLib.c ****                     break;
 771              		.loc 1 1148 0
 772 004a 05E0     		b	.L37
 773              	.L39:
1141:Generated_Source\PSoC4/CyLib.c ****             {
 774              		.loc 1 1141 0
 775 004c 7B68     		ldr	r3, [r7, #4]
 776 004e 013B     		sub	r3, r3, #1
 777 0050 7B60     		str	r3, [r7, #4]
 778              	.L38:
1141:Generated_Source\PSoC4/CyLib.c ****             {
 779              		.loc 1 1141 0 is_stmt 0 discriminator 1
 780 0052 7B68     		ldr	r3, [r7, #4]
 781 0054 002B     		cmp	r3, #0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 35


 782 0056 EFD1     		bne	.L40
 783              	.L37:
1149:Generated_Source\PSoC4/CyLib.c ****                 }
1150:Generated_Source\PSoC4/CyLib.c ****             }
1151:Generated_Source\PSoC4/CyLib.c **** 
1152:Generated_Source\PSoC4/CyLib.c ****         }
1153:Generated_Source\PSoC4/CyLib.c **** 
1154:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
 784              		.loc 1 1154 0 is_stmt 1
 785 0058 FB68     		ldr	r3, [r7, #12]
1155:Generated_Source\PSoC4/CyLib.c ****     }
 786              		.loc 1 1155 0
 787 005a 181C     		mov	r0, r3
 788 005c BD46     		mov	sp, r7
 789 005e 04B0     		add	sp, sp, #16
 790              		@ sp needed
 791 0060 80BD     		pop	{r7, pc}
 792              	.L43:
 793 0062 C046     		.align	2
 794              	.L42:
 795 0064 60F02E40 		.word	1076818016
 796 0068 78002E40 		.word	1076756600
 797 006c 02200000 		.word	8194
 798 0070 10002E40 		.word	1076756496
 799              		.cfi_endproc
 800              	.LFE9:
 801              		.size	CySysClkEcoStart, .-CySysClkEcoStart
 802              		.section	.text.CySysClkEcoStop,"ax",%progbits
 803              		.align	2
 804              		.global	CySysClkEcoStop
 805              		.code	16
 806              		.thumb_func
 807              		.type	CySysClkEcoStop, %function
 808              	CySysClkEcoStop:
 809              	.LFB10:
1156:Generated_Source\PSoC4/CyLib.c **** 
1157:Generated_Source\PSoC4/CyLib.c **** 
1158:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1159:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1160:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1161:Generated_Source\PSoC4/CyLib.c ****     *
1162:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1163:Generated_Source\PSoC4/CyLib.c ****     *
1164:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1165:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1166:Generated_Source\PSoC4/CyLib.c ****     * functioning.
1167:Generated_Source\PSoC4/CyLib.c ****     *
1168:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1169:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1170:Generated_Source\PSoC4/CyLib.c ****     {
 810              		.loc 1 1170 0
 811              		.cfi_startproc
 812 0000 80B5     		push	{r7, lr}
 813              		.cfi_def_cfa_offset 8
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 36


 817              		.cfi_def_cfa_register 7
1171:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1172:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1173:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 818              		.loc 1 1173 0
 819 0004 064B     		ldr	r3, .L45
 820 0006 064A     		ldr	r2, .L45
 821 0008 1268     		ldr	r2, [r2]
 822 000a 0121     		mov	r1, #1
 823 000c 8A43     		bic	r2, r1
 824 000e 1A60     		str	r2, [r3]
1174:Generated_Source\PSoC4/CyLib.c **** 
1175:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1176:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 825              		.loc 1 1176 0
 826 0010 044B     		ldr	r3, .L45+4
 827 0012 044A     		ldr	r2, .L45+4
 828 0014 1268     		ldr	r2, [r2]
 829 0016 0449     		ldr	r1, .L45+8
 830 0018 0A40     		and	r2, r1
 831 001a 1A60     		str	r2, [r3]
1177:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1178:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1179:Generated_Source\PSoC4/CyLib.c ****         #else
1180:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1181:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1182:Generated_Source\PSoC4/CyLib.c ****     }
 832              		.loc 1 1182 0
 833 001c BD46     		mov	sp, r7
 834              		@ sp needed
 835 001e 80BD     		pop	{r7, pc}
 836              	.L46:
 837              		.align	2
 838              	.L45:
 839 0020 60F02E40 		.word	1076818016
 840 0024 10002E40 		.word	1076756496
 841 0028 FF7FFFFF 		.word	-32769
 842              		.cfi_endproc
 843              	.LFE10:
 844              		.size	CySysClkEcoStop, .-CySysClkEcoStop
 845              		.section	.text.CySysClkEcoReadStatus,"ax",%progbits
 846              		.align	2
 847              		.global	CySysClkEcoReadStatus
 848              		.code	16
 849              		.thumb_func
 850              		.type	CySysClkEcoReadStatus, %function
 851              	CySysClkEcoReadStatus:
 852              	.LFB11:
1183:Generated_Source\PSoC4/CyLib.c **** 
1184:Generated_Source\PSoC4/CyLib.c **** 
1185:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1186:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1187:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1188:Generated_Source\PSoC4/CyLib.c ****     *
1189:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1190:Generated_Source\PSoC4/CyLib.c ****     *
1191:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 37


1192:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1193:Generated_Source\PSoC4/CyLib.c ****     *
1194:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, the error status bit is the WATCHDOG_ERROR bit in
1195:Generated_Source\PSoC4/CyLib.c ****     * ECO_STATUS register.
1196:Generated_Source\PSoC4/CyLib.c ****     *
1197:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1198:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1199:Generated_Source\PSoC4/CyLib.c ****     *
1200:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L: Non-zero indicates that ECO is running.
1201:Generated_Source\PSoC4/CyLib.c ****     *
1202:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1203:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1204:Generated_Source\PSoC4/CyLib.c ****     {
 853              		.loc 1 1204 0
 854              		.cfi_startproc
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 82B0     		sub	sp, sp, #8
 860              		.cfi_def_cfa_offset 16
 861 0004 00AF     		add	r7, sp, #0
 862              		.cfi_def_cfa_register 7
1205:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1206:Generated_Source\PSoC4/CyLib.c **** 
1207:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1208:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
 863              		.loc 1 1208 0
 864 0006 054B     		ldr	r3, .L49
 865 0008 1B68     		ldr	r3, [r3]
 866 000a 0122     		mov	r2, #1
 867 000c 1340     		and	r3, r2
 868 000e 7B60     		str	r3, [r7, #4]
1209:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1210:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1211:Generated_Source\PSoC4/CyLib.c **** 
1212:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) || 
1213:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
1214:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1215:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
1216:Generated_Source\PSoC4/CyLib.c ****         #else
1217:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1218:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1219:Generated_Source\PSoC4/CyLib.c **** 
1220:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
 869              		.loc 1 1220 0
 870 0010 7B68     		ldr	r3, [r7, #4]
1221:Generated_Source\PSoC4/CyLib.c ****     }
 871              		.loc 1 1221 0
 872 0012 181C     		mov	r0, r3
 873 0014 BD46     		mov	sp, r7
 874 0016 02B0     		add	sp, sp, #8
 875              		@ sp needed
 876 0018 80BD     		pop	{r7, pc}
 877              	.L50:
 878 001a C046     		.align	2
 879              	.L49:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 38


 880 001c 0C002E40 		.word	1076756492
 881              		.cfi_endproc
 882              	.LFE11:
 883              		.size	CySysClkEcoReadStatus, .-CySysClkEcoReadStatus
 884              		.section	.text.CySysClkWriteEcoDiv,"ax",%progbits
 885              		.align	2
 886              		.global	CySysClkWriteEcoDiv
 887              		.code	16
 888              		.thumb_func
 889              		.type	CySysClkWriteEcoDiv, %function
 890              	CySysClkWriteEcoDiv:
 891              	.LFB12:
1222:Generated_Source\PSoC4/CyLib.c **** 
1223:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1224:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1225:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1226:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1227:Generated_Source\PSoC4/CyLib.c ****         *
1228:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1229:Generated_Source\PSoC4/CyLib.c ****         *
1230:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1231:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1232:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1233:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1234:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1235:Generated_Source\PSoC4/CyLib.c ****         *
1236:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1237:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1238:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1239:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1240:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1241:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1242:Generated_Source\PSoC4/CyLib.c ****         *
1243:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1244:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1245:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1246:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1247:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1248:Generated_Source\PSoC4/CyLib.c ****         *
1249:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1250:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1251:Generated_Source\PSoC4/CyLib.c ****         {
 892              		.loc 1 1251 0
 893              		.cfi_startproc
 894 0000 90B5     		push	{r4, r7, lr}
 895              		.cfi_def_cfa_offset 12
 896              		.cfi_offset 4, -12
 897              		.cfi_offset 7, -8
 898              		.cfi_offset 14, -4
 899 0002 85B0     		sub	sp, sp, #20
 900              		.cfi_def_cfa_offset 32
 901 0004 00AF     		add	r7, sp, #0
 902              		.cfi_def_cfa_register 7
 903 0006 7860     		str	r0, [r7, #4]
1252:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1253:Generated_Source\PSoC4/CyLib.c **** 
1254:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 39


 904              		.loc 1 1254 0
 905 0008 114B     		ldr	r3, .L54
 906 000a 1B68     		ldr	r3, [r3]
 907 000c 0722     		mov	r2, #7
 908 000e 1340     		and	r3, r2
 909 0010 022B     		cmp	r3, #2
 910 0012 16D0     		beq	.L52
1255:Generated_Source\PSoC4/CyLib.c ****             {
1256:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
 911              		.loc 1 1256 0
 912 0014 0F23     		mov	r3, #15
 913 0016 FC18     		add	r4, r7, r3
 914 0018 FFF7FEFF 		bl	CyEnterCriticalSection
 915 001c 031C     		mov	r3, r0
 916 001e 2370     		strb	r3, [r4]
1257:Generated_Source\PSoC4/CyLib.c **** 
1258:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
 917              		.loc 1 1258 0
 918 0020 0C4B     		ldr	r3, .L54+4
 919 0022 7A68     		ldr	r2, [r7, #4]
 920 0024 0321     		mov	r1, #3
 921 0026 1140     		and	r1, r2
1259:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 922              		.loc 1 1259 0
 923 0028 0A4A     		ldr	r2, .L54+4
 924 002a 1268     		ldr	r2, [r2]
 925 002c 0320     		mov	r0, #3
 926 002e 8243     		bic	r2, r0
1258:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 927              		.loc 1 1258 0
 928 0030 0A43     		orr	r2, r1
 929 0032 1A60     		str	r2, [r3]
1260:Generated_Source\PSoC4/CyLib.c **** 
1261:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
 930              		.loc 1 1261 0
 931 0034 0F23     		mov	r3, #15
 932 0036 FB18     		add	r3, r7, r3
 933 0038 1B78     		ldrb	r3, [r3]
 934 003a 181C     		mov	r0, r3
 935 003c FFF7FEFF 		bl	CyExitCriticalSection
 936 0040 02E0     		b	.L51
 937              	.L52:
1262:Generated_Source\PSoC4/CyLib.c ****             }
1263:Generated_Source\PSoC4/CyLib.c ****             else
1264:Generated_Source\PSoC4/CyLib.c ****             {
1265:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1266:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
 938              		.loc 1 1266 0 discriminator 1
 939 0042 0020     		mov	r0, #0
 940 0044 FFF7FEFF 		bl	CyHalt
 941              	.L51:
1267:Generated_Source\PSoC4/CyLib.c ****             }
1268:Generated_Source\PSoC4/CyLib.c ****         }
 942              		.loc 1 1268 0
 943 0048 BD46     		mov	sp, r7
 944 004a 05B0     		add	sp, sp, #20
 945              		@ sp needed
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 40


 946 004c 90BD     		pop	{r4, r7, pc}
 947              	.L55:
 948 004e C046     		.align	2
 949              	.L54:
 950 0050 00010B40 		.word	1074462976
 951 0054 64F02E40 		.word	1076818020
 952              		.cfi_endproc
 953              	.LFE12:
 954              		.size	CySysClkWriteEcoDiv, .-CySysClkWriteEcoDiv
 955              		.section	.text.CySysLvdEnable,"ax",%progbits
 956              		.align	2
 957              		.global	CySysLvdEnable
 958              		.code	16
 959              		.thumb_func
 960              		.type	CySysLvdEnable, %function
 961              	CySysLvdEnable:
 962              	.LFB13:
1269:Generated_Source\PSoC4/CyLib.c **** 
1270:Generated_Source\PSoC4/CyLib.c ****     #else
1271:Generated_Source\PSoC4/CyLib.c **** 
1272:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1273:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1274:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1275:Generated_Source\PSoC4/CyLib.c ****         *
1276:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1277:Generated_Source\PSoC4/CyLib.c ****         * 4200L devices only.
1278:Generated_Source\PSoC4/CyLib.c ****         *
1279:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1280:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1281:Generated_Source\PSoC4/CyLib.c ****         *
1282:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1283:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1284:Generated_Source\PSoC4/CyLib.c ****         *
1285:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1286:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1287:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1288:Generated_Source\PSoC4/CyLib.c ****         *
1289:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1290:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1291:Generated_Source\PSoC4/CyLib.c ****         *
1292:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1293:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1294:Generated_Source\PSoC4/CyLib.c ****         *
1295:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1296:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1297:Generated_Source\PSoC4/CyLib.c ****         *
1298:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1299:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1300:Generated_Source\PSoC4/CyLib.c ****         *
1301:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1302:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1303:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1304:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1305:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1306:Generated_Source\PSoC4/CyLib.c ****         *
1307:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1308:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 41


1309:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1310:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1311:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1312:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1313:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1314:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1315:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1316:Generated_Source\PSoC4/CyLib.c ****         *
1317:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1318:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1319:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1320:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1321:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1322:Generated_Source\PSoC4/CyLib.c ****         *
1323:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1324:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1325:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1326:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1327:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1328:Generated_Source\PSoC4/CyLib.c ****         *
1329:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1330:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1331:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1332:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1333:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1334:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1335:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1336:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1337:Generated_Source\PSoC4/CyLib.c ****         *
1338:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1339:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1340:Generated_Source\PSoC4/CyLib.c ****         {
1341:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1342:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1343:Generated_Source\PSoC4/CyLib.c **** 
1344:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1345:Generated_Source\PSoC4/CyLib.c **** 
1346:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1347:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1348:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1349:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1350:Generated_Source\PSoC4/CyLib.c **** 
1351:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1352:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1353:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1354:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1355:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1356:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1357:Generated_Source\PSoC4/CyLib.c **** 
1358:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1359:Generated_Source\PSoC4/CyLib.c **** 
1360:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1361:Generated_Source\PSoC4/CyLib.c ****         }
1362:Generated_Source\PSoC4/CyLib.c **** 
1363:Generated_Source\PSoC4/CyLib.c **** 
1364:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1365:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 42


1366:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1367:Generated_Source\PSoC4/CyLib.c ****         *
1368:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1369:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1370:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1371:Generated_Source\PSoC4/CyLib.c ****         *
1372:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L devices only.
1373:Generated_Source\PSoC4/CyLib.c ****         *
1374:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1375:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1376:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1377:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1378:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1379:Generated_Source\PSoC4/CyLib.c ****         *
1380:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1381:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1382:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1383:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1384:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1385:Generated_Source\PSoC4/CyLib.c ****         *
1386:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1387:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1388:Generated_Source\PSoC4/CyLib.c ****         *
1389:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1390:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1391:Generated_Source\PSoC4/CyLib.c ****         {
1392:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1393:Generated_Source\PSoC4/CyLib.c **** 
1394:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1395:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1396:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1397:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1398:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1399:Generated_Source\PSoC4/CyLib.c **** 
1400:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1401:Generated_Source\PSoC4/CyLib.c **** 
1402:Generated_Source\PSoC4/CyLib.c **** 
1403:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1404:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1405:Generated_Source\PSoC4/CyLib.c ****             {
1406:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1407:Generated_Source\PSoC4/CyLib.c ****             }
1408:Generated_Source\PSoC4/CyLib.c ****             else
1409:Generated_Source\PSoC4/CyLib.c ****             {
1410:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1411:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1412:Generated_Source\PSoC4/CyLib.c **** 
1413:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1414:Generated_Source\PSoC4/CyLib.c ****                 {
1415:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1416:Generated_Source\PSoC4/CyLib.c ****                 }
1417:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1418:Generated_Source\PSoC4/CyLib.c ****                 {
1419:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1420:Generated_Source\PSoC4/CyLib.c ****                 }
1421:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1422:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 43


1423:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1424:Generated_Source\PSoC4/CyLib.c ****                 }
1425:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1426:Generated_Source\PSoC4/CyLib.c ****                 {
1427:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1428:Generated_Source\PSoC4/CyLib.c ****                 }
1429:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1430:Generated_Source\PSoC4/CyLib.c ****                 {
1431:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1432:Generated_Source\PSoC4/CyLib.c ****                 }
1433:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1434:Generated_Source\PSoC4/CyLib.c ****                 {
1435:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1436:Generated_Source\PSoC4/CyLib.c ****                 }
1437:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1438:Generated_Source\PSoC4/CyLib.c ****                 {
1439:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1440:Generated_Source\PSoC4/CyLib.c ****                 }
1441:Generated_Source\PSoC4/CyLib.c ****                 else
1442:Generated_Source\PSoC4/CyLib.c ****                 {
1443:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1444:Generated_Source\PSoC4/CyLib.c ****                 }
1445:Generated_Source\PSoC4/CyLib.c **** 
1446:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1447:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1448:Generated_Source\PSoC4/CyLib.c **** 
1449:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1450:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1451:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1452:Generated_Source\PSoC4/CyLib.c ****                 {
1453:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1454:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1455:Generated_Source\PSoC4/CyLib.c ****                 }
1456:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1457:Generated_Source\PSoC4/CyLib.c ****                 {
1458:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1459:Generated_Source\PSoC4/CyLib.c ****                 }
1460:Generated_Source\PSoC4/CyLib.c ****                 else
1461:Generated_Source\PSoC4/CyLib.c ****                 {
1462:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1463:Generated_Source\PSoC4/CyLib.c ****                 }
1464:Generated_Source\PSoC4/CyLib.c **** 
1465:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1466:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1467:Generated_Source\PSoC4/CyLib.c ****                 {
1468:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1469:Generated_Source\PSoC4/CyLib.c ****                 }
1470:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1471:Generated_Source\PSoC4/CyLib.c ****                 {
1472:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1473:Generated_Source\PSoC4/CyLib.c ****                 }
1474:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1475:Generated_Source\PSoC4/CyLib.c ****                 {
1476:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1477:Generated_Source\PSoC4/CyLib.c ****                 }
1478:Generated_Source\PSoC4/CyLib.c ****                 else
1479:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 44


1480:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1481:Generated_Source\PSoC4/CyLib.c ****                 }
1482:Generated_Source\PSoC4/CyLib.c **** 
1483:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1484:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1485:Generated_Source\PSoC4/CyLib.c **** 
1486:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1487:Generated_Source\PSoC4/CyLib.c **** 
1488:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1489:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1490:Generated_Source\PSoC4/CyLib.c ****                 {
1491:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1492:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1493:Generated_Source\PSoC4/CyLib.c ****                 }
1494:Generated_Source\PSoC4/CyLib.c ****                 else
1495:Generated_Source\PSoC4/CyLib.c ****                 {
1496:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1497:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1498:Generated_Source\PSoC4/CyLib.c ****                     */
1499:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1500:Generated_Source\PSoC4/CyLib.c ****                 }
1501:Generated_Source\PSoC4/CyLib.c ****             }
1502:Generated_Source\PSoC4/CyLib.c **** 
1503:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1504:Generated_Source\PSoC4/CyLib.c ****         }
1505:Generated_Source\PSoC4/CyLib.c **** 
1506:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1507:Generated_Source\PSoC4/CyLib.c **** 
1508:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1509:Generated_Source\PSoC4/CyLib.c **** 
1510:Generated_Source\PSoC4/CyLib.c **** 
1511:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
1512:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1513:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1514:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1515:Generated_Source\PSoC4/CyLib.c ****     *
1516:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1517:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1518:Generated_Source\PSoC4/CyLib.c ****     *
1519:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1520:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1521:Generated_Source\PSoC4/CyLib.c ****     *
1522:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1523:Generated_Source\PSoC4/CyLib.c ****     *
1524:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1525:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1526:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1
1527:Generated_Source\PSoC4/CyLib.c ****     *
1528:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1529:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1530:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1531:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1532:Generated_Source\PSoC4/CyLib.c ****     *
1533:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1534:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1535:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1536:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 45


1537:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1538:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1539:Generated_Source\PSoC4/CyLib.c ****     *
1540:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1541:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1542:Generated_Source\PSoC4/CyLib.c ****     {
1543:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1544:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1545:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1546:Generated_Source\PSoC4/CyLib.c **** 
1547:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1548:Generated_Source\PSoC4/CyLib.c ****         {
1549:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1550:Generated_Source\PSoC4/CyLib.c **** 
1551:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1552:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1553:Generated_Source\PSoC4/CyLib.c **** 
1554:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1555:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1556:Generated_Source\PSoC4/CyLib.c **** 
1557:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1558:Generated_Source\PSoC4/CyLib.c **** 
1559:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1560:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1561:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1562:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1563:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1564:Generated_Source\PSoC4/CyLib.c **** 
1565:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1566:Generated_Source\PSoC4/CyLib.c ****             {
1567:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1568:Generated_Source\PSoC4/CyLib.c **** 
1569:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1570:Generated_Source\PSoC4/CyLib.c ****                 {
1571:Generated_Source\PSoC4/CyLib.c **** 
1572:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1573:Generated_Source\PSoC4/CyLib.c ****                     {
1574:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1575:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1576:Generated_Source\PSoC4/CyLib.c ****                         break;
1577:Generated_Source\PSoC4/CyLib.c ****                     }
1578:Generated_Source\PSoC4/CyLib.c **** 
1579:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1580:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1581:Generated_Source\PSoC4/CyLib.c ****                 }
1582:Generated_Source\PSoC4/CyLib.c ****             }
1583:Generated_Source\PSoC4/CyLib.c ****         }
1584:Generated_Source\PSoC4/CyLib.c ****         else
1585:Generated_Source\PSoC4/CyLib.c ****         {
1586:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1587:Generated_Source\PSoC4/CyLib.c ****         }
1588:Generated_Source\PSoC4/CyLib.c **** 
1589:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1590:Generated_Source\PSoC4/CyLib.c ****     }
1591:Generated_Source\PSoC4/CyLib.c **** 
1592:Generated_Source\PSoC4/CyLib.c **** 
1593:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 46


1594:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1595:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1596:Generated_Source\PSoC4/CyLib.c ****     *
1597:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1598:Generated_Source\PSoC4/CyLib.c ****     *
1599:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1600:Generated_Source\PSoC4/CyLib.c ****     *
1601:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1602:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1603:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1604:Generated_Source\PSoC4/CyLib.c ****     *
1605:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1606:Generated_Source\PSoC4/CyLib.c ****     *
1607:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1608:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1609:Generated_Source\PSoC4/CyLib.c ****     {
1610:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1611:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1612:Generated_Source\PSoC4/CyLib.c **** 
1613:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1614:Generated_Source\PSoC4/CyLib.c **** 
1615:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1616:Generated_Source\PSoC4/CyLib.c **** 
1617:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1618:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1619:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1620:Generated_Source\PSoC4/CyLib.c ****         {
1621:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1622:Generated_Source\PSoC4/CyLib.c ****         }
1623:Generated_Source\PSoC4/CyLib.c **** 
1624:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1625:Generated_Source\PSoC4/CyLib.c **** 
1626:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1627:Generated_Source\PSoC4/CyLib.c ****     }
1628:Generated_Source\PSoC4/CyLib.c **** 
1629:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1630:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1631:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1632:Generated_Source\PSoC4/CyLib.c ****     *
1633:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1634:Generated_Source\PSoC4/CyLib.c ****     *
1635:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1636:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1637:Generated_Source\PSoC4/CyLib.c ****     *
1638:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1639:Generated_Source\PSoC4/CyLib.c ****     *
1640:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1641:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1642:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1643:Generated_Source\PSoC4/CyLib.c ****     *
1644:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1645:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1646:Generated_Source\PSoC4/CyLib.c ****     {
1647:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1648:Generated_Source\PSoC4/CyLib.c **** 
1649:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1650:Generated_Source\PSoC4/CyLib.c ****         {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 47


1651:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1652:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1653:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1654:Generated_Source\PSoC4/CyLib.c ****         }
1655:Generated_Source\PSoC4/CyLib.c ****     }
1656:Generated_Source\PSoC4/CyLib.c **** 
1657:Generated_Source\PSoC4/CyLib.c **** 
1658:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1659:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1660:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1661:Generated_Source\PSoC4/CyLib.c ****     *
1662:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1663:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1664:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1665:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1666:Generated_Source\PSoC4/CyLib.c ****     *
1667:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1668:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1669:Generated_Source\PSoC4/CyLib.c ****     *
1670:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1671:Generated_Source\PSoC4/CyLib.c ****     *
1672:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1673:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1674:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1675:Generated_Source\PSoC4/CyLib.c ****     *
1676:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1677:Generated_Source\PSoC4/CyLib.c ****     * divider.
1678:Generated_Source\PSoC4/CyLib.c ****     *
1679:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1680:Generated_Source\PSoC4/CyLib.c ****     *
1681:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1682:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1683:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1684:Generated_Source\PSoC4/CyLib.c ****     *
1685:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1686:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1687:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1688:Generated_Source\PSoC4/CyLib.c ****     *
1689:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1690:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1691:Generated_Source\PSoC4/CyLib.c ****     {
1692:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1693:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1694:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1695:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1696:Generated_Source\PSoC4/CyLib.c **** 
1697:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1698:Generated_Source\PSoC4/CyLib.c **** 
1699:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1700:Generated_Source\PSoC4/CyLib.c **** 
1701:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1702:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1703:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1704:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1705:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1706:Generated_Source\PSoC4/CyLib.c ****         {
1707:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 48


1708:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1709:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1710:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1711:Generated_Source\PSoC4/CyLib.c **** 
1712:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1713:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1714:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1715:Generated_Source\PSoC4/CyLib.c **** 
1716:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1717:Generated_Source\PSoC4/CyLib.c **** 
1718:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1719:Generated_Source\PSoC4/CyLib.c ****         }
1720:Generated_Source\PSoC4/CyLib.c **** 
1721:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1722:Generated_Source\PSoC4/CyLib.c **** 
1723:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1724:Generated_Source\PSoC4/CyLib.c ****     }
1725:Generated_Source\PSoC4/CyLib.c **** 
1726:Generated_Source\PSoC4/CyLib.c **** 
1727:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1728:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1729:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1730:Generated_Source\PSoC4/CyLib.c ****     *
1731:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1732:Generated_Source\PSoC4/CyLib.c ****     *
1733:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1734:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1735:Generated_Source\PSoC4/CyLib.c ****     *
1736:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1737:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1738:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1739:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1740:Generated_Source\PSoC4/CyLib.c ****     *
1741:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1742:Generated_Source\PSoC4/CyLib.c ****     *
1743:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1744:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1745:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1746:Generated_Source\PSoC4/CyLib.c ****     *
1747:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1748:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1749:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1750:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1751:Generated_Source\PSoC4/CyLib.c ****     *
1752:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1753:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1754:Generated_Source\PSoC4/CyLib.c ****     *
1755:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1756:Generated_Source\PSoC4/CyLib.c ****     *
1757:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1758:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1759:Generated_Source\PSoC4/CyLib.c ****     {
1760:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1761:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1762:Generated_Source\PSoC4/CyLib.c **** 
1763:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1764:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 49


1765:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1766:Generated_Source\PSoC4/CyLib.c ****         {
1767:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1768:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1769:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1770:Generated_Source\PSoC4/CyLib.c ****         }
1771:Generated_Source\PSoC4/CyLib.c **** 
1772:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1773:Generated_Source\PSoC4/CyLib.c ****     }
1774:Generated_Source\PSoC4/CyLib.c **** 
1775:Generated_Source\PSoC4/CyLib.c **** 
1776:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1777:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1778:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1779:Generated_Source\PSoC4/CyLib.c ****     *
1780:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1781:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1782:Generated_Source\PSoC4/CyLib.c ****     *
1783:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1784:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1785:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1786:Generated_Source\PSoC4/CyLib.c ****     *
1787:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1788:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1789:Generated_Source\PSoC4/CyLib.c ****     *
1790:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1791:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1792:Generated_Source\PSoC4/CyLib.c ****     {
1793:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1794:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1795:Generated_Source\PSoC4/CyLib.c **** 
1796:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1797:Generated_Source\PSoC4/CyLib.c **** 
1798:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1799:Generated_Source\PSoC4/CyLib.c **** 
1800:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1801:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1802:Generated_Source\PSoC4/CyLib.c **** 
1803:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1804:Generated_Source\PSoC4/CyLib.c **** 
1805:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1806:Generated_Source\PSoC4/CyLib.c ****     }
1807:Generated_Source\PSoC4/CyLib.c **** 
1808:Generated_Source\PSoC4/CyLib.c **** 
1809:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1810:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1811:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1812:Generated_Source\PSoC4/CyLib.c ****     *
1813:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1814:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1815:Generated_Source\PSoC4/CyLib.c ****     *
1816:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1817:Generated_Source\PSoC4/CyLib.c ****     *
1818:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1819:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1820:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1821:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 50


1822:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1823:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1824:Generated_Source\PSoC4/CyLib.c ****     *
1825:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1826:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1827:Generated_Source\PSoC4/CyLib.c ****     {
1828:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1829:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1830:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_LOCKED;
1831:Generated_Source\PSoC4/CyLib.c **** 
1832:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1833:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1834:Generated_Source\PSoC4/CyLib.c **** 
1835:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1836:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll)) ||
1837:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll)))
1838:Generated_Source\PSoC4/CyLib.c ****         {
1839:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1840:Generated_Source\PSoC4/CyLib.c ****         }
1841:Generated_Source\PSoC4/CyLib.c **** 
1842:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1843:Generated_Source\PSoC4/CyLib.c ****     }
1844:Generated_Source\PSoC4/CyLib.c **** 
1845:Generated_Source\PSoC4/CyLib.c **** 
1846:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1847:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1848:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1849:Generated_Source\PSoC4/CyLib.c ****     *
1850:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1851:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1852:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1853:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1856:Generated_Source\PSoC4/CyLib.c ****     *
1857:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1858:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1859:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1860:Generated_Source\PSoC4/CyLib.c ****     *
1861:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1862:Generated_Source\PSoC4/CyLib.c ****     *
1863:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1864:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1865:Generated_Source\PSoC4/CyLib.c ****     {
1866:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1867:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1868:Generated_Source\PSoC4/CyLib.c **** 
1869:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1870:Generated_Source\PSoC4/CyLib.c **** 
1871:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1872:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1873:Generated_Source\PSoC4/CyLib.c **** 
1874:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1875:Generated_Source\PSoC4/CyLib.c **** 
1876:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1877:Generated_Source\PSoC4/CyLib.c ****     }
1878:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 51


1879:Generated_Source\PSoC4/CyLib.c **** 
1880:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1881:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1882:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1883:Generated_Source\PSoC4/CyLib.c ****     *
1884:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1885:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1886:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1887:Generated_Source\PSoC4/CyLib.c ****     *
1888:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1889:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1890:Generated_Source\PSoC4/CyLib.c ****     *
1891:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1892:Generated_Source\PSoC4/CyLib.c ****     *
1893:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1894:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1895:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1896:Generated_Source\PSoC4/CyLib.c ****     *
1897:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1898:Generated_Source\PSoC4/CyLib.c ****     *
1899:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
1900:Generated_Source\PSoC4/CyLib.c ****     *
1901:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
1902:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
1903:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1904:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1905:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1906:Generated_Source\PSoC4/CyLib.c ****     *
1907:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
1908:Generated_Source\PSoC4/CyLib.c ****     *
1909:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
1910:Generated_Source\PSoC4/CyLib.c ****     * frequency.
1911:Generated_Source\PSoC4/CyLib.c ****     *
1912:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
1913:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
1914:Generated_Source\PSoC4/CyLib.c ****     *
1915:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1916:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
1917:Generated_Source\PSoC4/CyLib.c ****     {
1918:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
1919:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
1920:Generated_Source\PSoC4/CyLib.c **** 
1921:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
1922:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
1923:Generated_Source\PSoC4/CyLib.c **** 
1924:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
1925:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
1926:Generated_Source\PSoC4/CyLib.c **** 
1927:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
1928:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
1929:Generated_Source\PSoC4/CyLib.c **** 
1930:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1931:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c **** 
1934:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1935:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 52


1936:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1937:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
1938:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
1939:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
1940:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1941:Generated_Source\PSoC4/CyLib.c ****         {
1942:Generated_Source\PSoC4/CyLib.c **** 
1943:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
1944:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
1945:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
1946:Generated_Source\PSoC4/CyLib.c **** 
1947:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
1948:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
1949:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
1950:Generated_Source\PSoC4/CyLib.c **** 
1951:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
1952:Generated_Source\PSoC4/CyLib.c ****             {
1953:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
1954:Generated_Source\PSoC4/CyLib.c ****                 {
1955:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
1956:Generated_Source\PSoC4/CyLib.c **** 
1957:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
1958:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
1959:Generated_Source\PSoC4/CyLib.c **** 
1960:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
1961:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
1962:Generated_Source\PSoC4/CyLib.c **** 
1963:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
1964:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
1965:Generated_Source\PSoC4/CyLib.c **** 
1966:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
1967:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
1968:Generated_Source\PSoC4/CyLib.c ****                     {
1969:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
1970:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
1971:Generated_Source\PSoC4/CyLib.c ****                         break;
1972:Generated_Source\PSoC4/CyLib.c ****                     }
1973:Generated_Source\PSoC4/CyLib.c ****                 }
1974:Generated_Source\PSoC4/CyLib.c **** 
1975:Generated_Source\PSoC4/CyLib.c **** 
1976:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
1977:Generated_Source\PSoC4/CyLib.c ****                 {
1978:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
1979:Generated_Source\PSoC4/CyLib.c ****                     {
1980:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
1981:Generated_Source\PSoC4/CyLib.c ****                     }
1982:Generated_Source\PSoC4/CyLib.c ****                 }
1983:Generated_Source\PSoC4/CyLib.c ****             }
1984:Generated_Source\PSoC4/CyLib.c **** 
1985:Generated_Source\PSoC4/CyLib.c ****         }
1986:Generated_Source\PSoC4/CyLib.c **** 
1987:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1988:Generated_Source\PSoC4/CyLib.c ****     }
1989:Generated_Source\PSoC4/CyLib.c **** 
1990:Generated_Source\PSoC4/CyLib.c **** 
1991:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 53


1993:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLib.c ****     *
1995:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
1996:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
1997:Generated_Source\PSoC4/CyLib.c ****     *
1998:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1999:Generated_Source\PSoC4/CyLib.c ****     *
2000:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2001:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2002:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
2003:Generated_Source\PSoC4/CyLib.c ****     *
2004:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2005:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2006:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock
2007:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2008:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0]
2009:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1]
2010:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2]
2011:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3]
2012:Generated_Source\PSoC4/CyLib.c ****     *
2013:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2014:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2015:Generated_Source\PSoC4/CyLib.c ****     {
2016:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2017:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2018:Generated_Source\PSoC4/CyLib.c **** 
2019:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2020:Generated_Source\PSoC4/CyLib.c **** 
2021:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2022:Generated_Source\PSoC4/CyLib.c ****         {
2023:Generated_Source\PSoC4/CyLib.c ****             regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2024:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MASK(pl
2025:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG = regTmp;
2026:Generated_Source\PSoC4/CyLib.c ****         }
2027:Generated_Source\PSoC4/CyLib.c **** 
2028:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2029:Generated_Source\PSoC4/CyLib.c ****     }
2030:Generated_Source\PSoC4/CyLib.c **** 
2031:Generated_Source\PSoC4/CyLib.c **** 
2032:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2033:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2034:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2035:Generated_Source\PSoC4/CyLib.c ****     *
2036:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2037:Generated_Source\PSoC4/CyLib.c ****     *
2038:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2039:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2040:Generated_Source\PSoC4/CyLib.c ****     *
2041:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
2042:Generated_Source\PSoC4/CyLib.c ****     *
2043:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2044:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2045:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
2046:Generated_Source\PSoC4/CyLib.c ****     *
2047:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2048:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2049:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 54


2050:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2051:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2052:Generated_Source\PSoC4/CyLib.c ****     *
2053:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2054:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2055:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2056:Generated_Source\PSoC4/CyLib.c ****     *
2057:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2058:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
2059:Generated_Source\PSoC4/CyLib.c ****     {
2060:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2061:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2062:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2063:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2064:Generated_Source\PSoC4/CyLib.c **** 
2065:Generated_Source\PSoC4/CyLib.c **** 
2066:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2067:Generated_Source\PSoC4/CyLib.c **** 
2068:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2069:Generated_Source\PSoC4/CyLib.c **** 
2070:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2071:Generated_Source\PSoC4/CyLib.c ****         {
2072:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2073:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2074:Generated_Source\PSoC4/CyLib.c **** 
2075:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2076:Generated_Source\PSoC4/CyLib.c **** 
2077:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2078:Generated_Source\PSoC4/CyLib.c ****         }
2079:Generated_Source\PSoC4/CyLib.c **** 
2080:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2081:Generated_Source\PSoC4/CyLib.c **** 
2082:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2083:Generated_Source\PSoC4/CyLib.c ****     }
2084:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
2085:Generated_Source\PSoC4/CyLib.c **** 
2086:Generated_Source\PSoC4/CyLib.c **** 
2087:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2088:Generated_Source\PSoC4/CyLib.c **** 
2089:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2090:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2091:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2092:Generated_Source\PSoC4/CyLib.c ****     *
2093:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2094:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2095:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2096:Generated_Source\PSoC4/CyLib.c ****     *
2097:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2098:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2099:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2100:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2101:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
2102:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
2103:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2104:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2105:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2106:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 55


2107:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2108:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2109:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2110:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2111:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2112:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2113:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2114:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2115:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
2116:Generated_Source\PSoC4/CyLib.c ****     *
2117:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2118:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2119:Generated_Source\PSoC4/CyLib.c ****     {
 963              		.loc 1 2119 0
 964              		.cfi_startproc
 965 0000 80B5     		push	{r7, lr}
 966              		.cfi_def_cfa_offset 8
 967              		.cfi_offset 7, -8
 968              		.cfi_offset 14, -4
 969 0002 82B0     		sub	sp, sp, #8
 970              		.cfi_def_cfa_offset 16
 971 0004 00AF     		add	r7, sp, #0
 972              		.cfi_def_cfa_register 7
 973 0006 7860     		str	r0, [r7, #4]
2120:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2121:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 974              		.loc 1 2121 0
 975 0008 134B     		ldr	r3, .L57
 976 000a 134A     		ldr	r2, .L57
 977 000c 1268     		ldr	r2, [r2]
 978 000e 0221     		mov	r1, #2
 979 0010 8A43     		bic	r2, r1
 980 0012 1A60     		str	r2, [r3]
2122:Generated_Source\PSoC4/CyLib.c **** 
2123:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2124:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 981              		.loc 1 2124 0
 982 0014 114B     		ldr	r3, .L57+4
 983 0016 114A     		ldr	r2, .L57+4
 984 0018 1268     		ldr	r2, [r2]
 985 001a 1E21     		mov	r1, #30
 986 001c 8A43     		bic	r2, r1
 987 001e 111C     		mov	r1, r2
2125:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 988              		.loc 1 2125 0
 989 0020 7A68     		ldr	r2, [r7, #4]
 990 0022 5200     		lsl	r2, r2, #1
 991 0024 1E20     		mov	r0, #30
 992 0026 0240     		and	r2, r0
2124:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 993              		.loc 1 2124 0
 994 0028 0A43     		orr	r2, r1
 995 002a 1A60     		str	r2, [r3]
2126:Generated_Source\PSoC4/CyLib.c **** 
2127:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2128:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 996              		.loc 1 2128 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 56


 997 002c 0B4B     		ldr	r3, .L57+4
 998 002e 0B4A     		ldr	r2, .L57+4
 999 0030 1268     		ldr	r2, [r2]
 1000 0032 0121     		mov	r1, #1
 1001 0034 0A43     		orr	r2, r1
 1002 0036 1A60     		str	r2, [r3]
2129:Generated_Source\PSoC4/CyLib.c **** 
2130:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2131:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
 1003              		.loc 1 2131 0
 1004 0038 FA23     		mov	r3, #250
 1005 003a 9B00     		lsl	r3, r3, #2
 1006 003c 181C     		mov	r0, r3
 1007 003e FFF7FEFF 		bl	CyDelayUs
2132:Generated_Source\PSoC4/CyLib.c **** 
2133:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2134:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 1008              		.loc 1 2134 0
 1009 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
2135:Generated_Source\PSoC4/CyLib.c **** 
2136:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2137:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 1010              		.loc 1 2137 0
 1011 0046 044B     		ldr	r3, .L57
 1012 0048 034A     		ldr	r2, .L57
 1013 004a 1268     		ldr	r2, [r2]
 1014 004c 0221     		mov	r1, #2
 1015 004e 0A43     		orr	r2, r1
 1016 0050 1A60     		str	r2, [r3]
2138:Generated_Source\PSoC4/CyLib.c ****     }
 1017              		.loc 1 2138 0
 1018 0052 BD46     		mov	sp, r7
 1019 0054 02B0     		add	sp, sp, #8
 1020              		@ sp needed
 1021 0056 80BD     		pop	{r7, pc}
 1022              	.L58:
 1023              		.align	2
 1024              	.L57:
 1025 0058 08000B40 		.word	1074462728
 1026 005c 18000B40 		.word	1074462744
 1027              		.cfi_endproc
 1028              	.LFE13:
 1029              		.size	CySysLvdEnable, .-CySysLvdEnable
 1030              		.section	.text.CySysLvdDisable,"ax",%progbits
 1031              		.align	2
 1032              		.global	CySysLvdDisable
 1033              		.code	16
 1034              		.thumb_func
 1035              		.type	CySysLvdDisable, %function
 1036              	CySysLvdDisable:
 1037              	.LFB14:
2139:Generated_Source\PSoC4/CyLib.c **** 
2140:Generated_Source\PSoC4/CyLib.c **** 
2141:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2142:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2143:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2144:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 57


2145:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2146:Generated_Source\PSoC4/CyLib.c ****     *
2147:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2149:Generated_Source\PSoC4/CyLib.c ****     {
 1038              		.loc 1 2149 0
 1039              		.cfi_startproc
 1040 0000 80B5     		push	{r7, lr}
 1041              		.cfi_def_cfa_offset 8
 1042              		.cfi_offset 7, -8
 1043              		.cfi_offset 14, -4
 1044 0002 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
2150:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 1046              		.loc 1 2150 0
 1047 0004 064B     		ldr	r3, .L60
 1048 0006 064A     		ldr	r2, .L60
 1049 0008 1268     		ldr	r2, [r2]
 1050 000a 0221     		mov	r1, #2
 1051 000c 8A43     		bic	r2, r1
 1052 000e 1A60     		str	r2, [r3]
2151:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 1053              		.loc 1 2151 0
 1054 0010 044B     		ldr	r3, .L60+4
 1055 0012 044A     		ldr	r2, .L60+4
 1056 0014 1268     		ldr	r2, [r2]
 1057 0016 0121     		mov	r1, #1
 1058 0018 8A43     		bic	r2, r1
 1059 001a 1A60     		str	r2, [r3]
2152:Generated_Source\PSoC4/CyLib.c ****     }
 1060              		.loc 1 2152 0
 1061 001c BD46     		mov	sp, r7
 1062              		@ sp needed
 1063 001e 80BD     		pop	{r7, pc}
 1064              	.L61:
 1065              		.align	2
 1066              	.L60:
 1067 0020 08000B40 		.word	1074462728
 1068 0024 18000B40 		.word	1074462744
 1069              		.cfi_endproc
 1070              	.LFE14:
 1071              		.size	CySysLvdDisable, .-CySysLvdDisable
 1072              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 1073              		.align	2
 1074              		.global	CySysLvdGetInterruptSource
 1075              		.code	16
 1076              		.thumb_func
 1077              		.type	CySysLvdGetInterruptSource, %function
 1078              	CySysLvdGetInterruptSource:
 1079              	.LFB15:
2153:Generated_Source\PSoC4/CyLib.c **** 
2154:Generated_Source\PSoC4/CyLib.c **** 
2155:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2156:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2157:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2158:Generated_Source\PSoC4/CyLib.c ****     *
2159:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 58


2160:Generated_Source\PSoC4/CyLib.c ****     *
2161:Generated_Source\PSoC4/CyLib.c ****     * \return
2162:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2163:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2164:Generated_Source\PSoC4/CyLib.c ****     *
2165:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2166:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2167:Generated_Source\PSoC4/CyLib.c ****     {
 1080              		.loc 1 2167 0
 1081              		.cfi_startproc
 1082 0000 80B5     		push	{r7, lr}
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 7, -8
 1085              		.cfi_offset 14, -4
 1086 0002 00AF     		add	r7, sp, #0
 1087              		.cfi_def_cfa_register 7
2168:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 1088              		.loc 1 2168 0
 1089 0004 034B     		ldr	r3, .L64
 1090 0006 1B68     		ldr	r3, [r3]
 1091 0008 0222     		mov	r2, #2
 1092 000a 1340     		and	r3, r2
2169:Generated_Source\PSoC4/CyLib.c ****     }
 1093              		.loc 1 2169 0
 1094 000c 181C     		mov	r0, r3
 1095 000e BD46     		mov	sp, r7
 1096              		@ sp needed
 1097 0010 80BD     		pop	{r7, pc}
 1098              	.L65:
 1099 0012 C046     		.align	2
 1100              	.L64:
 1101 0014 04000B40 		.word	1074462724
 1102              		.cfi_endproc
 1103              	.LFE15:
 1104              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 1105              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 1106              		.align	2
 1107              		.global	CySysLvdClearInterrupt
 1108              		.code	16
 1109              		.thumb_func
 1110              		.type	CySysLvdClearInterrupt, %function
 1111              	CySysLvdClearInterrupt:
 1112              	.LFB16:
2170:Generated_Source\PSoC4/CyLib.c **** 
2171:Generated_Source\PSoC4/CyLib.c **** 
2172:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2173:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2174:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2175:Generated_Source\PSoC4/CyLib.c ****     *
2176:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2177:Generated_Source\PSoC4/CyLib.c ****     *
2178:Generated_Source\PSoC4/CyLib.c ****     * \return
2179:Generated_Source\PSoC4/CyLib.c ****     *  None
2180:Generated_Source\PSoC4/CyLib.c ****     *
2181:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2182:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2183:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 59


 1113              		.loc 1 2183 0
 1114              		.cfi_startproc
 1115 0000 80B5     		push	{r7, lr}
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119 0002 00AF     		add	r7, sp, #0
 1120              		.cfi_def_cfa_register 7
2184:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 1121              		.loc 1 2184 0
 1122 0004 024B     		ldr	r3, .L67
 1123 0006 0222     		mov	r2, #2
 1124 0008 1A60     		str	r2, [r3]
2185:Generated_Source\PSoC4/CyLib.c ****     }
 1125              		.loc 1 2185 0
 1126 000a BD46     		mov	sp, r7
 1127              		@ sp needed
 1128 000c 80BD     		pop	{r7, pc}
 1129              	.L68:
 1130 000e C046     		.align	2
 1131              	.L67:
 1132 0010 04000B40 		.word	1074462724
 1133              		.cfi_endproc
 1134              	.LFE16:
 1135              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 1136              		.section	.text.CySysGetResetReason,"ax",%progbits
 1137              		.align	2
 1138              		.global	CySysGetResetReason
 1139              		.code	16
 1140              		.thumb_func
 1141              		.type	CySysGetResetReason, %function
 1142              	CySysGetResetReason:
 1143              	.LFB17:
2186:Generated_Source\PSoC4/CyLib.c **** 
2187:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2188:Generated_Source\PSoC4/CyLib.c **** 
2189:Generated_Source\PSoC4/CyLib.c **** 
2190:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2191:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2192:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2193:Generated_Source\PSoC4/CyLib.c **** *
2194:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2195:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2196:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2197:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2198:Generated_Source\PSoC4/CyLib.c **** *
2199:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2200:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2201:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2202:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2203:Generated_Source\PSoC4/CyLib.c **** *
2204:Generated_Source\PSoC4/CyLib.c **** * \return
2205:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2206:Generated_Source\PSoC4/CyLib.c **** *
2207:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2208:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2209:Generated_Source\PSoC4/CyLib.c **** {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 60


 1144              		.loc 1 2209 0
 1145              		.cfi_startproc
 1146 0000 80B5     		push	{r7, lr}
 1147              		.cfi_def_cfa_offset 8
 1148              		.cfi_offset 7, -8
 1149              		.cfi_offset 14, -4
 1150 0002 84B0     		sub	sp, sp, #16
 1151              		.cfi_def_cfa_offset 24
 1152 0004 00AF     		add	r7, sp, #0
 1153              		.cfi_def_cfa_register 7
 1154 0006 7860     		str	r0, [r7, #4]
2210:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2211:Generated_Source\PSoC4/CyLib.c **** 
2212:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 1155              		.loc 1 2212 0
 1156 0008 7B68     		ldr	r3, [r7, #4]
 1157 000a 1922     		mov	r2, #25
 1158 000c 1340     		and	r3, r2
 1159 000e 7B60     		str	r3, [r7, #4]
2213:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 1160              		.loc 1 2213 0
 1161 0010 064B     		ldr	r3, .L71
 1162 0012 1B68     		ldr	r3, [r3]
 1163 0014 1922     		mov	r2, #25
 1164 0016 1340     		and	r3, r2
 1165 0018 FB60     		str	r3, [r7, #12]
2214:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2215:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 1166              		.loc 1 2215 0
 1167 001a 044B     		ldr	r3, .L71
 1168 001c 7A68     		ldr	r2, [r7, #4]
 1169 001e 1A60     		str	r2, [r3]
2216:Generated_Source\PSoC4/CyLib.c **** 
2217:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 1170              		.loc 1 2217 0
 1171 0020 FB68     		ldr	r3, [r7, #12]
2218:Generated_Source\PSoC4/CyLib.c **** }
 1172              		.loc 1 2218 0
 1173 0022 181C     		mov	r0, r3
 1174 0024 BD46     		mov	sp, r7
 1175 0026 04B0     		add	sp, sp, #16
 1176              		@ sp needed
 1177 0028 80BD     		pop	{r7, pc}
 1178              	.L72:
 1179 002a C046     		.align	2
 1180              	.L71:
 1181 002c 00030B40 		.word	1074463488
 1182              		.cfi_endproc
 1183              	.LFE17:
 1184              		.size	CySysGetResetReason, .-CySysGetResetReason
 1185              		.section	.text.CyDisableInts,"ax",%progbits
 1186              		.align	2
 1187              		.global	CyDisableInts
 1188              		.code	16
 1189              		.thumb_func
 1190              		.type	CyDisableInts, %function
 1191              	CyDisableInts:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 61


 1192              	.LFB18:
2219:Generated_Source\PSoC4/CyLib.c **** 
2220:Generated_Source\PSoC4/CyLib.c **** 
2221:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2222:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2223:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2224:Generated_Source\PSoC4/CyLib.c **** *
2225:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2226:Generated_Source\PSoC4/CyLib.c **** *
2227:Generated_Source\PSoC4/CyLib.c **** * \return
2228:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2229:Generated_Source\PSoC4/CyLib.c **** *
2230:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2231:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2232:Generated_Source\PSoC4/CyLib.c **** {
 1193              		.loc 1 2232 0
 1194              		.cfi_startproc
 1195 0000 80B5     		push	{r7, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 0002 82B0     		sub	sp, sp, #8
 1200              		.cfi_def_cfa_offset 16
 1201 0004 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
2233:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2234:Generated_Source\PSoC4/CyLib.c **** 
2235:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2236:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 1203              		.loc 1 2236 0
 1204 0006 064B     		ldr	r3, .L75
 1205 0008 1B68     		ldr	r3, [r3]
 1206 000a 7B60     		str	r3, [r7, #4]
2237:Generated_Source\PSoC4/CyLib.c **** 
2238:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2239:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 1207              		.loc 1 2239 0
 1208 000c 044B     		ldr	r3, .L75
 1209 000e 0122     		mov	r2, #1
 1210 0010 5242     		neg	r2, r2
 1211 0012 1A60     		str	r2, [r3]
2240:Generated_Source\PSoC4/CyLib.c **** 
2241:Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1212              		.loc 1 2241 0
 1213 0014 7B68     		ldr	r3, [r7, #4]
2242:Generated_Source\PSoC4/CyLib.c **** }
 1214              		.loc 1 2242 0
 1215 0016 181C     		mov	r0, r3
 1216 0018 BD46     		mov	sp, r7
 1217 001a 02B0     		add	sp, sp, #8
 1218              		@ sp needed
 1219 001c 80BD     		pop	{r7, pc}
 1220              	.L76:
 1221 001e C046     		.align	2
 1222              	.L75:
 1223 0020 80E100E0 		.word	-536813184
 1224              		.cfi_endproc
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 62


 1225              	.LFE18:
 1226              		.size	CyDisableInts, .-CyDisableInts
 1227              		.section	.text.CyEnableInts,"ax",%progbits
 1228              		.align	2
 1229              		.global	CyEnableInts
 1230              		.code	16
 1231              		.thumb_func
 1232              		.type	CyEnableInts, %function
 1233              	CyEnableInts:
 1234              	.LFB19:
2243:Generated_Source\PSoC4/CyLib.c **** 
2244:Generated_Source\PSoC4/CyLib.c **** 
2245:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2246:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2247:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2248:Generated_Source\PSoC4/CyLib.c **** *
2249:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2250:Generated_Source\PSoC4/CyLib.c **** *
2251:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2252:Generated_Source\PSoC4/CyLib.c **** *
2253:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2254:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2255:Generated_Source\PSoC4/CyLib.c **** {
 1235              		.loc 1 2255 0
 1236              		.cfi_startproc
 1237 0000 80B5     		push	{r7, lr}
 1238              		.cfi_def_cfa_offset 8
 1239              		.cfi_offset 7, -8
 1240              		.cfi_offset 14, -4
 1241 0002 82B0     		sub	sp, sp, #8
 1242              		.cfi_def_cfa_offset 16
 1243 0004 00AF     		add	r7, sp, #0
 1244              		.cfi_def_cfa_register 7
 1245 0006 7860     		str	r0, [r7, #4]
2256:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1246              		.loc 1 2256 0
 1247 0008 024B     		ldr	r3, .L78
 1248 000a 7A68     		ldr	r2, [r7, #4]
 1249 000c 1A60     		str	r2, [r3]
2257:Generated_Source\PSoC4/CyLib.c **** }
 1250              		.loc 1 2257 0
 1251 000e BD46     		mov	sp, r7
 1252 0010 02B0     		add	sp, sp, #8
 1253              		@ sp needed
 1254 0012 80BD     		pop	{r7, pc}
 1255              	.L79:
 1256              		.align	2
 1257              	.L78:
 1258 0014 00E100E0 		.word	-536813312
 1259              		.cfi_endproc
 1260              	.LFE19:
 1261              		.size	CyEnableInts, .-CyEnableInts
 1262              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1263              		.align	2
 1264              		.global	CyIntSetSysVector
 1265              		.code	16
 1266              		.thumb_func
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 63


 1267              		.type	CyIntSetSysVector, %function
 1268              	CyIntSetSysVector:
 1269              	.LFB20:
2258:Generated_Source\PSoC4/CyLib.c **** 
2259:Generated_Source\PSoC4/CyLib.c **** 
2260:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2261:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2262:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2263:Generated_Source\PSoC4/CyLib.c **** *
2264:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2265:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2266:Generated_Source\PSoC4/CyLib.c **** *
2267:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2268:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2269:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2270:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2271:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2272:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2273:Generated_Source\PSoC4/CyLib.c **** *
2274:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2275:Generated_Source\PSoC4/CyLib.c **** *
2276:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2277:Generated_Source\PSoC4/CyLib.c **** *
2278:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2279:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2280:Generated_Source\PSoC4/CyLib.c **** {
 1270              		.loc 1 2280 0
 1271              		.cfi_startproc
 1272 0000 80B5     		push	{r7, lr}
 1273              		.cfi_def_cfa_offset 8
 1274              		.cfi_offset 7, -8
 1275              		.cfi_offset 14, -4
 1276 0002 84B0     		sub	sp, sp, #16
 1277              		.cfi_def_cfa_offset 24
 1278 0004 00AF     		add	r7, sp, #0
 1279              		.cfi_def_cfa_register 7
 1280 0006 021C     		mov	r2, r0
 1281 0008 3960     		str	r1, [r7]
 1282 000a FB1D     		add	r3, r7, #7
 1283 000c 1A70     		strb	r2, [r3]
2281:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2282:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1284              		.loc 1 2282 0
 1285 000e 8023     		mov	r3, #128
 1286 0010 9B05     		lsl	r3, r3, #22
 1287 0012 FB60     		str	r3, [r7, #12]
2283:Generated_Source\PSoC4/CyLib.c **** 
2284:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1288              		.loc 1 2284 0
 1289 0014 FB1D     		add	r3, r7, #7
 1290 0016 1B78     		ldrb	r3, [r3]
 1291 0018 0F2B     		cmp	r3, #15
 1292 001a 02D9     		bls	.L81
 1293              		.loc 1 2284 0 is_stmt 0 discriminator 1
 1294 001c 0020     		mov	r0, #0
 1295 001e FFF7FEFF 		bl	CyHalt
 1296              	.L81:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 64


2285:Generated_Source\PSoC4/CyLib.c **** 
2286:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2287:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1297              		.loc 1 2287 0 is_stmt 1
 1298 0022 FB1D     		add	r3, r7, #7
 1299 0024 1B78     		ldrb	r3, [r3]
 1300 0026 9B00     		lsl	r3, r3, #2
 1301 0028 FA68     		ldr	r2, [r7, #12]
 1302 002a D318     		add	r3, r2, r3
 1303 002c 1B68     		ldr	r3, [r3]
 1304 002e BB60     		str	r3, [r7, #8]
2288:Generated_Source\PSoC4/CyLib.c **** 
2289:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2290:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1305              		.loc 1 2290 0
 1306 0030 FB1D     		add	r3, r7, #7
 1307 0032 1B78     		ldrb	r3, [r3]
 1308 0034 9B00     		lsl	r3, r3, #2
 1309 0036 FA68     		ldr	r2, [r7, #12]
 1310 0038 D318     		add	r3, r2, r3
 1311 003a 3A68     		ldr	r2, [r7]
 1312 003c 1A60     		str	r2, [r3]
2291:Generated_Source\PSoC4/CyLib.c **** 
2292:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1313              		.loc 1 2292 0
 1314 003e BB68     		ldr	r3, [r7, #8]
2293:Generated_Source\PSoC4/CyLib.c **** }
 1315              		.loc 1 2293 0
 1316 0040 181C     		mov	r0, r3
 1317 0042 BD46     		mov	sp, r7
 1318 0044 04B0     		add	sp, sp, #16
 1319              		@ sp needed
 1320 0046 80BD     		pop	{r7, pc}
 1321              		.cfi_endproc
 1322              	.LFE20:
 1323              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1324              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1325              		.align	2
 1326              		.global	CyIntGetSysVector
 1327              		.code	16
 1328              		.thumb_func
 1329              		.type	CyIntGetSysVector, %function
 1330              	CyIntGetSysVector:
 1331              	.LFB21:
2294:Generated_Source\PSoC4/CyLib.c **** 
2295:Generated_Source\PSoC4/CyLib.c **** 
2296:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2297:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2298:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2299:Generated_Source\PSoC4/CyLib.c **** *
2300:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2301:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2302:Generated_Source\PSoC4/CyLib.c **** *
2303:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2304:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2305:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2306:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 65


2307:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2308:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2309:Generated_Source\PSoC4/CyLib.c **** *
2310:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2311:Generated_Source\PSoC4/CyLib.c **** *
2312:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2313:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2314:Generated_Source\PSoC4/CyLib.c **** {
 1332              		.loc 1 2314 0
 1333              		.cfi_startproc
 1334 0000 80B5     		push	{r7, lr}
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 7, -8
 1337              		.cfi_offset 14, -4
 1338 0002 84B0     		sub	sp, sp, #16
 1339              		.cfi_def_cfa_offset 24
 1340 0004 00AF     		add	r7, sp, #0
 1341              		.cfi_def_cfa_register 7
 1342 0006 021C     		mov	r2, r0
 1343 0008 FB1D     		add	r3, r7, #7
 1344 000a 1A70     		strb	r2, [r3]
2315:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1345              		.loc 1 2315 0
 1346 000c 8023     		mov	r3, #128
 1347 000e 9B05     		lsl	r3, r3, #22
 1348 0010 FB60     		str	r3, [r7, #12]
2316:Generated_Source\PSoC4/CyLib.c **** 
2317:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1349              		.loc 1 2317 0
 1350 0012 FB1D     		add	r3, r7, #7
 1351 0014 1B78     		ldrb	r3, [r3]
 1352 0016 0F2B     		cmp	r3, #15
 1353 0018 02D9     		bls	.L84
 1354              		.loc 1 2317 0 is_stmt 0 discriminator 1
 1355 001a 0020     		mov	r0, #0
 1356 001c FFF7FEFF 		bl	CyHalt
 1357              	.L84:
2318:Generated_Source\PSoC4/CyLib.c **** 
2319:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1358              		.loc 1 2319 0 is_stmt 1
 1359 0020 FB1D     		add	r3, r7, #7
 1360 0022 1B78     		ldrb	r3, [r3]
 1361 0024 9B00     		lsl	r3, r3, #2
 1362 0026 FA68     		ldr	r2, [r7, #12]
 1363 0028 D318     		add	r3, r2, r3
 1364 002a 1B68     		ldr	r3, [r3]
2320:Generated_Source\PSoC4/CyLib.c **** }
 1365              		.loc 1 2320 0
 1366 002c 181C     		mov	r0, r3
 1367 002e BD46     		mov	sp, r7
 1368 0030 04B0     		add	sp, sp, #16
 1369              		@ sp needed
 1370 0032 80BD     		pop	{r7, pc}
 1371              		.cfi_endproc
 1372              	.LFE21:
 1373              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1374              		.section	.text.CyIntSetVector,"ax",%progbits
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 66


 1375              		.align	2
 1376              		.global	CyIntSetVector
 1377              		.code	16
 1378              		.thumb_func
 1379              		.type	CyIntSetVector, %function
 1380              	CyIntSetVector:
 1381              	.LFB22:
2321:Generated_Source\PSoC4/CyLib.c **** 
2322:Generated_Source\PSoC4/CyLib.c **** 
2323:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2324:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2325:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2326:Generated_Source\PSoC4/CyLib.c **** *
2327:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2328:Generated_Source\PSoC4/CyLib.c **** *
2329:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2330:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2331:Generated_Source\PSoC4/CyLib.c **** *
2332:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2333:Generated_Source\PSoC4/CyLib.c **** *
2334:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2335:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2336:Generated_Source\PSoC4/CyLib.c **** {
 1382              		.loc 1 2336 0
 1383              		.cfi_startproc
 1384 0000 80B5     		push	{r7, lr}
 1385              		.cfi_def_cfa_offset 8
 1386              		.cfi_offset 7, -8
 1387              		.cfi_offset 14, -4
 1388 0002 84B0     		sub	sp, sp, #16
 1389              		.cfi_def_cfa_offset 24
 1390 0004 00AF     		add	r7, sp, #0
 1391              		.cfi_def_cfa_register 7
 1392 0006 021C     		mov	r2, r0
 1393 0008 3960     		str	r1, [r7]
 1394 000a FB1D     		add	r3, r7, #7
 1395 000c 1A70     		strb	r2, [r3]
2337:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2338:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1396              		.loc 1 2338 0
 1397 000e 8023     		mov	r3, #128
 1398 0010 9B05     		lsl	r3, r3, #22
 1399 0012 FB60     		str	r3, [r7, #12]
2339:Generated_Source\PSoC4/CyLib.c **** 
2340:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1400              		.loc 1 2340 0
 1401 0014 FB1D     		add	r3, r7, #7
 1402 0016 1B78     		ldrb	r3, [r3]
 1403 0018 1F2B     		cmp	r3, #31
 1404 001a 02D9     		bls	.L87
 1405              		.loc 1 2340 0 is_stmt 0 discriminator 1
 1406 001c 0020     		mov	r0, #0
 1407 001e FFF7FEFF 		bl	CyHalt
 1408              	.L87:
2341:Generated_Source\PSoC4/CyLib.c **** 
2342:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2343:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 67


 1409              		.loc 1 2343 0 is_stmt 1
 1410 0022 FB1D     		add	r3, r7, #7
 1411 0024 1B78     		ldrb	r3, [r3]
 1412 0026 1033     		add	r3, r3, #16
 1413 0028 9B00     		lsl	r3, r3, #2
 1414 002a FA68     		ldr	r2, [r7, #12]
 1415 002c D318     		add	r3, r2, r3
 1416 002e 1B68     		ldr	r3, [r3]
 1417 0030 BB60     		str	r3, [r7, #8]
2344:Generated_Source\PSoC4/CyLib.c **** 
2345:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2346:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1418              		.loc 1 2346 0
 1419 0032 FB1D     		add	r3, r7, #7
 1420 0034 1B78     		ldrb	r3, [r3]
 1421 0036 1033     		add	r3, r3, #16
 1422 0038 9B00     		lsl	r3, r3, #2
 1423 003a FA68     		ldr	r2, [r7, #12]
 1424 003c D318     		add	r3, r2, r3
 1425 003e 3A68     		ldr	r2, [r7]
 1426 0040 1A60     		str	r2, [r3]
2347:Generated_Source\PSoC4/CyLib.c **** 
2348:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1427              		.loc 1 2348 0
 1428 0042 BB68     		ldr	r3, [r7, #8]
2349:Generated_Source\PSoC4/CyLib.c **** }
 1429              		.loc 1 2349 0
 1430 0044 181C     		mov	r0, r3
 1431 0046 BD46     		mov	sp, r7
 1432 0048 04B0     		add	sp, sp, #16
 1433              		@ sp needed
 1434 004a 80BD     		pop	{r7, pc}
 1435              		.cfi_endproc
 1436              	.LFE22:
 1437              		.size	CyIntSetVector, .-CyIntSetVector
 1438              		.section	.text.CyIntGetVector,"ax",%progbits
 1439              		.align	2
 1440              		.global	CyIntGetVector
 1441              		.code	16
 1442              		.thumb_func
 1443              		.type	CyIntGetVector, %function
 1444              	CyIntGetVector:
 1445              	.LFB23:
2350:Generated_Source\PSoC4/CyLib.c **** 
2351:Generated_Source\PSoC4/CyLib.c **** 
2352:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2353:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2354:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2355:Generated_Source\PSoC4/CyLib.c **** *
2356:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2357:Generated_Source\PSoC4/CyLib.c **** *
2358:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2359:Generated_Source\PSoC4/CyLib.c **** *
2360:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2361:Generated_Source\PSoC4/CyLib.c **** *
2362:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2363:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 68


2364:Generated_Source\PSoC4/CyLib.c **** {
 1446              		.loc 1 2364 0
 1447              		.cfi_startproc
 1448 0000 80B5     		push	{r7, lr}
 1449              		.cfi_def_cfa_offset 8
 1450              		.cfi_offset 7, -8
 1451              		.cfi_offset 14, -4
 1452 0002 84B0     		sub	sp, sp, #16
 1453              		.cfi_def_cfa_offset 24
 1454 0004 00AF     		add	r7, sp, #0
 1455              		.cfi_def_cfa_register 7
 1456 0006 021C     		mov	r2, r0
 1457 0008 FB1D     		add	r3, r7, #7
 1458 000a 1A70     		strb	r2, [r3]
2365:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1459              		.loc 1 2365 0
 1460 000c 8023     		mov	r3, #128
 1461 000e 9B05     		lsl	r3, r3, #22
 1462 0010 FB60     		str	r3, [r7, #12]
2366:Generated_Source\PSoC4/CyLib.c **** 
2367:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1463              		.loc 1 2367 0
 1464 0012 FB1D     		add	r3, r7, #7
 1465 0014 1B78     		ldrb	r3, [r3]
 1466 0016 1F2B     		cmp	r3, #31
 1467 0018 02D9     		bls	.L90
 1468              		.loc 1 2367 0 is_stmt 0 discriminator 1
 1469 001a 0020     		mov	r0, #0
 1470 001c FFF7FEFF 		bl	CyHalt
 1471              	.L90:
2368:Generated_Source\PSoC4/CyLib.c **** 
2369:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1472              		.loc 1 2369 0 is_stmt 1
 1473 0020 FB1D     		add	r3, r7, #7
 1474 0022 1B78     		ldrb	r3, [r3]
 1475 0024 1033     		add	r3, r3, #16
 1476 0026 9B00     		lsl	r3, r3, #2
 1477 0028 FA68     		ldr	r2, [r7, #12]
 1478 002a D318     		add	r3, r2, r3
 1479 002c 1B68     		ldr	r3, [r3]
2370:Generated_Source\PSoC4/CyLib.c **** }
 1480              		.loc 1 2370 0
 1481 002e 181C     		mov	r0, r3
 1482 0030 BD46     		mov	sp, r7
 1483 0032 04B0     		add	sp, sp, #16
 1484              		@ sp needed
 1485 0034 80BD     		pop	{r7, pc}
 1486              		.cfi_endproc
 1487              	.LFE23:
 1488              		.size	CyIntGetVector, .-CyIntGetVector
 1489              		.section	.text.CyIntSetPriority,"ax",%progbits
 1490              		.align	2
 1491              		.global	CyIntSetPriority
 1492              		.code	16
 1493              		.thumb_func
 1494              		.type	CyIntSetPriority, %function
 1495              	CyIntSetPriority:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 69


 1496              	.LFB24:
2371:Generated_Source\PSoC4/CyLib.c **** 
2372:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2373:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2374:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2375:Generated_Source\PSoC4/CyLib.c **** *
2376:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2377:Generated_Source\PSoC4/CyLib.c **** *
2378:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2379:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2380:Generated_Source\PSoC4/CyLib.c **** *
2381:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2382:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2383:Generated_Source\PSoC4/CyLib.c **** {
 1497              		.loc 1 2383 0
 1498              		.cfi_startproc
 1499 0000 90B5     		push	{r4, r7, lr}
 1500              		.cfi_def_cfa_offset 12
 1501              		.cfi_offset 4, -12
 1502              		.cfi_offset 7, -8
 1503              		.cfi_offset 14, -4
 1504 0002 87B0     		sub	sp, sp, #28
 1505              		.cfi_def_cfa_offset 40
 1506 0004 00AF     		add	r7, sp, #0
 1507              		.cfi_def_cfa_register 7
 1508 0006 021C     		mov	r2, r0
 1509 0008 FB1D     		add	r3, r7, #7
 1510 000a 1A70     		strb	r2, [r3]
 1511 000c BB1D     		add	r3, r7, #6
 1512 000e 0A1C     		add	r2, r1, #0
 1513 0010 1A70     		strb	r2, [r3]
2384:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2385:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2386:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2387:Generated_Source\PSoC4/CyLib.c **** 
2388:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1514              		.loc 1 2388 0
 1515 0012 BB1D     		add	r3, r7, #6
 1516 0014 1B78     		ldrb	r3, [r3]
 1517 0016 032B     		cmp	r3, #3
 1518 0018 02D9     		bls	.L93
 1519              		.loc 1 2388 0 is_stmt 0 discriminator 1
 1520 001a 0020     		mov	r0, #0
 1521 001c FFF7FEFF 		bl	CyHalt
 1522              	.L93:
2389:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1523              		.loc 1 2389 0 is_stmt 1
 1524 0020 FB1D     		add	r3, r7, #7
 1525 0022 1B78     		ldrb	r3, [r3]
 1526 0024 1F2B     		cmp	r3, #31
 1527 0026 02D9     		bls	.L94
 1528              		.loc 1 2389 0 is_stmt 0 discriminator 1
 1529 0028 0020     		mov	r0, #0
 1530 002a FFF7FEFF 		bl	CyHalt
 1531              	.L94:
2390:Generated_Source\PSoC4/CyLib.c **** 
2391:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 70


 1532              		.loc 1 2391 0 is_stmt 1
 1533 002e FB1D     		add	r3, r7, #7
 1534 0030 1B78     		ldrb	r3, [r3]
 1535 0032 0322     		mov	r2, #3
 1536 0034 1340     		and	r3, r2
 1537 0036 DB00     		lsl	r3, r3, #3
 1538 0038 0633     		add	r3, r3, #6
 1539 003a 7B61     		str	r3, [r7, #20]
2392:Generated_Source\PSoC4/CyLib.c **** 
2393:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1540              		.loc 1 2393 0
 1541 003c 1323     		mov	r3, #19
 1542 003e FC18     		add	r4, r7, r3
 1543 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1544 0044 031C     		mov	r3, r0
 1545 0046 2370     		strb	r3, [r4]
2394:Generated_Source\PSoC4/CyLib.c **** 
2395:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1546              		.loc 1 2395 0
 1547 0048 FB1D     		add	r3, r7, #7
 1548 004a 1B78     		ldrb	r3, [r3]
 1549 004c 9B08     		lsr	r3, r3, #2
 1550 004e DBB2     		uxtb	r3, r3
 1551 0050 9B00     		lsl	r3, r3, #2
 1552 0052 144A     		ldr	r2, .L95
 1553 0054 9446     		mov	ip, r2
 1554 0056 6344     		add	r3, r3, ip
 1555 0058 1B68     		ldr	r3, [r3]
 1556 005a FB60     		str	r3, [r7, #12]
2396:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1557              		.loc 1 2396 0
 1558 005c 7B69     		ldr	r3, [r7, #20]
 1559 005e 0322     		mov	r2, #3
 1560 0060 9A40     		lsl	r2, r2, r3
 1561 0062 131C     		mov	r3, r2
 1562 0064 DA43     		mvn	r2, r3
 1563 0066 FB68     		ldr	r3, [r7, #12]
 1564 0068 1340     		and	r3, r2
 1565 006a FB60     		str	r3, [r7, #12]
2397:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 1566              		.loc 1 2397 0
 1567 006c BB1D     		add	r3, r7, #6
 1568 006e 1A78     		ldrb	r2, [r3]
 1569 0070 7B69     		ldr	r3, [r7, #20]
 1570 0072 9A40     		lsl	r2, r2, r3
 1571 0074 131C     		mov	r3, r2
 1572 0076 FA68     		ldr	r2, [r7, #12]
 1573 0078 1343     		orr	r3, r2
 1574 007a FB60     		str	r3, [r7, #12]
2398:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 1575              		.loc 1 2398 0
 1576 007c FB1D     		add	r3, r7, #7
 1577 007e 1B78     		ldrb	r3, [r3]
 1578 0080 9B08     		lsr	r3, r3, #2
 1579 0082 DBB2     		uxtb	r3, r3
 1580 0084 9B00     		lsl	r3, r3, #2
 1581 0086 074A     		ldr	r2, .L95
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 71


 1582 0088 9446     		mov	ip, r2
 1583 008a 6344     		add	r3, r3, ip
 1584 008c FA68     		ldr	r2, [r7, #12]
 1585 008e 1A60     		str	r2, [r3]
2399:Generated_Source\PSoC4/CyLib.c **** 
2400:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1586              		.loc 1 2400 0
 1587 0090 1323     		mov	r3, #19
 1588 0092 FB18     		add	r3, r7, r3
 1589 0094 1B78     		ldrb	r3, [r3]
 1590 0096 181C     		mov	r0, r3
 1591 0098 FFF7FEFF 		bl	CyExitCriticalSection
2401:Generated_Source\PSoC4/CyLib.c **** }
 1592              		.loc 1 2401 0
 1593 009c BD46     		mov	sp, r7
 1594 009e 07B0     		add	sp, sp, #28
 1595              		@ sp needed
 1596 00a0 90BD     		pop	{r4, r7, pc}
 1597              	.L96:
 1598 00a2 C046     		.align	2
 1599              	.L95:
 1600 00a4 00E400E0 		.word	-536812544
 1601              		.cfi_endproc
 1602              	.LFE24:
 1603              		.size	CyIntSetPriority, .-CyIntSetPriority
 1604              		.section	.text.CyIntGetPriority,"ax",%progbits
 1605              		.align	2
 1606              		.global	CyIntGetPriority
 1607              		.code	16
 1608              		.thumb_func
 1609              		.type	CyIntGetPriority, %function
 1610              	CyIntGetPriority:
 1611              	.LFB25:
2402:Generated_Source\PSoC4/CyLib.c **** 
2403:Generated_Source\PSoC4/CyLib.c **** 
2404:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2405:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2406:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2407:Generated_Source\PSoC4/CyLib.c **** *
2408:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2409:Generated_Source\PSoC4/CyLib.c **** *
2410:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2411:Generated_Source\PSoC4/CyLib.c **** *
2412:Generated_Source\PSoC4/CyLib.c **** * \return
2413:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2414:Generated_Source\PSoC4/CyLib.c **** *
2415:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2416:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2417:Generated_Source\PSoC4/CyLib.c **** {
 1612              		.loc 1 2417 0
 1613              		.cfi_startproc
 1614 0000 80B5     		push	{r7, lr}
 1615              		.cfi_def_cfa_offset 8
 1616              		.cfi_offset 7, -8
 1617              		.cfi_offset 14, -4
 1618 0002 84B0     		sub	sp, sp, #16
 1619              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 72


 1620 0004 00AF     		add	r7, sp, #0
 1621              		.cfi_def_cfa_register 7
 1622 0006 021C     		mov	r2, r0
 1623 0008 FB1D     		add	r3, r7, #7
 1624 000a 1A70     		strb	r2, [r3]
2418:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2419:Generated_Source\PSoC4/CyLib.c **** 
2420:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1625              		.loc 1 2420 0
 1626 000c FB1D     		add	r3, r7, #7
 1627 000e 1B78     		ldrb	r3, [r3]
 1628 0010 1F2B     		cmp	r3, #31
 1629 0012 02D9     		bls	.L98
 1630              		.loc 1 2420 0 is_stmt 0 discriminator 1
 1631 0014 0020     		mov	r0, #0
 1632 0016 FFF7FEFF 		bl	CyHalt
 1633              	.L98:
2421:Generated_Source\PSoC4/CyLib.c **** 
2422:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1634              		.loc 1 2422 0 is_stmt 1
 1635 001a FB1D     		add	r3, r7, #7
 1636 001c 1B78     		ldrb	r3, [r3]
 1637 001e 9B08     		lsr	r3, r3, #2
 1638 0020 DBB2     		uxtb	r3, r3
 1639 0022 9B00     		lsl	r3, r3, #2
 1640 0024 0C4A     		ldr	r2, .L100
 1641 0026 9446     		mov	ip, r2
 1642 0028 6344     		add	r3, r3, ip
 1643 002a 1B68     		ldr	r3, [r3]
 1644 002c FA1D     		add	r2, r7, #7
 1645 002e 1278     		ldrb	r2, [r2]
 1646 0030 0321     		mov	r1, #3
 1647 0032 0A40     		and	r2, r1
 1648 0034 D200     		lsl	r2, r2, #3
 1649 0036 0632     		add	r2, r2, #6
 1650 0038 D340     		lsr	r3, r3, r2
 1651 003a 1A1C     		mov	r2, r3
 1652 003c 0F23     		mov	r3, #15
 1653 003e FB18     		add	r3, r7, r3
 1654 0040 1A70     		strb	r2, [r3]
2423:Generated_Source\PSoC4/CyLib.c **** 
2424:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1655              		.loc 1 2424 0
 1656 0042 0F23     		mov	r3, #15
 1657 0044 FB18     		add	r3, r7, r3
 1658 0046 1B78     		ldrb	r3, [r3]
 1659 0048 0322     		mov	r2, #3
 1660 004a 1340     		and	r3, r2
 1661 004c DBB2     		uxtb	r3, r3
2425:Generated_Source\PSoC4/CyLib.c **** }
 1662              		.loc 1 2425 0
 1663 004e 181C     		mov	r0, r3
 1664 0050 BD46     		mov	sp, r7
 1665 0052 04B0     		add	sp, sp, #16
 1666              		@ sp needed
 1667 0054 80BD     		pop	{r7, pc}
 1668              	.L101:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 73


 1669 0056 C046     		.align	2
 1670              	.L100:
 1671 0058 00E400E0 		.word	-536812544
 1672              		.cfi_endproc
 1673              	.LFE25:
 1674              		.size	CyIntGetPriority, .-CyIntGetPriority
 1675              		.section	.text.CyIntEnable,"ax",%progbits
 1676              		.align	2
 1677              		.global	CyIntEnable
 1678              		.code	16
 1679              		.thumb_func
 1680              		.type	CyIntEnable, %function
 1681              	CyIntEnable:
 1682              	.LFB26:
2426:Generated_Source\PSoC4/CyLib.c **** 
2427:Generated_Source\PSoC4/CyLib.c **** 
2428:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2429:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2430:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2431:Generated_Source\PSoC4/CyLib.c **** *
2432:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2433:Generated_Source\PSoC4/CyLib.c **** *
2434:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2435:Generated_Source\PSoC4/CyLib.c **** *
2436:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2437:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2438:Generated_Source\PSoC4/CyLib.c **** {
 1683              		.loc 1 2438 0
 1684              		.cfi_startproc
 1685 0000 80B5     		push	{r7, lr}
 1686              		.cfi_def_cfa_offset 8
 1687              		.cfi_offset 7, -8
 1688              		.cfi_offset 14, -4
 1689 0002 82B0     		sub	sp, sp, #8
 1690              		.cfi_def_cfa_offset 16
 1691 0004 00AF     		add	r7, sp, #0
 1692              		.cfi_def_cfa_register 7
 1693 0006 021C     		mov	r2, r0
 1694 0008 FB1D     		add	r3, r7, #7
 1695 000a 1A70     		strb	r2, [r3]
2439:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1696              		.loc 1 2439 0
 1697 000c 054B     		ldr	r3, .L103
 1698 000e FA1D     		add	r2, r7, #7
 1699 0010 1278     		ldrb	r2, [r2]
 1700 0012 1F21     		mov	r1, #31
 1701 0014 0A40     		and	r2, r1
 1702 0016 0121     		mov	r1, #1
 1703 0018 9140     		lsl	r1, r1, r2
 1704 001a 0A1C     		mov	r2, r1
 1705 001c 1A60     		str	r2, [r3]
2440:Generated_Source\PSoC4/CyLib.c **** }
 1706              		.loc 1 2440 0
 1707 001e BD46     		mov	sp, r7
 1708 0020 02B0     		add	sp, sp, #8
 1709              		@ sp needed
 1710 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 74


 1711              	.L104:
 1712              		.align	2
 1713              	.L103:
 1714 0024 00E100E0 		.word	-536813312
 1715              		.cfi_endproc
 1716              	.LFE26:
 1717              		.size	CyIntEnable, .-CyIntEnable
 1718              		.section	.text.CyIntGetState,"ax",%progbits
 1719              		.align	2
 1720              		.global	CyIntGetState
 1721              		.code	16
 1722              		.thumb_func
 1723              		.type	CyIntGetState, %function
 1724              	CyIntGetState:
 1725              	.LFB27:
2441:Generated_Source\PSoC4/CyLib.c **** 
2442:Generated_Source\PSoC4/CyLib.c **** 
2443:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2444:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2445:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2446:Generated_Source\PSoC4/CyLib.c **** *
2447:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2448:Generated_Source\PSoC4/CyLib.c **** *
2449:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2450:Generated_Source\PSoC4/CyLib.c **** *
2451:Generated_Source\PSoC4/CyLib.c **** * \return
2452:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2453:Generated_Source\PSoC4/CyLib.c **** *
2454:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2455:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2456:Generated_Source\PSoC4/CyLib.c **** {
 1726              		.loc 1 2456 0
 1727              		.cfi_startproc
 1728 0000 80B5     		push	{r7, lr}
 1729              		.cfi_def_cfa_offset 8
 1730              		.cfi_offset 7, -8
 1731              		.cfi_offset 14, -4
 1732 0002 82B0     		sub	sp, sp, #8
 1733              		.cfi_def_cfa_offset 16
 1734 0004 00AF     		add	r7, sp, #0
 1735              		.cfi_def_cfa_register 7
 1736 0006 021C     		mov	r2, r0
 1737 0008 FB1D     		add	r3, r7, #7
 1738 000a 1A70     		strb	r2, [r3]
2457:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2458:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1739              		.loc 1 2458 0
 1740 000c 074B     		ldr	r3, .L107
 1741 000e 1A68     		ldr	r2, [r3]
 1742 0010 FB1D     		add	r3, r7, #7
 1743 0012 1B78     		ldrb	r3, [r3]
 1744 0014 1F21     		mov	r1, #31
 1745 0016 0B40     		and	r3, r1
 1746 0018 DA40     		lsr	r2, r2, r3
 1747 001a 131C     		mov	r3, r2
 1748 001c DBB2     		uxtb	r3, r3
 1749 001e 0122     		mov	r2, #1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 75


 1750 0020 1340     		and	r3, r2
 1751 0022 DBB2     		uxtb	r3, r3
2459:Generated_Source\PSoC4/CyLib.c **** }
 1752              		.loc 1 2459 0
 1753 0024 181C     		mov	r0, r3
 1754 0026 BD46     		mov	sp, r7
 1755 0028 02B0     		add	sp, sp, #8
 1756              		@ sp needed
 1757 002a 80BD     		pop	{r7, pc}
 1758              	.L108:
 1759              		.align	2
 1760              	.L107:
 1761 002c 00E100E0 		.word	-536813312
 1762              		.cfi_endproc
 1763              	.LFE27:
 1764              		.size	CyIntGetState, .-CyIntGetState
 1765              		.section	.text.CyIntDisable,"ax",%progbits
 1766              		.align	2
 1767              		.global	CyIntDisable
 1768              		.code	16
 1769              		.thumb_func
 1770              		.type	CyIntDisable, %function
 1771              	CyIntDisable:
 1772              	.LFB28:
2460:Generated_Source\PSoC4/CyLib.c **** 
2461:Generated_Source\PSoC4/CyLib.c **** 
2462:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2463:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2464:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2465:Generated_Source\PSoC4/CyLib.c **** *
2466:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2467:Generated_Source\PSoC4/CyLib.c **** *
2468:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2469:Generated_Source\PSoC4/CyLib.c **** *
2470:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2471:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2472:Generated_Source\PSoC4/CyLib.c **** {
 1773              		.loc 1 2472 0
 1774              		.cfi_startproc
 1775 0000 80B5     		push	{r7, lr}
 1776              		.cfi_def_cfa_offset 8
 1777              		.cfi_offset 7, -8
 1778              		.cfi_offset 14, -4
 1779 0002 82B0     		sub	sp, sp, #8
 1780              		.cfi_def_cfa_offset 16
 1781 0004 00AF     		add	r7, sp, #0
 1782              		.cfi_def_cfa_register 7
 1783 0006 021C     		mov	r2, r0
 1784 0008 FB1D     		add	r3, r7, #7
 1785 000a 1A70     		strb	r2, [r3]
2473:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1786              		.loc 1 2473 0
 1787 000c 054B     		ldr	r3, .L110
 1788 000e FA1D     		add	r2, r7, #7
 1789 0010 1278     		ldrb	r2, [r2]
 1790 0012 1F21     		mov	r1, #31
 1791 0014 0A40     		and	r2, r1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 76


 1792 0016 0121     		mov	r1, #1
 1793 0018 9140     		lsl	r1, r1, r2
 1794 001a 0A1C     		mov	r2, r1
 1795 001c 1A60     		str	r2, [r3]
2474:Generated_Source\PSoC4/CyLib.c **** }
 1796              		.loc 1 2474 0
 1797 001e BD46     		mov	sp, r7
 1798 0020 02B0     		add	sp, sp, #8
 1799              		@ sp needed
 1800 0022 80BD     		pop	{r7, pc}
 1801              	.L111:
 1802              		.align	2
 1803              	.L110:
 1804 0024 80E100E0 		.word	-536813184
 1805              		.cfi_endproc
 1806              	.LFE28:
 1807              		.size	CyIntDisable, .-CyIntDisable
 1808              		.section	.text.CyIntSetPending,"ax",%progbits
 1809              		.align	2
 1810              		.global	CyIntSetPending
 1811              		.code	16
 1812              		.thumb_func
 1813              		.type	CyIntSetPending, %function
 1814              	CyIntSetPending:
 1815              	.LFB29:
2475:Generated_Source\PSoC4/CyLib.c **** 
2476:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2477:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2478:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2479:Generated_Source\PSoC4/CyLib.c **** *
2480:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2481:Generated_Source\PSoC4/CyLib.c **** *
2482:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2483:Generated_Source\PSoC4/CyLib.c **** *
2484:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2485:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2486:Generated_Source\PSoC4/CyLib.c **** {
 1816              		.loc 1 2486 0
 1817              		.cfi_startproc
 1818 0000 80B5     		push	{r7, lr}
 1819              		.cfi_def_cfa_offset 8
 1820              		.cfi_offset 7, -8
 1821              		.cfi_offset 14, -4
 1822 0002 82B0     		sub	sp, sp, #8
 1823              		.cfi_def_cfa_offset 16
 1824 0004 00AF     		add	r7, sp, #0
 1825              		.cfi_def_cfa_register 7
 1826 0006 021C     		mov	r2, r0
 1827 0008 FB1D     		add	r3, r7, #7
 1828 000a 1A70     		strb	r2, [r3]
2487:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1829              		.loc 1 2487 0
 1830 000c 054B     		ldr	r3, .L113
 1831 000e FA1D     		add	r2, r7, #7
 1832 0010 1278     		ldrb	r2, [r2]
 1833 0012 1F21     		mov	r1, #31
 1834 0014 0A40     		and	r2, r1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 77


 1835 0016 0121     		mov	r1, #1
 1836 0018 9140     		lsl	r1, r1, r2
 1837 001a 0A1C     		mov	r2, r1
 1838 001c 1A60     		str	r2, [r3]
2488:Generated_Source\PSoC4/CyLib.c **** }
 1839              		.loc 1 2488 0
 1840 001e BD46     		mov	sp, r7
 1841 0020 02B0     		add	sp, sp, #8
 1842              		@ sp needed
 1843 0022 80BD     		pop	{r7, pc}
 1844              	.L114:
 1845              		.align	2
 1846              	.L113:
 1847 0024 00E200E0 		.word	-536813056
 1848              		.cfi_endproc
 1849              	.LFE29:
 1850              		.size	CyIntSetPending, .-CyIntSetPending
 1851              		.section	.text.CyIntClearPending,"ax",%progbits
 1852              		.align	2
 1853              		.global	CyIntClearPending
 1854              		.code	16
 1855              		.thumb_func
 1856              		.type	CyIntClearPending, %function
 1857              	CyIntClearPending:
 1858              	.LFB30:
2489:Generated_Source\PSoC4/CyLib.c **** 
2490:Generated_Source\PSoC4/CyLib.c **** 
2491:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2492:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2493:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2494:Generated_Source\PSoC4/CyLib.c **** *
2495:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2496:Generated_Source\PSoC4/CyLib.c **** *
2497:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2498:Generated_Source\PSoC4/CyLib.c **** *
2499:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2500:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2501:Generated_Source\PSoC4/CyLib.c **** {
 1859              		.loc 1 2501 0
 1860              		.cfi_startproc
 1861 0000 80B5     		push	{r7, lr}
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 7, -8
 1864              		.cfi_offset 14, -4
 1865 0002 82B0     		sub	sp, sp, #8
 1866              		.cfi_def_cfa_offset 16
 1867 0004 00AF     		add	r7, sp, #0
 1868              		.cfi_def_cfa_register 7
 1869 0006 021C     		mov	r2, r0
 1870 0008 FB1D     		add	r3, r7, #7
 1871 000a 1A70     		strb	r2, [r3]
2502:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1872              		.loc 1 2502 0
 1873 000c 054B     		ldr	r3, .L116
 1874 000e FA1D     		add	r2, r7, #7
 1875 0010 1278     		ldrb	r2, [r2]
 1876 0012 1F21     		mov	r1, #31
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 78


 1877 0014 0A40     		and	r2, r1
 1878 0016 0121     		mov	r1, #1
 1879 0018 9140     		lsl	r1, r1, r2
 1880 001a 0A1C     		mov	r2, r1
 1881 001c 1A60     		str	r2, [r3]
2503:Generated_Source\PSoC4/CyLib.c **** }
 1882              		.loc 1 2503 0
 1883 001e BD46     		mov	sp, r7
 1884 0020 02B0     		add	sp, sp, #8
 1885              		@ sp needed
 1886 0022 80BD     		pop	{r7, pc}
 1887              	.L117:
 1888              		.align	2
 1889              	.L116:
 1890 0024 80E200E0 		.word	-536812928
 1891              		.cfi_endproc
 1892              	.LFE30:
 1893              		.size	CyIntClearPending, .-CyIntClearPending
 1894              		.section	.text.CyHalt,"ax",%progbits
 1895              		.align	2
 1896              		.global	CyHalt
 1897              		.code	16
 1898              		.thumb_func
 1899              		.type	CyHalt, %function
 1900              	CyHalt:
 1901              	.LFB31:
2504:Generated_Source\PSoC4/CyLib.c **** 
2505:Generated_Source\PSoC4/CyLib.c **** 
2506:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2507:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2508:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2509:Generated_Source\PSoC4/CyLib.c **** *
2510:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2511:Generated_Source\PSoC4/CyLib.c **** *
2512:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2513:Generated_Source\PSoC4/CyLib.c **** *
2514:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2515:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2516:Generated_Source\PSoC4/CyLib.c **** {
 1902              		.loc 1 2516 0
 1903              		.cfi_startproc
 1904 0000 80B5     		push	{r7, lr}
 1905              		.cfi_def_cfa_offset 8
 1906              		.cfi_offset 7, -8
 1907              		.cfi_offset 14, -4
 1908 0002 82B0     		sub	sp, sp, #8
 1909              		.cfi_def_cfa_offset 16
 1910 0004 00AF     		add	r7, sp, #0
 1911              		.cfi_def_cfa_register 7
 1912 0006 021C     		mov	r2, r0
 1913 0008 FB1D     		add	r3, r7, #7
 1914 000a 1A70     		strb	r2, [r3]
2517:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2518:Generated_Source\PSoC4/CyLib.c ****     {
2519:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2520:Generated_Source\PSoC4/CyLib.c ****     }
2521:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 79


2522:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2523:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2524:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2525:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1915              		.loc 1 2525 0
 1916              	@ 2525 "Generated_Source\PSoC4\CyLib.c" 1
 1917 000c 01BE     		    bkpt    1
 1918              	@ 0 "" 2
2526:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2527:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2528:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2529:Generated_Source\PSoC4/CyLib.c **** }
 1919              		.loc 1 2529 0
 1920              		.code	16
 1921 000e BD46     		mov	sp, r7
 1922 0010 02B0     		add	sp, sp, #8
 1923              		@ sp needed
 1924 0012 80BD     		pop	{r7, pc}
 1925              		.cfi_endproc
 1926              	.LFE31:
 1927              		.size	CyHalt, .-CyHalt
 1928              		.section	.text.CySoftwareReset,"ax",%progbits
 1929              		.align	2
 1930              		.global	CySoftwareReset
 1931              		.code	16
 1932              		.thumb_func
 1933              		.type	CySoftwareReset, %function
 1934              	CySoftwareReset:
 1935              	.LFB32:
2530:Generated_Source\PSoC4/CyLib.c **** 
2531:Generated_Source\PSoC4/CyLib.c **** 
2532:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2533:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2534:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2535:Generated_Source\PSoC4/CyLib.c **** *
2536:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2537:Generated_Source\PSoC4/CyLib.c **** *
2538:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2539:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2540:Generated_Source\PSoC4/CyLib.c **** {
 1936              		.loc 1 2540 0
 1937              		.cfi_startproc
 1938 0000 80B5     		push	{r7, lr}
 1939              		.cfi_def_cfa_offset 8
 1940              		.cfi_offset 7, -8
 1941              		.cfi_offset 14, -4
 1942 0002 00AF     		add	r7, sp, #0
 1943              		.cfi_def_cfa_register 7
2541:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2542:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
2543:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2544:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2545:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1944              		.loc 1 2545 0
 1945 0004 044B     		ldr	r3, .L120
 1946 0006 044A     		ldr	r2, .L120
 1947 0008 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 80


 1948 000a 1204     		lsl	r2, r2, #16
 1949 000c 120C     		lsr	r2, r2, #16
2546:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1950              		.loc 1 2546 0
 1951 000e 0349     		ldr	r1, .L120+4
 1952 0010 0A43     		orr	r2, r1
2545:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1953              		.loc 1 2545 0
 1954 0012 1A60     		str	r2, [r3]
2547:Generated_Source\PSoC4/CyLib.c **** }
 1955              		.loc 1 2547 0
 1956 0014 BD46     		mov	sp, r7
 1957              		@ sp needed
 1958 0016 80BD     		pop	{r7, pc}
 1959              	.L121:
 1960              		.align	2
 1961              	.L120:
 1962 0018 0CED00E0 		.word	-536810228
 1963 001c 0400FA05 		.word	100270084
 1964              		.cfi_endproc
 1965              	.LFE32:
 1966              		.size	CySoftwareReset, .-CySoftwareReset
 1967              		.section	.text.CyDelay,"ax",%progbits
 1968              		.align	2
 1969              		.global	CyDelay
 1970              		.code	16
 1971              		.thumb_func
 1972              		.type	CyDelay, %function
 1973              	CyDelay:
 1974              	.LFB33:
2548:Generated_Source\PSoC4/CyLib.c **** 
2549:Generated_Source\PSoC4/CyLib.c **** 
2550:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2551:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2552:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2553:Generated_Source\PSoC4/CyLib.c **** *
2554:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2555:Generated_Source\PSoC4/CyLib.c **** *
2556:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2557:Generated_Source\PSoC4/CyLib.c **** *
2558:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2559:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2560:Generated_Source\PSoC4/CyLib.c **** {
 1975              		.loc 1 2560 0
 1976              		.cfi_startproc
 1977 0000 80B5     		push	{r7, lr}
 1978              		.cfi_def_cfa_offset 8
 1979              		.cfi_offset 7, -8
 1980              		.cfi_offset 14, -4
 1981 0002 82B0     		sub	sp, sp, #8
 1982              		.cfi_def_cfa_offset 16
 1983 0004 00AF     		add	r7, sp, #0
 1984              		.cfi_def_cfa_register 7
 1985 0006 7860     		str	r0, [r7, #4]
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1986              		.loc 1 2561 0
 1987 0008 09E0     		b	.L123
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 81


 1988              	.L124:
2562:Generated_Source\PSoC4/CyLib.c ****     {
2563:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2564:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2565:Generated_Source\PSoC4/CyLib.c ****          */
2566:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1989              		.loc 1 2566 0
 1990 000a 0C4B     		ldr	r3, .L125
 1991 000c 1B68     		ldr	r3, [r3]
 1992 000e 181C     		mov	r0, r3
 1993 0010 FFF7FEFF 		bl	CyDelayCycles
2567:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1994              		.loc 1 2567 0
 1995 0014 7B68     		ldr	r3, [r7, #4]
 1996 0016 0A4A     		ldr	r2, .L125+4
 1997 0018 9446     		mov	ip, r2
 1998 001a 6344     		add	r3, r3, ip
 1999 001c 7B60     		str	r3, [r7, #4]
 2000              	.L123:
2561:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 2001              		.loc 1 2561 0
 2002 001e 7A68     		ldr	r2, [r7, #4]
 2003 0020 8023     		mov	r3, #128
 2004 0022 1B02     		lsl	r3, r3, #8
 2005 0024 9A42     		cmp	r2, r3
 2006 0026 F0D8     		bhi	.L124
2568:Generated_Source\PSoC4/CyLib.c ****     }
2569:Generated_Source\PSoC4/CyLib.c **** 
2570:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 2007              		.loc 1 2570 0
 2008 0028 064B     		ldr	r3, .L125+8
 2009 002a 1B68     		ldr	r3, [r3]
 2010 002c 7A68     		ldr	r2, [r7, #4]
 2011 002e 5343     		mul	r3, r2
 2012 0030 181C     		mov	r0, r3
 2013 0032 FFF7FEFF 		bl	CyDelayCycles
2571:Generated_Source\PSoC4/CyLib.c **** }
 2014              		.loc 1 2571 0
 2015 0036 BD46     		mov	sp, r7
 2016 0038 02B0     		add	sp, sp, #8
 2017              		@ sp needed
 2018 003a 80BD     		pop	{r7, pc}
 2019              	.L126:
 2020              		.align	2
 2021              	.L125:
 2022 003c 00000000 		.word	cydelay32kMs
 2023 0040 0080FFFF 		.word	-32768
 2024 0044 00000000 		.word	cydelayFreqKhz
 2025              		.cfi_endproc
 2026              	.LFE33:
 2027              		.size	CyDelay, .-CyDelay
 2028              		.section	.text.CyDelayUs,"ax",%progbits
 2029              		.align	2
 2030              		.global	CyDelayUs
 2031              		.code	16
 2032              		.thumb_func
 2033              		.type	CyDelayUs, %function
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 82


 2034              	CyDelayUs:
 2035              	.LFB34:
2572:Generated_Source\PSoC4/CyLib.c **** 
2573:Generated_Source\PSoC4/CyLib.c **** 
2574:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2575:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2576:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2577:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2578:Generated_Source\PSoC4/CyLib.c **** *
2579:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2580:Generated_Source\PSoC4/CyLib.c **** *
2581:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2582:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2583:Generated_Source\PSoC4/CyLib.c **** {
 2036              		.loc 1 2583 0
 2037              		.cfi_startproc
 2038 0000 80B5     		push	{r7, lr}
 2039              		.cfi_def_cfa_offset 8
 2040              		.cfi_offset 7, -8
 2041              		.cfi_offset 14, -4
 2042 0002 82B0     		sub	sp, sp, #8
 2043              		.cfi_def_cfa_offset 16
 2044 0004 00AF     		add	r7, sp, #0
 2045              		.cfi_def_cfa_register 7
 2046 0006 021C     		mov	r2, r0
 2047 0008 BB1D     		add	r3, r7, #6
 2048 000a 1A80     		strh	r2, [r3]
2584:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 2049              		.loc 1 2584 0
 2050 000c BB1D     		add	r3, r7, #6
 2051 000e 1B88     		ldrh	r3, [r3]
 2052 0010 044A     		ldr	r2, .L128
 2053 0012 1278     		ldrb	r2, [r2]
 2054 0014 5343     		mul	r3, r2
 2055 0016 181C     		mov	r0, r3
 2056 0018 FFF7FEFF 		bl	CyDelayCycles
2585:Generated_Source\PSoC4/CyLib.c **** }
 2057              		.loc 1 2585 0
 2058 001c BD46     		mov	sp, r7
 2059 001e 02B0     		add	sp, sp, #8
 2060              		@ sp needed
 2061 0020 80BD     		pop	{r7, pc}
 2062              	.L129:
 2063 0022 C046     		.align	2
 2064              	.L128:
 2065 0024 00000000 		.word	cydelayFreqMhz
 2066              		.cfi_endproc
 2067              	.LFE34:
 2068              		.size	CyDelayUs, .-CyDelayUs
 2069              		.global	__aeabi_uidiv
 2070              		.section	.text.CyDelayFreq,"ax",%progbits
 2071              		.align	2
 2072              		.global	CyDelayFreq
 2073              		.code	16
 2074              		.thumb_func
 2075              		.type	CyDelayFreq, %function
 2076              	CyDelayFreq:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 83


 2077              	.LFB35:
2586:Generated_Source\PSoC4/CyLib.c **** 
2587:Generated_Source\PSoC4/CyLib.c **** 
2588:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2589:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2590:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2591:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2592:Generated_Source\PSoC4/CyLib.c **** *
2593:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2594:Generated_Source\PSoC4/CyLib.c **** *
2595:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2596:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2597:Generated_Source\PSoC4/CyLib.c **** {
 2078              		.loc 1 2597 0
 2079              		.cfi_startproc
 2080 0000 80B5     		push	{r7, lr}
 2081              		.cfi_def_cfa_offset 8
 2082              		.cfi_offset 7, -8
 2083              		.cfi_offset 14, -4
 2084 0002 82B0     		sub	sp, sp, #8
 2085              		.cfi_def_cfa_offset 16
 2086 0004 00AF     		add	r7, sp, #0
 2087              		.cfi_def_cfa_register 7
 2088 0006 7860     		str	r0, [r7, #4]
2598:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 2089              		.loc 1 2598 0
 2090 0008 7B68     		ldr	r3, [r7, #4]
 2091 000a 002B     		cmp	r3, #0
 2092 000c 03D0     		beq	.L131
2599:Generated_Source\PSoC4/CyLib.c ****     {
2600:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 2093              		.loc 1 2600 0
 2094 000e 154B     		ldr	r3, .L133
 2095 0010 7A68     		ldr	r2, [r7, #4]
 2096 0012 1A60     		str	r2, [r3]
 2097 0014 02E0     		b	.L132
 2098              	.L131:
2601:Generated_Source\PSoC4/CyLib.c ****     }
2602:Generated_Source\PSoC4/CyLib.c ****     else
2603:Generated_Source\PSoC4/CyLib.c ****     {
2604:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 2099              		.loc 1 2604 0
 2100 0016 134B     		ldr	r3, .L133
 2101 0018 134A     		ldr	r2, .L133+4
 2102 001a 1A60     		str	r2, [r3]
 2103              	.L132:
2605:Generated_Source\PSoC4/CyLib.c ****     }
2606:Generated_Source\PSoC4/CyLib.c **** 
2607:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 2104              		.loc 1 2607 0
 2105 001c 114B     		ldr	r3, .L133
 2106 001e 1B68     		ldr	r3, [r3]
 2107 0020 124A     		ldr	r2, .L133+8
 2108 0022 9446     		mov	ip, r2
 2109 0024 6344     		add	r3, r3, ip
 2110 0026 181C     		mov	r0, r3
 2111 0028 1149     		ldr	r1, .L133+12
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 84


 2112 002a FFF7FEFF 		bl	__aeabi_uidiv
 2113 002e 031C     		mov	r3, r0
 2114 0030 DAB2     		uxtb	r2, r3
 2115 0032 104B     		ldr	r3, .L133+16
 2116 0034 1A70     		strb	r2, [r3]
2608:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 2117              		.loc 1 2608 0
 2118 0036 0B4B     		ldr	r3, .L133
 2119 0038 1B68     		ldr	r3, [r3]
 2120 003a 0F4A     		ldr	r2, .L133+20
 2121 003c 9446     		mov	ip, r2
 2122 003e 6344     		add	r3, r3, ip
 2123 0040 181C     		mov	r0, r3
 2124 0042 FA23     		mov	r3, #250
 2125 0044 9900     		lsl	r1, r3, #2
 2126 0046 FFF7FEFF 		bl	__aeabi_uidiv
 2127 004a 031C     		mov	r3, r0
 2128 004c 1A1C     		mov	r2, r3
 2129 004e 0B4B     		ldr	r3, .L133+24
 2130 0050 1A60     		str	r2, [r3]
2609:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 2131              		.loc 1 2609 0
 2132 0052 0A4B     		ldr	r3, .L133+24
 2133 0054 1B68     		ldr	r3, [r3]
 2134 0056 DA03     		lsl	r2, r3, #15
 2135 0058 094B     		ldr	r3, .L133+28
 2136 005a 1A60     		str	r2, [r3]
2610:Generated_Source\PSoC4/CyLib.c **** }
 2137              		.loc 1 2610 0
 2138 005c BD46     		mov	sp, r7
 2139 005e 02B0     		add	sp, sp, #8
 2140              		@ sp needed
 2141 0060 80BD     		pop	{r7, pc}
 2142              	.L134:
 2143 0062 C046     		.align	2
 2144              	.L133:
 2145 0064 00000000 		.word	cydelayFreqHz
 2146 0068 006CDC02 		.word	48000000
 2147 006c 3F420F00 		.word	999999
 2148 0070 40420F00 		.word	1000000
 2149 0074 00000000 		.word	cydelayFreqMhz
 2150 0078 E7030000 		.word	999
 2151 007c 00000000 		.word	cydelayFreqKhz
 2152 0080 00000000 		.word	cydelay32kMs
 2153              		.cfi_endproc
 2154              	.LFE35:
 2155              		.size	CyDelayFreq, .-CyDelayFreq
 2156              		.section	.text.CySysTickStart,"ax",%progbits
 2157              		.align	2
 2158              		.global	CySysTickStart
 2159              		.code	16
 2160              		.thumb_func
 2161              		.type	CySysTickStart, %function
 2162              	CySysTickStart:
 2163              	.LFB36:
2611:Generated_Source\PSoC4/CyLib.c **** 
2612:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 85


2613:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2614:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2615:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2616:Generated_Source\PSoC4/CyLib.c **** *
2617:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2618:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2619:Generated_Source\PSoC4/CyLib.c **** *
2620:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2621:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2622:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2623:Generated_Source\PSoC4/CyLib.c **** *
2624:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2625:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2626:Generated_Source\PSoC4/CyLib.c **** *
2627:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2628:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2629:Generated_Source\PSoC4/CyLib.c **** {
 2164              		.loc 1 2629 0
 2165              		.cfi_startproc
 2166 0000 80B5     		push	{r7, lr}
 2167              		.cfi_def_cfa_offset 8
 2168              		.cfi_offset 7, -8
 2169              		.cfi_offset 14, -4
 2170 0002 00AF     		add	r7, sp, #0
 2171              		.cfi_def_cfa_register 7
2630:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 2172              		.loc 1 2630 0
 2173 0004 064B     		ldr	r3, .L137
 2174 0006 1B68     		ldr	r3, [r3]
 2175 0008 002B     		cmp	r3, #0
 2176 000a 04D1     		bne	.L136
2631:Generated_Source\PSoC4/CyLib.c ****     {
2632:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2177              		.loc 1 2632 0
 2178 000c FFF7FEFF 		bl	CySysTickInit
2633:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2179              		.loc 1 2633 0
 2180 0010 034B     		ldr	r3, .L137
 2181 0012 0122     		mov	r2, #1
 2182 0014 1A60     		str	r2, [r3]
 2183              	.L136:
2634:Generated_Source\PSoC4/CyLib.c ****     }
2635:Generated_Source\PSoC4/CyLib.c **** 
2636:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2184              		.loc 1 2636 0
 2185 0016 FFF7FEFF 		bl	CySysTickEnable
2637:Generated_Source\PSoC4/CyLib.c **** }
 2186              		.loc 1 2637 0
 2187 001a BD46     		mov	sp, r7
 2188              		@ sp needed
 2189 001c 80BD     		pop	{r7, pc}
 2190              	.L138:
 2191 001e C046     		.align	2
 2192              	.L137:
 2193 0020 00000000 		.word	CySysTickInitVar
 2194              		.cfi_endproc
 2195              	.LFE36:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 86


 2196              		.size	CySysTickStart, .-CySysTickStart
 2197              		.section	.text.CySysTickInit,"ax",%progbits
 2198              		.align	2
 2199              		.global	CySysTickInit
 2200              		.code	16
 2201              		.thumb_func
 2202              		.type	CySysTickInit, %function
 2203              	CySysTickInit:
 2204              	.LFB37:
2638:Generated_Source\PSoC4/CyLib.c **** 
2639:Generated_Source\PSoC4/CyLib.c **** 
2640:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2641:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2642:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2643:Generated_Source\PSoC4/CyLib.c **** *
2644:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2645:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2646:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2647:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2648:Generated_Source\PSoC4/CyLib.c **** *
2649:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2650:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2651:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2652:Generated_Source\PSoC4/CyLib.c **** *
2653:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2654:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2655:Generated_Source\PSoC4/CyLib.c **** *
2656:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2657:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2658:Generated_Source\PSoC4/CyLib.c **** {
 2205              		.loc 1 2658 0
 2206              		.cfi_startproc
 2207 0000 80B5     		push	{r7, lr}
 2208              		.cfi_def_cfa_offset 8
 2209              		.cfi_offset 7, -8
 2210              		.cfi_offset 14, -4
 2211 0002 82B0     		sub	sp, sp, #8
 2212              		.cfi_def_cfa_offset 16
 2213 0004 00AF     		add	r7, sp, #0
 2214              		.cfi_def_cfa_register 7
2659:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2660:Generated_Source\PSoC4/CyLib.c **** 
2661:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2215              		.loc 1 2661 0
 2216 0006 0023     		mov	r3, #0
 2217 0008 7B60     		str	r3, [r7, #4]
 2218 000a 07E0     		b	.L140
 2219              	.L141:
2662:Generated_Source\PSoC4/CyLib.c ****     {
2663:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 2220              		.loc 1 2663 0 discriminator 3
 2221 000c 124B     		ldr	r3, .L142
 2222 000e 7A68     		ldr	r2, [r7, #4]
 2223 0010 9200     		lsl	r2, r2, #2
 2224 0012 0021     		mov	r1, #0
 2225 0014 D150     		str	r1, [r2, r3]
2661:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 87


 2226              		.loc 1 2661 0 discriminator 3
 2227 0016 7B68     		ldr	r3, [r7, #4]
 2228 0018 0133     		add	r3, r3, #1
 2229 001a 7B60     		str	r3, [r7, #4]
 2230              	.L140:
2661:Generated_Source\PSoC4/CyLib.c ****     {
 2231              		.loc 1 2661 0 is_stmt 0 discriminator 1
 2232 001c 7B68     		ldr	r3, [r7, #4]
 2233 001e 042B     		cmp	r3, #4
 2234 0020 F4D9     		bls	.L141
2664:Generated_Source\PSoC4/CyLib.c ****     }
2665:Generated_Source\PSoC4/CyLib.c **** 
2666:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2235              		.loc 1 2666 0 is_stmt 1
 2236 0022 0E4B     		ldr	r3, .L142+4
 2237 0024 0F20     		mov	r0, #15
 2238 0026 191C     		mov	r1, r3
 2239 0028 FFF7FEFF 		bl	CyIntSetSysVector
2667:Generated_Source\PSoC4/CyLib.c **** 
2668:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2669:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
 2240              		.loc 1 2669 0
 2241 002c 0120     		mov	r0, #1
 2242 002e FFF7FEFF 		bl	CySysTickSetClockSource
2670:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2671:Generated_Source\PSoC4/CyLib.c **** 
2672:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2243              		.loc 1 2672 0
 2244 0032 0B4B     		ldr	r3, .L142+8
 2245 0034 1B68     		ldr	r3, [r3]
 2246 0036 181C     		mov	r0, r3
 2247 0038 FA23     		mov	r3, #250
 2248 003a 9900     		lsl	r1, r3, #2
 2249 003c FFF7FEFF 		bl	__aeabi_uidiv
 2250 0040 031C     		mov	r3, r0
 2251 0042 181C     		mov	r0, r3
 2252 0044 FFF7FEFF 		bl	CySysTickSetReload
2673:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 2253              		.loc 1 2673 0
 2254 0048 FFF7FEFF 		bl	CySysTickClear
2674:Generated_Source\PSoC4/CyLib.c ****     CyIntEnable(CY_INT_SYSTICK_IRQN);
 2255              		.loc 1 2674 0
 2256 004c 0F20     		mov	r0, #15
 2257 004e FFF7FEFF 		bl	CyIntEnable
2675:Generated_Source\PSoC4/CyLib.c **** }
 2258              		.loc 1 2675 0
 2259 0052 BD46     		mov	sp, r7
 2260 0054 02B0     		add	sp, sp, #8
 2261              		@ sp needed
 2262 0056 80BD     		pop	{r7, pc}
 2263              	.L143:
 2264              		.align	2
 2265              	.L142:
 2266 0058 00000000 		.word	CySysTickCallbacks
 2267 005c 00000000 		.word	CySysTickServiceCallbacks
 2268 0060 00000000 		.word	cydelayFreqHz
 2269              		.cfi_endproc
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 88


 2270              	.LFE37:
 2271              		.size	CySysTickInit, .-CySysTickInit
 2272              		.section	.text.CySysTickEnable,"ax",%progbits
 2273              		.align	2
 2274              		.global	CySysTickEnable
 2275              		.code	16
 2276              		.thumb_func
 2277              		.type	CySysTickEnable, %function
 2278              	CySysTickEnable:
 2279              	.LFB38:
2676:Generated_Source\PSoC4/CyLib.c **** 
2677:Generated_Source\PSoC4/CyLib.c **** 
2678:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2679:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2680:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2681:Generated_Source\PSoC4/CyLib.c **** *
2682:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2683:Generated_Source\PSoC4/CyLib.c **** *
2684:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2685:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2686:Generated_Source\PSoC4/CyLib.c **** *
2687:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2688:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2689:Generated_Source\PSoC4/CyLib.c **** {
 2280              		.loc 1 2689 0
 2281              		.cfi_startproc
 2282 0000 80B5     		push	{r7, lr}
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 7, -8
 2285              		.cfi_offset 14, -4
 2286 0002 00AF     		add	r7, sp, #0
 2287              		.cfi_def_cfa_register 7
2690:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2288              		.loc 1 2690 0
 2289 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
2691:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2290              		.loc 1 2691 0
 2291 0008 034B     		ldr	r3, .L145
 2292 000a 034A     		ldr	r2, .L145
 2293 000c 1268     		ldr	r2, [r2]
 2294 000e 0121     		mov	r1, #1
 2295 0010 0A43     		orr	r2, r1
 2296 0012 1A60     		str	r2, [r3]
2692:Generated_Source\PSoC4/CyLib.c **** }
 2297              		.loc 1 2692 0
 2298 0014 BD46     		mov	sp, r7
 2299              		@ sp needed
 2300 0016 80BD     		pop	{r7, pc}
 2301              	.L146:
 2302              		.align	2
 2303              	.L145:
 2304 0018 10E000E0 		.word	-536813552
 2305              		.cfi_endproc
 2306              	.LFE38:
 2307              		.size	CySysTickEnable, .-CySysTickEnable
 2308              		.section	.text.CySysTickStop,"ax",%progbits
 2309              		.align	2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 89


 2310              		.global	CySysTickStop
 2311              		.code	16
 2312              		.thumb_func
 2313              		.type	CySysTickStop, %function
 2314              	CySysTickStop:
 2315              	.LFB39:
2693:Generated_Source\PSoC4/CyLib.c **** 
2694:Generated_Source\PSoC4/CyLib.c **** 
2695:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2696:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2697:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2698:Generated_Source\PSoC4/CyLib.c **** *
2699:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2700:Generated_Source\PSoC4/CyLib.c **** *
2701:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2702:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2703:Generated_Source\PSoC4/CyLib.c **** *
2704:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2705:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2706:Generated_Source\PSoC4/CyLib.c **** {
 2316              		.loc 1 2706 0
 2317              		.cfi_startproc
 2318 0000 80B5     		push	{r7, lr}
 2319              		.cfi_def_cfa_offset 8
 2320              		.cfi_offset 7, -8
 2321              		.cfi_offset 14, -4
 2322 0002 00AF     		add	r7, sp, #0
 2323              		.cfi_def_cfa_register 7
2707:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2324              		.loc 1 2707 0
 2325 0004 034B     		ldr	r3, .L148
 2326 0006 034A     		ldr	r2, .L148
 2327 0008 1268     		ldr	r2, [r2]
 2328 000a 0121     		mov	r1, #1
 2329 000c 8A43     		bic	r2, r1
 2330 000e 1A60     		str	r2, [r3]
2708:Generated_Source\PSoC4/CyLib.c **** }
 2331              		.loc 1 2708 0
 2332 0010 BD46     		mov	sp, r7
 2333              		@ sp needed
 2334 0012 80BD     		pop	{r7, pc}
 2335              	.L149:
 2336              		.align	2
 2337              	.L148:
 2338 0014 10E000E0 		.word	-536813552
 2339              		.cfi_endproc
 2340              	.LFE39:
 2341              		.size	CySysTickStop, .-CySysTickStop
 2342              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2343              		.align	2
 2344              		.global	CySysTickEnableInterrupt
 2345              		.code	16
 2346              		.thumb_func
 2347              		.type	CySysTickEnableInterrupt, %function
 2348              	CySysTickEnableInterrupt:
 2349              	.LFB40:
2709:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 90


2710:Generated_Source\PSoC4/CyLib.c **** 
2711:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2712:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2713:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2714:Generated_Source\PSoC4/CyLib.c **** *
2715:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2716:Generated_Source\PSoC4/CyLib.c **** *
2717:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2718:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2719:Generated_Source\PSoC4/CyLib.c **** *
2720:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2721:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2722:Generated_Source\PSoC4/CyLib.c **** {
 2350              		.loc 1 2722 0
 2351              		.cfi_startproc
 2352 0000 80B5     		push	{r7, lr}
 2353              		.cfi_def_cfa_offset 8
 2354              		.cfi_offset 7, -8
 2355              		.cfi_offset 14, -4
 2356 0002 00AF     		add	r7, sp, #0
 2357              		.cfi_def_cfa_register 7
2723:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2358              		.loc 1 2723 0
 2359 0004 034B     		ldr	r3, .L151
 2360 0006 034A     		ldr	r2, .L151
 2361 0008 1268     		ldr	r2, [r2]
 2362 000a 0221     		mov	r1, #2
 2363 000c 0A43     		orr	r2, r1
 2364 000e 1A60     		str	r2, [r3]
2724:Generated_Source\PSoC4/CyLib.c **** }
 2365              		.loc 1 2724 0
 2366 0010 BD46     		mov	sp, r7
 2367              		@ sp needed
 2368 0012 80BD     		pop	{r7, pc}
 2369              	.L152:
 2370              		.align	2
 2371              	.L151:
 2372 0014 10E000E0 		.word	-536813552
 2373              		.cfi_endproc
 2374              	.LFE40:
 2375              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2376              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 2377              		.align	2
 2378              		.global	CySysTickDisableInterrupt
 2379              		.code	16
 2380              		.thumb_func
 2381              		.type	CySysTickDisableInterrupt, %function
 2382              	CySysTickDisableInterrupt:
 2383              	.LFB41:
2725:Generated_Source\PSoC4/CyLib.c **** 
2726:Generated_Source\PSoC4/CyLib.c **** 
2727:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2728:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2729:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2730:Generated_Source\PSoC4/CyLib.c **** *
2731:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2732:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 91


2733:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2734:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2735:Generated_Source\PSoC4/CyLib.c **** *
2736:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2737:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2738:Generated_Source\PSoC4/CyLib.c **** {
 2384              		.loc 1 2738 0
 2385              		.cfi_startproc
 2386 0000 80B5     		push	{r7, lr}
 2387              		.cfi_def_cfa_offset 8
 2388              		.cfi_offset 7, -8
 2389              		.cfi_offset 14, -4
 2390 0002 00AF     		add	r7, sp, #0
 2391              		.cfi_def_cfa_register 7
2739:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2392              		.loc 1 2739 0
 2393 0004 034B     		ldr	r3, .L154
 2394 0006 034A     		ldr	r2, .L154
 2395 0008 1268     		ldr	r2, [r2]
 2396 000a 0221     		mov	r1, #2
 2397 000c 8A43     		bic	r2, r1
 2398 000e 1A60     		str	r2, [r3]
2740:Generated_Source\PSoC4/CyLib.c **** }
 2399              		.loc 1 2740 0
 2400 0010 BD46     		mov	sp, r7
 2401              		@ sp needed
 2402 0012 80BD     		pop	{r7, pc}
 2403              	.L155:
 2404              		.align	2
 2405              	.L154:
 2406 0014 10E000E0 		.word	-536813552
 2407              		.cfi_endproc
 2408              	.LFE41:
 2409              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2410              		.section	.text.CySysTickSetReload,"ax",%progbits
 2411              		.align	2
 2412              		.global	CySysTickSetReload
 2413              		.code	16
 2414              		.thumb_func
 2415              		.type	CySysTickSetReload, %function
 2416              	CySysTickSetReload:
 2417              	.LFB42:
2741:Generated_Source\PSoC4/CyLib.c **** 
2742:Generated_Source\PSoC4/CyLib.c **** 
2743:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2744:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2745:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2746:Generated_Source\PSoC4/CyLib.c **** *
2747:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2748:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2749:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2750:Generated_Source\PSoC4/CyLib.c **** *
2751:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2752:Generated_Source\PSoC4/CyLib.c **** *
2753:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2754:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2755:Generated_Source\PSoC4/CyLib.c **** {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 92


 2418              		.loc 1 2755 0
 2419              		.cfi_startproc
 2420 0000 80B5     		push	{r7, lr}
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 7, -8
 2423              		.cfi_offset 14, -4
 2424 0002 82B0     		sub	sp, sp, #8
 2425              		.cfi_def_cfa_offset 16
 2426 0004 00AF     		add	r7, sp, #0
 2427              		.cfi_def_cfa_register 7
 2428 0006 7860     		str	r0, [r7, #4]
2756:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2429              		.loc 1 2756 0
 2430 0008 034B     		ldr	r3, .L157
 2431 000a 7A68     		ldr	r2, [r7, #4]
 2432 000c 1202     		lsl	r2, r2, #8
 2433 000e 120A     		lsr	r2, r2, #8
 2434 0010 1A60     		str	r2, [r3]
2757:Generated_Source\PSoC4/CyLib.c **** }
 2435              		.loc 1 2757 0
 2436 0012 BD46     		mov	sp, r7
 2437 0014 02B0     		add	sp, sp, #8
 2438              		@ sp needed
 2439 0016 80BD     		pop	{r7, pc}
 2440              	.L158:
 2441              		.align	2
 2442              	.L157:
 2443 0018 14E000E0 		.word	-536813548
 2444              		.cfi_endproc
 2445              	.LFE42:
 2446              		.size	CySysTickSetReload, .-CySysTickSetReload
 2447              		.section	.text.CySysTickGetReload,"ax",%progbits
 2448              		.align	2
 2449              		.global	CySysTickGetReload
 2450              		.code	16
 2451              		.thumb_func
 2452              		.type	CySysTickGetReload, %function
 2453              	CySysTickGetReload:
 2454              	.LFB43:
2758:Generated_Source\PSoC4/CyLib.c **** 
2759:Generated_Source\PSoC4/CyLib.c **** 
2760:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2761:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2762:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2763:Generated_Source\PSoC4/CyLib.c **** *
2764:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2765:Generated_Source\PSoC4/CyLib.c **** *
2766:Generated_Source\PSoC4/CyLib.c **** * \return
2767:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2768:Generated_Source\PSoC4/CyLib.c **** *
2769:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2770:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2771:Generated_Source\PSoC4/CyLib.c **** {
 2455              		.loc 1 2771 0
 2456              		.cfi_startproc
 2457 0000 80B5     		push	{r7, lr}
 2458              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 93


 2459              		.cfi_offset 7, -8
 2460              		.cfi_offset 14, -4
 2461 0002 00AF     		add	r7, sp, #0
 2462              		.cfi_def_cfa_register 7
2772:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2463              		.loc 1 2772 0
 2464 0004 034B     		ldr	r3, .L161
 2465 0006 1B68     		ldr	r3, [r3]
 2466 0008 1B02     		lsl	r3, r3, #8
 2467 000a 1B0A     		lsr	r3, r3, #8
2773:Generated_Source\PSoC4/CyLib.c **** }
 2468              		.loc 1 2773 0
 2469 000c 181C     		mov	r0, r3
 2470 000e BD46     		mov	sp, r7
 2471              		@ sp needed
 2472 0010 80BD     		pop	{r7, pc}
 2473              	.L162:
 2474 0012 C046     		.align	2
 2475              	.L161:
 2476 0014 14E000E0 		.word	-536813548
 2477              		.cfi_endproc
 2478              	.LFE43:
 2479              		.size	CySysTickGetReload, .-CySysTickGetReload
 2480              		.section	.text.CySysTickGetValue,"ax",%progbits
 2481              		.align	2
 2482              		.global	CySysTickGetValue
 2483              		.code	16
 2484              		.thumb_func
 2485              		.type	CySysTickGetValue, %function
 2486              	CySysTickGetValue:
 2487              	.LFB44:
2774:Generated_Source\PSoC4/CyLib.c **** 
2775:Generated_Source\PSoC4/CyLib.c **** 
2776:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2777:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2778:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2779:Generated_Source\PSoC4/CyLib.c **** *
2780:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2781:Generated_Source\PSoC4/CyLib.c **** *
2782:Generated_Source\PSoC4/CyLib.c **** * \return
2783:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2784:Generated_Source\PSoC4/CyLib.c **** *
2785:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2786:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2787:Generated_Source\PSoC4/CyLib.c **** {
 2488              		.loc 1 2787 0
 2489              		.cfi_startproc
 2490 0000 80B5     		push	{r7, lr}
 2491              		.cfi_def_cfa_offset 8
 2492              		.cfi_offset 7, -8
 2493              		.cfi_offset 14, -4
 2494 0002 00AF     		add	r7, sp, #0
 2495              		.cfi_def_cfa_register 7
2788:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2496              		.loc 1 2788 0
 2497 0004 034B     		ldr	r3, .L165
 2498 0006 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 94


 2499 0008 1B02     		lsl	r3, r3, #8
 2500 000a 1B0A     		lsr	r3, r3, #8
2789:Generated_Source\PSoC4/CyLib.c **** }
 2501              		.loc 1 2789 0
 2502 000c 181C     		mov	r0, r3
 2503 000e BD46     		mov	sp, r7
 2504              		@ sp needed
 2505 0010 80BD     		pop	{r7, pc}
 2506              	.L166:
 2507 0012 C046     		.align	2
 2508              	.L165:
 2509 0014 18E000E0 		.word	-536813544
 2510              		.cfi_endproc
 2511              	.LFE44:
 2512              		.size	CySysTickGetValue, .-CySysTickGetValue
 2513              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 2514              		.align	2
 2515              		.global	CySysTickSetClockSource
 2516              		.code	16
 2517              		.thumb_func
 2518              		.type	CySysTickSetClockSource, %function
 2519              	CySysTickSetClockSource:
 2520              	.LFB45:
2790:Generated_Source\PSoC4/CyLib.c **** 
2791:Generated_Source\PSoC4/CyLib.c **** 
2792:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2793:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2794:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2795:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2796:Generated_Source\PSoC4/CyLib.c ****     *
2797:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2798:Generated_Source\PSoC4/CyLib.c ****     *
2799:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2800:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2801:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2802:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2803:Generated_Source\PSoC4/CyLib.c ****     *
2804:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2805:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2806:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2807:Generated_Source\PSoC4/CyLib.c ****     *
2808:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2809:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2810:Generated_Source\PSoC4/CyLib.c ****     *
2811:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2812:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2813:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
2814:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2815:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2816:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2817:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2818:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2819:Generated_Source\PSoC4/CyLib.c ****     {
 2521              		.loc 1 2819 0
 2522              		.cfi_startproc
 2523 0000 80B5     		push	{r7, lr}
 2524              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 95


 2525              		.cfi_offset 7, -8
 2526              		.cfi_offset 14, -4
 2527 0002 82B0     		sub	sp, sp, #8
 2528              		.cfi_def_cfa_offset 16
 2529 0004 00AF     		add	r7, sp, #0
 2530              		.cfi_def_cfa_register 7
 2531 0006 7860     		str	r0, [r7, #4]
2820:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
 2532              		.loc 1 2820 0
 2533 0008 7B68     		ldr	r3, [r7, #4]
 2534 000a 012B     		cmp	r3, #1
 2535 000c 06D1     		bne	.L168
2821:Generated_Source\PSoC4/CyLib.c ****         {
2822:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 2536              		.loc 1 2822 0
 2537 000e 084B     		ldr	r3, .L170
 2538 0010 074A     		ldr	r2, .L170
 2539 0012 1268     		ldr	r2, [r2]
 2540 0014 0421     		mov	r1, #4
 2541 0016 0A43     		orr	r2, r1
 2542 0018 1A60     		str	r2, [r3]
 2543 001a 05E0     		b	.L167
 2544              	.L168:
2823:Generated_Source\PSoC4/CyLib.c ****         }
2824:Generated_Source\PSoC4/CyLib.c ****         else
2825:Generated_Source\PSoC4/CyLib.c ****         {
2826:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
 2545              		.loc 1 2826 0
 2546 001c 044B     		ldr	r3, .L170
 2547 001e 044A     		ldr	r2, .L170
 2548 0020 1268     		ldr	r2, [r2]
 2549 0022 0421     		mov	r1, #4
 2550 0024 8A43     		bic	r2, r1
 2551 0026 1A60     		str	r2, [r3]
 2552              	.L167:
2827:Generated_Source\PSoC4/CyLib.c ****         }
2828:Generated_Source\PSoC4/CyLib.c ****     }
 2553              		.loc 1 2828 0
 2554 0028 BD46     		mov	sp, r7
 2555 002a 02B0     		add	sp, sp, #8
 2556              		@ sp needed
 2557 002c 80BD     		pop	{r7, pc}
 2558              	.L171:
 2559 002e C046     		.align	2
 2560              	.L170:
 2561 0030 10E000E0 		.word	-536813552
 2562              		.cfi_endproc
 2563              	.LFE45:
 2564              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 2565              		.section	.text.CySysTickGetClockSource,"ax",%progbits
 2566              		.align	2
 2567              		.global	CySysTickGetClockSource
 2568              		.code	16
 2569              		.thumb_func
 2570              		.type	CySysTickGetClockSource, %function
 2571              	CySysTickGetClockSource:
 2572              	.LFB46:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 96


2829:Generated_Source\PSoC4/CyLib.c **** 
2830:Generated_Source\PSoC4/CyLib.c ****     
2831:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2832:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
2833:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2834:Generated_Source\PSoC4/CyLib.c ****     *
2835:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
2836:Generated_Source\PSoC4/CyLib.c ****     *
2837:Generated_Source\PSoC4/CyLib.c ****     *  \return 
2838:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2839:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2840:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2841:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2842:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2843:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
2844:Generated_Source\PSoC4/CyLib.c ****     {
 2573              		.loc 1 2844 0
 2574              		.cfi_startproc
 2575 0000 80B5     		push	{r7, lr}
 2576              		.cfi_def_cfa_offset 8
 2577              		.cfi_offset 7, -8
 2578              		.cfi_offset 14, -4
 2579 0002 00AF     		add	r7, sp, #0
 2580              		.cfi_def_cfa_register 7
2845:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
 2581              		.loc 1 2845 0
 2582 0004 034B     		ldr	r3, .L174
 2583 0006 1B68     		ldr	r3, [r3]
 2584 0008 9B08     		lsr	r3, r3, #2
 2585 000a 0122     		mov	r2, #1
 2586 000c 1340     		and	r3, r2
2846:Generated_Source\PSoC4/CyLib.c ****     }
 2587              		.loc 1 2846 0
 2588 000e 181C     		mov	r0, r3
 2589 0010 BD46     		mov	sp, r7
 2590              		@ sp needed
 2591 0012 80BD     		pop	{r7, pc}
 2592              	.L175:
 2593              		.align	2
 2594              	.L174:
 2595 0014 10E000E0 		.word	-536813552
 2596              		.cfi_endproc
 2597              	.LFE46:
 2598              		.size	CySysTickGetClockSource, .-CySysTickGetClockSource
 2599              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2600              		.align	2
 2601              		.global	CySysTickGetCountFlag
 2602              		.code	16
 2603              		.thumb_func
 2604              		.type	CySysTickGetCountFlag, %function
 2605              	CySysTickGetCountFlag:
 2606              	.LFB47:
2847:Generated_Source\PSoC4/CyLib.c ****     
2848:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2849:Generated_Source\PSoC4/CyLib.c **** 
2850:Generated_Source\PSoC4/CyLib.c **** 
2851:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 97


2852:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2853:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2854:Generated_Source\PSoC4/CyLib.c **** *
2855:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
2856:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2857:Generated_Source\PSoC4/CyLib.c **** *
2858:Generated_Source\PSoC4/CyLib.c **** * \return
2859:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2860:Generated_Source\PSoC4/CyLib.c **** *
2861:Generated_Source\PSoC4/CyLib.c **** *
2862:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2863:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2864:Generated_Source\PSoC4/CyLib.c **** *
2865:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2866:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2867:Generated_Source\PSoC4/CyLib.c **** {
 2607              		.loc 1 2867 0
 2608              		.cfi_startproc
 2609 0000 80B5     		push	{r7, lr}
 2610              		.cfi_def_cfa_offset 8
 2611              		.cfi_offset 7, -8
 2612              		.cfi_offset 14, -4
 2613 0002 00AF     		add	r7, sp, #0
 2614              		.cfi_def_cfa_register 7
2868:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2615              		.loc 1 2868 0
 2616 0004 034B     		ldr	r3, .L178
 2617 0006 1B68     		ldr	r3, [r3]
 2618 0008 1B0C     		lsr	r3, r3, #16
 2619 000a 0122     		mov	r2, #1
 2620 000c 1340     		and	r3, r2
2869:Generated_Source\PSoC4/CyLib.c **** }
 2621              		.loc 1 2869 0
 2622 000e 181C     		mov	r0, r3
 2623 0010 BD46     		mov	sp, r7
 2624              		@ sp needed
 2625 0012 80BD     		pop	{r7, pc}
 2626              	.L179:
 2627              		.align	2
 2628              	.L178:
 2629 0014 10E000E0 		.word	-536813552
 2630              		.cfi_endproc
 2631              	.LFE47:
 2632              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2633              		.section	.text.CySysTickClear,"ax",%progbits
 2634              		.align	2
 2635              		.global	CySysTickClear
 2636              		.code	16
 2637              		.thumb_func
 2638              		.type	CySysTickClear, %function
 2639              	CySysTickClear:
 2640              	.LFB48:
2870:Generated_Source\PSoC4/CyLib.c **** 
2871:Generated_Source\PSoC4/CyLib.c **** 
2872:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2873:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2874:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 98


2875:Generated_Source\PSoC4/CyLib.c **** *
2876:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
2877:Generated_Source\PSoC4/CyLib.c **** *
2878:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2879:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
2880:Generated_Source\PSoC4/CyLib.c **** {
 2641              		.loc 1 2880 0
 2642              		.cfi_startproc
 2643 0000 80B5     		push	{r7, lr}
 2644              		.cfi_def_cfa_offset 8
 2645              		.cfi_offset 7, -8
 2646              		.cfi_offset 14, -4
 2647 0002 00AF     		add	r7, sp, #0
 2648              		.cfi_def_cfa_register 7
2881:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2649              		.loc 1 2881 0
 2650 0004 024B     		ldr	r3, .L181
 2651 0006 0022     		mov	r2, #0
 2652 0008 1A60     		str	r2, [r3]
2882:Generated_Source\PSoC4/CyLib.c **** }
 2653              		.loc 1 2882 0
 2654 000a BD46     		mov	sp, r7
 2655              		@ sp needed
 2656 000c 80BD     		pop	{r7, pc}
 2657              	.L182:
 2658 000e C046     		.align	2
 2659              	.L181:
 2660 0010 18E000E0 		.word	-536813544
 2661              		.cfi_endproc
 2662              	.LFE48:
 2663              		.size	CySysTickClear, .-CySysTickClear
 2664              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2665              		.align	2
 2666              		.global	CySysTickSetCallback
 2667              		.code	16
 2668              		.thumb_func
 2669              		.type	CySysTickSetCallback, %function
 2670              	CySysTickSetCallback:
 2671              	.LFB49:
2883:Generated_Source\PSoC4/CyLib.c **** 
2884:Generated_Source\PSoC4/CyLib.c **** 
2885:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2886:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
2887:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2888:Generated_Source\PSoC4/CyLib.c **** *
2889:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
2890:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
2891:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
2892:Generated_Source\PSoC4/CyLib.c **** *
2893:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
2894:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
2895:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
2896:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
2897:Generated_Source\PSoC4/CyLib.c **** *  functions.
2898:Generated_Source\PSoC4/CyLib.c **** *
2899:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
2900:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 99


2901:Generated_Source\PSoC4/CyLib.c **** *
2902:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
2903:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
2904:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
2905:Generated_Source\PSoC4/CyLib.c **** *
2906:Generated_Source\PSoC4/CyLib.c **** * \return
2907:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
2908:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
2909:Generated_Source\PSoC4/CyLib.c **** *
2910:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2911:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
2912:Generated_Source\PSoC4/CyLib.c **** *
2913:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2914:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
2915:Generated_Source\PSoC4/CyLib.c **** {
 2672              		.loc 1 2915 0
 2673              		.cfi_startproc
 2674 0000 80B5     		push	{r7, lr}
 2675              		.cfi_def_cfa_offset 8
 2676              		.cfi_offset 7, -8
 2677              		.cfi_offset 14, -4
 2678 0002 84B0     		sub	sp, sp, #16
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              		.cfi_def_cfa_register 7
 2682 0006 7860     		str	r0, [r7, #4]
 2683 0008 3960     		str	r1, [r7]
2916:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
2917:Generated_Source\PSoC4/CyLib.c **** 
2918:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
 2684              		.loc 1 2918 0
 2685 000a 074B     		ldr	r3, .L185
 2686 000c 7A68     		ldr	r2, [r7, #4]
 2687 000e 9200     		lsl	r2, r2, #2
 2688 0010 D358     		ldr	r3, [r2, r3]
 2689 0012 FB60     		str	r3, [r7, #12]
2919:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2690              		.loc 1 2919 0
 2691 0014 044B     		ldr	r3, .L185
 2692 0016 7A68     		ldr	r2, [r7, #4]
 2693 0018 9200     		lsl	r2, r2, #2
 2694 001a 3968     		ldr	r1, [r7]
 2695 001c D150     		str	r1, [r2, r3]
2920:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2696              		.loc 1 2920 0
 2697 001e FB68     		ldr	r3, [r7, #12]
2921:Generated_Source\PSoC4/CyLib.c **** }
 2698              		.loc 1 2921 0
 2699 0020 181C     		mov	r0, r3
 2700 0022 BD46     		mov	sp, r7
 2701 0024 04B0     		add	sp, sp, #16
 2702              		@ sp needed
 2703 0026 80BD     		pop	{r7, pc}
 2704              	.L186:
 2705              		.align	2
 2706              	.L185:
 2707 0028 00000000 		.word	CySysTickCallbacks
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 100


 2708              		.cfi_endproc
 2709              	.LFE49:
 2710              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2711              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2712              		.align	2
 2713              		.global	CySysTickGetCallback
 2714              		.code	16
 2715              		.thumb_func
 2716              		.type	CySysTickGetCallback, %function
 2717              	CySysTickGetCallback:
 2718              	.LFB50:
2922:Generated_Source\PSoC4/CyLib.c **** 
2923:Generated_Source\PSoC4/CyLib.c **** 
2924:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2925:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
2926:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2927:Generated_Source\PSoC4/CyLib.c **** *
2928:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
2929:Generated_Source\PSoC4/CyLib.c **** *
2930:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
2931:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2932:Generated_Source\PSoC4/CyLib.c **** *
2933:Generated_Source\PSoC4/CyLib.c **** * \return
2934:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
2935:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
2936:Generated_Source\PSoC4/CyLib.c **** *
2937:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2938:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
2939:Generated_Source\PSoC4/CyLib.c **** {
 2719              		.loc 1 2939 0
 2720              		.cfi_startproc
 2721 0000 80B5     		push	{r7, lr}
 2722              		.cfi_def_cfa_offset 8
 2723              		.cfi_offset 7, -8
 2724              		.cfi_offset 14, -4
 2725 0002 82B0     		sub	sp, sp, #8
 2726              		.cfi_def_cfa_offset 16
 2727 0004 00AF     		add	r7, sp, #0
 2728              		.cfi_def_cfa_register 7
 2729 0006 7860     		str	r0, [r7, #4]
2940:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2730              		.loc 1 2940 0
 2731 0008 034B     		ldr	r3, .L189
 2732 000a 7A68     		ldr	r2, [r7, #4]
 2733 000c 9200     		lsl	r2, r2, #2
 2734 000e D358     		ldr	r3, [r2, r3]
2941:Generated_Source\PSoC4/CyLib.c **** }
 2735              		.loc 1 2941 0
 2736 0010 181C     		mov	r0, r3
 2737 0012 BD46     		mov	sp, r7
 2738 0014 02B0     		add	sp, sp, #8
 2739              		@ sp needed
 2740 0016 80BD     		pop	{r7, pc}
 2741              	.L190:
 2742              		.align	2
 2743              	.L189:
 2744 0018 00000000 		.word	CySysTickCallbacks
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 101


 2745              		.cfi_endproc
 2746              	.LFE50:
 2747              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2748              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2749              		.align	2
 2750              		.code	16
 2751              		.thumb_func
 2752              		.type	CySysTickServiceCallbacks, %function
 2753              	CySysTickServiceCallbacks:
 2754              	.LFB51:
2942:Generated_Source\PSoC4/CyLib.c **** 
2943:Generated_Source\PSoC4/CyLib.c **** 
2944:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2945:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
2946:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2947:Generated_Source\PSoC4/CyLib.c **** *
2948:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
2949:Generated_Source\PSoC4/CyLib.c **** *
2950:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2951:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
2952:Generated_Source\PSoC4/CyLib.c **** {
 2755              		.loc 1 2952 0
 2756              		.cfi_startproc
 2757 0000 80B5     		push	{r7, lr}
 2758              		.cfi_def_cfa_offset 8
 2759              		.cfi_offset 7, -8
 2760              		.cfi_offset 14, -4
 2761 0002 82B0     		sub	sp, sp, #8
 2762              		.cfi_def_cfa_offset 16
 2763 0004 00AF     		add	r7, sp, #0
 2764              		.cfi_def_cfa_register 7
2953:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2954:Generated_Source\PSoC4/CyLib.c **** 
2955:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
2956:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2765              		.loc 1 2956 0
 2766 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2767 000a 031E     		sub	r3, r0, #0
 2768 000c 012B     		cmp	r3, #1
 2769 000e 13D1     		bne	.L191
2957:Generated_Source\PSoC4/CyLib.c ****     {
2958:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2770              		.loc 1 2958 0
 2771 0010 0023     		mov	r3, #0
 2772 0012 7B60     		str	r3, [r7, #4]
 2773 0014 0DE0     		b	.L193
 2774              	.L195:
2959:Generated_Source\PSoC4/CyLib.c ****         {
2960:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2775              		.loc 1 2960 0
 2776 0016 0A4B     		ldr	r3, .L196
 2777 0018 7A68     		ldr	r2, [r7, #4]
 2778 001a 9200     		lsl	r2, r2, #2
 2779 001c D358     		ldr	r3, [r2, r3]
 2780 001e 002B     		cmp	r3, #0
 2781 0020 04D0     		beq	.L194
2961:Generated_Source\PSoC4/CyLib.c ****             {
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 102


2962:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2782              		.loc 1 2962 0
 2783 0022 074B     		ldr	r3, .L196
 2784 0024 7A68     		ldr	r2, [r7, #4]
 2785 0026 9200     		lsl	r2, r2, #2
 2786 0028 D358     		ldr	r3, [r2, r3]
 2787 002a 9847     		blx	r3
 2788              	.L194:
2958:Generated_Source\PSoC4/CyLib.c ****         {
 2789              		.loc 1 2958 0 discriminator 2
 2790 002c 7B68     		ldr	r3, [r7, #4]
 2791 002e 0133     		add	r3, r3, #1
 2792 0030 7B60     		str	r3, [r7, #4]
 2793              	.L193:
2958:Generated_Source\PSoC4/CyLib.c ****         {
 2794              		.loc 1 2958 0 is_stmt 0 discriminator 1
 2795 0032 7B68     		ldr	r3, [r7, #4]
 2796 0034 042B     		cmp	r3, #4
 2797 0036 EED9     		bls	.L195
 2798              	.L191:
2963:Generated_Source\PSoC4/CyLib.c ****             }
2964:Generated_Source\PSoC4/CyLib.c ****         }
2965:Generated_Source\PSoC4/CyLib.c ****     }
2966:Generated_Source\PSoC4/CyLib.c **** }
 2799              		.loc 1 2966 0 is_stmt 1
 2800 0038 BD46     		mov	sp, r7
 2801 003a 02B0     		add	sp, sp, #8
 2802              		@ sp needed
 2803 003c 80BD     		pop	{r7, pc}
 2804              	.L197:
 2805 003e C046     		.align	2
 2806              	.L196:
 2807 0040 00000000 		.word	CySysTickCallbacks
 2808              		.cfi_endproc
 2809              	.LFE51:
 2810              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2811              		.section	.text.CyGetUniqueId,"ax",%progbits
 2812              		.align	2
 2813              		.global	CyGetUniqueId
 2814              		.code	16
 2815              		.thumb_func
 2816              		.type	CyGetUniqueId, %function
 2817              	CyGetUniqueId:
 2818              	.LFB52:
2967:Generated_Source\PSoC4/CyLib.c **** 
2968:Generated_Source\PSoC4/CyLib.c **** 
2969:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2970:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
2971:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2972:Generated_Source\PSoC4/CyLib.c **** *
2973:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2974:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2975:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
2976:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
2977:Generated_Source\PSoC4/CyLib.c **** *
2978:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
2979:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 103


2980:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
2981:Generated_Source\PSoC4/CyLib.c **** *
2982:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2983:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
2984:Generated_Source\PSoC4/CyLib.c **** {
 2819              		.loc 1 2984 0
 2820              		.cfi_startproc
 2821 0000 80B5     		push	{r7, lr}
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 7, -8
 2824              		.cfi_offset 14, -4
 2825 0002 82B0     		sub	sp, sp, #8
 2826              		.cfi_def_cfa_offset 16
 2827 0004 00AF     		add	r7, sp, #0
 2828              		.cfi_def_cfa_register 7
 2829 0006 7860     		str	r0, [r7, #4]
2985:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
2986:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2830              		.loc 1 2986 0
 2831 0008 254B     		ldr	r3, .L199
 2832 000a 1B78     		ldrb	r3, [r3]
 2833 000c DBB2     		uxtb	r3, r3
 2834 000e 1A1C     		mov	r2, r3
 2835 0010 7B68     		ldr	r3, [r7, #4]
 2836 0012 1A60     		str	r2, [r3]
2987:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2837              		.loc 1 2987 0
 2838 0014 234B     		ldr	r3, .L199+4
 2839 0016 1B78     		ldrb	r3, [r3]
 2840 0018 DBB2     		uxtb	r3, r3
 2841 001a 1A02     		lsl	r2, r3, #8
 2842 001c 7B68     		ldr	r3, [r7, #4]
 2843 001e 1B68     		ldr	r3, [r3]
 2844 0020 1A43     		orr	r2, r3
 2845 0022 7B68     		ldr	r3, [r7, #4]
 2846 0024 1A60     		str	r2, [r3]
2988:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2847              		.loc 1 2988 0
 2848 0026 204B     		ldr	r3, .L199+8
 2849 0028 1B78     		ldrb	r3, [r3]
 2850 002a DBB2     		uxtb	r3, r3
 2851 002c 1A04     		lsl	r2, r3, #16
 2852 002e 7B68     		ldr	r3, [r7, #4]
 2853 0030 1B68     		ldr	r3, [r3]
 2854 0032 1A43     		orr	r2, r3
 2855 0034 7B68     		ldr	r3, [r7, #4]
 2856 0036 1A60     		str	r2, [r3]
2989:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2857              		.loc 1 2989 0
 2858 0038 1C4B     		ldr	r3, .L199+12
 2859 003a 1B78     		ldrb	r3, [r3]
 2860 003c DBB2     		uxtb	r3, r3
 2861 003e 1A06     		lsl	r2, r3, #24
 2862 0040 7B68     		ldr	r3, [r7, #4]
 2863 0042 1B68     		ldr	r3, [r3]
 2864 0044 1A43     		orr	r2, r3
 2865 0046 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 104


 2866 0048 1A60     		str	r2, [r3]
2990:Generated_Source\PSoC4/CyLib.c **** 
2991:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2867              		.loc 1 2991 0
 2868 004a 7B68     		ldr	r3, [r7, #4]
 2869 004c 0433     		add	r3, r3, #4
 2870 004e 184A     		ldr	r2, .L199+16
 2871 0050 1278     		ldrb	r2, [r2]
 2872 0052 D2B2     		uxtb	r2, r2
 2873 0054 1A60     		str	r2, [r3]
2992:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2874              		.loc 1 2992 0
 2875 0056 174B     		ldr	r3, .L199+20
 2876 0058 1B78     		ldrb	r3, [r3]
 2877 005a DBB2     		uxtb	r3, r3
 2878 005c 1902     		lsl	r1, r3, #8
 2879 005e 7B68     		ldr	r3, [r7, #4]
 2880 0060 0433     		add	r3, r3, #4
 2881 0062 7A68     		ldr	r2, [r7, #4]
 2882 0064 0432     		add	r2, r2, #4
 2883 0066 1268     		ldr	r2, [r2]
 2884 0068 0A43     		orr	r2, r1
 2885 006a 1A60     		str	r2, [r3]
2993:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2886              		.loc 1 2993 0
 2887 006c 124B     		ldr	r3, .L199+24
 2888 006e 1B78     		ldrb	r3, [r3]
 2889 0070 DBB2     		uxtb	r3, r3
 2890 0072 1904     		lsl	r1, r3, #16
 2891 0074 7B68     		ldr	r3, [r7, #4]
 2892 0076 0433     		add	r3, r3, #4
 2893 0078 7A68     		ldr	r2, [r7, #4]
 2894 007a 0432     		add	r2, r2, #4
 2895 007c 1268     		ldr	r2, [r2]
 2896 007e 0A43     		orr	r2, r1
 2897 0080 1A60     		str	r2, [r3]
2994:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2898              		.loc 1 2994 0
 2899 0082 0E4B     		ldr	r3, .L199+28
 2900 0084 1B78     		ldrb	r3, [r3]
 2901 0086 DBB2     		uxtb	r3, r3
 2902 0088 1906     		lsl	r1, r3, #24
 2903 008a 7B68     		ldr	r3, [r7, #4]
 2904 008c 0433     		add	r3, r3, #4
 2905 008e 7A68     		ldr	r2, [r7, #4]
 2906 0090 0432     		add	r2, r2, #4
 2907 0092 1268     		ldr	r2, [r2]
 2908 0094 0A43     		orr	r2, r1
 2909 0096 1A60     		str	r2, [r3]
2995:Generated_Source\PSoC4/CyLib.c **** #else
2996:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
2997:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
2998:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
2999:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
3000:Generated_Source\PSoC4/CyLib.c **** 
3001:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3002:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 105


3003:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3004:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3005:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3006:Generated_Source\PSoC4/CyLib.c **** }
 2910              		.loc 1 3006 0
 2911 0098 BD46     		mov	sp, r7
 2912 009a 02B0     		add	sp, sp, #8
 2913              		@ sp needed
 2914 009c 80BD     		pop	{r7, pc}
 2915              	.L200:
 2916 009e C046     		.align	2
 2917              	.L199:
 2918 00a0 78F2FF0F 		.word	268431992
 2919 00a4 79F2FF0F 		.word	268431993
 2920 00a8 7AF2FF0F 		.word	268431994
 2921 00ac 7BF2FF0F 		.word	268431995
 2922 00b0 7CF2FF0F 		.word	268431996
 2923 00b4 7DF2FF0F 		.word	268431997
 2924 00b8 7EF2FF0F 		.word	268431998
 2925 00bc 7FF2FF0F 		.word	268431999
 2926              		.cfi_endproc
 2927              	.LFE52:
 2928              		.size	CyGetUniqueId, .-CyGetUniqueId
 2929              		.text
 2930              	.Letext0:
 2931              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2932              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2933              		.section	.debug_info,"",%progbits
 2934              	.Ldebug_info0:
 2935 0000 D1090000 		.4byte	0x9d1
 2936 0004 0400     		.2byte	0x4
 2937 0006 00000000 		.4byte	.Ldebug_abbrev0
 2938 000a 04       		.byte	0x4
 2939 000b 01       		.uleb128 0x1
 2940 000c 30060000 		.4byte	.LASF111
 2941 0010 01       		.byte	0x1
 2942 0011 E0060000 		.4byte	.LASF112
 2943 0015 27000000 		.4byte	.LASF113
 2944 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2945 001d 00000000 		.4byte	0
 2946 0021 00000000 		.4byte	.Ldebug_line0
 2947 0025 02       		.uleb128 0x2
 2948 0026 01       		.byte	0x1
 2949 0027 06       		.byte	0x6
 2950 0028 69010000 		.4byte	.LASF0
 2951 002c 02       		.uleb128 0x2
 2952 002d 01       		.byte	0x1
 2953 002e 08       		.byte	0x8
 2954 002f B0040000 		.4byte	.LASF1
 2955 0033 02       		.uleb128 0x2
 2956 0034 02       		.byte	0x2
 2957 0035 05       		.byte	0x5
 2958 0036 BE040000 		.4byte	.LASF2
 2959 003a 02       		.uleb128 0x2
 2960 003b 02       		.byte	0x2
 2961 003c 07       		.byte	0x7
 2962 003d 2C030000 		.4byte	.LASF3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 106


 2963 0041 02       		.uleb128 0x2
 2964 0042 04       		.byte	0x4
 2965 0043 05       		.byte	0x5
 2966 0044 A8010000 		.4byte	.LASF4
 2967 0048 02       		.uleb128 0x2
 2968 0049 04       		.byte	0x4
 2969 004a 07       		.byte	0x7
 2970 004b CB020000 		.4byte	.LASF5
 2971 004f 02       		.uleb128 0x2
 2972 0050 08       		.byte	0x8
 2973 0051 05       		.byte	0x5
 2974 0052 5B010000 		.4byte	.LASF6
 2975 0056 02       		.uleb128 0x2
 2976 0057 08       		.byte	0x8
 2977 0058 07       		.byte	0x7
 2978 0059 EF000000 		.4byte	.LASF7
 2979 005d 03       		.uleb128 0x3
 2980 005e 04       		.byte	0x4
 2981 005f 05       		.byte	0x5
 2982 0060 696E7400 		.ascii	"int\000"
 2983 0064 02       		.uleb128 0x2
 2984 0065 04       		.byte	0x4
 2985 0066 07       		.byte	0x7
 2986 0067 AF020000 		.4byte	.LASF8
 2987 006b 04       		.uleb128 0x4
 2988 006c D3010000 		.4byte	.LASF9
 2989 0070 02       		.byte	0x2
 2990 0071 B901     		.2byte	0x1b9
 2991 0073 2C000000 		.4byte	0x2c
 2992 0077 04       		.uleb128 0x4
 2993 0078 17000000 		.4byte	.LASF10
 2994 007c 02       		.byte	0x2
 2995 007d BA01     		.2byte	0x1ba
 2996 007f 3A000000 		.4byte	0x3a
 2997 0083 04       		.uleb128 0x4
 2998 0084 13020000 		.4byte	.LASF11
 2999 0088 02       		.byte	0x2
 3000 0089 BB01     		.2byte	0x1bb
 3001 008b 48000000 		.4byte	0x48
 3002 008f 02       		.uleb128 0x2
 3003 0090 04       		.byte	0x4
 3004 0091 04       		.byte	0x4
 3005 0092 57040000 		.4byte	.LASF12
 3006 0096 02       		.uleb128 0x2
 3007 0097 08       		.byte	0x8
 3008 0098 04       		.byte	0x4
 3009 0099 EF010000 		.4byte	.LASF13
 3010 009d 02       		.uleb128 0x2
 3011 009e 01       		.byte	0x1
 3012 009f 08       		.byte	0x8
 3013 00a0 12050000 		.4byte	.LASF14
 3014 00a4 04       		.uleb128 0x4
 3015 00a5 27060000 		.4byte	.LASF15
 3016 00a9 02       		.byte	0x2
 3017 00aa 5B02     		.2byte	0x25b
 3018 00ac 48000000 		.4byte	0x48
 3019 00b0 04       		.uleb128 0x4
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 107


 3020 00b1 9A040000 		.4byte	.LASF16
 3021 00b5 02       		.byte	0x2
 3022 00b6 6302     		.2byte	0x263
 3023 00b8 BC000000 		.4byte	0xbc
 3024 00bc 05       		.uleb128 0x5
 3025 00bd 6B000000 		.4byte	0x6b
 3026 00c1 04       		.uleb128 0x4
 3027 00c2 B2030000 		.4byte	.LASF17
 3028 00c6 02       		.byte	0x2
 3029 00c7 6502     		.2byte	0x265
 3030 00c9 CD000000 		.4byte	0xcd
 3031 00cd 05       		.uleb128 0x5
 3032 00ce 83000000 		.4byte	0x83
 3033 00d2 04       		.uleb128 0x4
 3034 00d3 17050000 		.4byte	.LASF18
 3035 00d7 02       		.byte	0x2
 3036 00d8 7502     		.2byte	0x275
 3037 00da DE000000 		.4byte	0xde
 3038 00de 06       		.uleb128 0x6
 3039 00df 04       		.byte	0x4
 3040 00e0 E4000000 		.4byte	0xe4
 3041 00e4 07       		.uleb128 0x7
 3042 00e5 02       		.uleb128 0x2
 3043 00e6 04       		.byte	0x4
 3044 00e7 07       		.byte	0x7
 3045 00e8 D4030000 		.4byte	.LASF19
 3046 00ec 08       		.uleb128 0x8
 3047 00ed 6C040000 		.4byte	.LASF20
 3048 00f1 03       		.byte	0x3
 3049 00f2 F5       		.byte	0xf5
 3050 00f3 DE000000 		.4byte	0xde
 3051 00f7 09       		.uleb128 0x9
 3052 00f8 BE060000 		.4byte	.LASF21
 3053 00fc 01       		.byte	0x1
 3054 00fd 6B       		.byte	0x6b
 3055 00fe 00000000 		.4byte	.LFB2
 3056 0102 1C000000 		.4byte	.LFE2-.LFB2
 3057 0106 01       		.uleb128 0x1
 3058 0107 9C       		.byte	0x9c
 3059 0108 09       		.uleb128 0x9
 3060 0109 F8020000 		.4byte	.LASF22
 3061 010d 01       		.byte	0x1
 3062 010e 8B       		.byte	0x8b
 3063 010f 00000000 		.4byte	.LFB3
 3064 0113 18000000 		.4byte	.LFE3-.LFB3
 3065 0117 01       		.uleb128 0x1
 3066 0118 9C       		.byte	0x9c
 3067 0119 0A       		.uleb128 0xa
 3068 011a 92000000 		.4byte	.LASF25
 3069 011e 01       		.byte	0x1
 3070 011f AD01     		.2byte	0x1ad
 3071 0121 00000000 		.4byte	.LFB4
 3072 0125 48000000 		.4byte	.LFE4-.LFB4
 3073 0129 01       		.uleb128 0x1
 3074 012a 9C       		.byte	0x9c
 3075 012b 5D010000 		.4byte	0x15d
 3076 012f 0B       		.uleb128 0xb
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 108


 3077 0130 E6040000 		.4byte	.LASF27
 3078 0134 01       		.byte	0x1
 3079 0135 AD01     		.2byte	0x1ad
 3080 0137 83000000 		.4byte	0x83
 3081 013b 02       		.uleb128 0x2
 3082 013c 91       		.byte	0x91
 3083 013d 64       		.sleb128 -28
 3084 013e 0C       		.uleb128 0xc
 3085 013f 86010000 		.4byte	.LASF23
 3086 0143 01       		.byte	0x1
 3087 0144 AF01     		.2byte	0x1af
 3088 0146 6B000000 		.4byte	0x6b
 3089 014a 02       		.uleb128 0x2
 3090 014b 91       		.byte	0x91
 3091 014c 6F       		.sleb128 -17
 3092 014d 0C       		.uleb128 0xc
 3093 014e 0C070000 		.4byte	.LASF24
 3094 0152 01       		.byte	0x1
 3095 0153 B001     		.2byte	0x1b0
 3096 0155 83000000 		.4byte	0x83
 3097 0159 02       		.uleb128 0x2
 3098 015a 91       		.byte	0x91
 3099 015b 68       		.sleb128 -24
 3100 015c 00       		.byte	0
 3101 015d 0D       		.uleb128 0xd
 3102 015e 9D030000 		.4byte	.LASF26
 3103 0162 01       		.byte	0x1
 3104 0163 D901     		.2byte	0x1d9
 3105 0165 00000000 		.4byte	.LFB5
 3106 0169 50000000 		.4byte	.LFE5-.LFB5
 3107 016d 01       		.uleb128 0x1
 3108 016e 9C       		.byte	0x9c
 3109 016f 83010000 		.4byte	0x183
 3110 0173 0B       		.uleb128 0xb
 3111 0174 E8010000 		.4byte	.LASF28
 3112 0178 01       		.byte	0x1
 3113 0179 D901     		.2byte	0x1d9
 3114 017b 83000000 		.4byte	0x83
 3115 017f 02       		.uleb128 0x2
 3116 0180 91       		.byte	0x91
 3117 0181 74       		.sleb128 -12
 3118 0182 00       		.byte	0
 3119 0183 0E       		.uleb128 0xe
 3120 0184 35020000 		.4byte	.LASF39
 3121 0188 01       		.byte	0x1
 3122 0189 FE01     		.2byte	0x1fe
 3123 018b 83000000 		.4byte	0x83
 3124 018f 00000000 		.4byte	.LFB6
 3125 0193 34000000 		.4byte	.LFE6-.LFB6
 3126 0197 01       		.uleb128 0x1
 3127 0198 9C       		.byte	0x9c
 3128 0199 BC010000 		.4byte	0x1bc
 3129 019d 0C       		.uleb128 0xc
 3130 019e 86010000 		.4byte	.LASF23
 3131 01a2 01       		.byte	0x1
 3132 01a3 0002     		.2byte	0x200
 3133 01a5 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 109


 3134 01a9 02       		.uleb128 0x2
 3135 01aa 91       		.byte	0x91
 3136 01ab 6F       		.sleb128 -17
 3137 01ac 0C       		.uleb128 0xc
 3138 01ad FF030000 		.4byte	.LASF29
 3139 01b1 01       		.byte	0x1
 3140 01b2 0102     		.2byte	0x201
 3141 01b4 83000000 		.4byte	0x83
 3142 01b8 02       		.uleb128 0x2
 3143 01b9 91       		.byte	0x91
 3144 01ba 68       		.sleb128 -24
 3145 01bb 00       		.byte	0
 3146 01bc 0A       		.uleb128 0xa
 3147 01bd 34050000 		.4byte	.LASF30
 3148 01c1 01       		.byte	0x1
 3149 01c2 3502     		.2byte	0x235
 3150 01c4 00000000 		.4byte	.LFB7
 3151 01c8 44000000 		.4byte	.LFE7-.LFB7
 3152 01cc 01       		.uleb128 0x1
 3153 01cd 9C       		.byte	0x9c
 3154 01ce F1010000 		.4byte	0x1f1
 3155 01d2 0B       		.uleb128 0xb
 3156 01d3 0B060000 		.4byte	.LASF31
 3157 01d7 01       		.byte	0x1
 3158 01d8 3502     		.2byte	0x235
 3159 01da 83000000 		.4byte	0x83
 3160 01de 02       		.uleb128 0x2
 3161 01df 91       		.byte	0x91
 3162 01e0 64       		.sleb128 -28
 3163 01e1 0C       		.uleb128 0xc
 3164 01e2 86010000 		.4byte	.LASF23
 3165 01e6 01       		.byte	0x1
 3166 01e7 3702     		.2byte	0x237
 3167 01e9 6B000000 		.4byte	0x6b
 3168 01ed 02       		.uleb128 0x2
 3169 01ee 91       		.byte	0x91
 3170 01ef 6F       		.sleb128 -17
 3171 01f0 00       		.byte	0
 3172 01f1 0A       		.uleb128 0xa
 3173 01f2 76030000 		.4byte	.LASF32
 3174 01f6 01       		.byte	0x1
 3175 01f7 6F02     		.2byte	0x26f
 3176 01f9 00000000 		.4byte	.LFB8
 3177 01fd EC010000 		.4byte	.LFE8-.LFB8
 3178 0201 01       		.uleb128 0x1
 3179 0202 9C       		.byte	0x9c
 3180 0203 71020000 		.4byte	0x271
 3181 0207 0B       		.uleb128 0xb
 3182 0208 75010000 		.4byte	.LASF33
 3183 020c 01       		.byte	0x1
 3184 020d 6F02     		.2byte	0x26f
 3185 020f 83000000 		.4byte	0x83
 3186 0213 02       		.uleb128 0x2
 3187 0214 91       		.byte	0x91
 3188 0215 64       		.sleb128 -28
 3189 0216 0C       		.uleb128 0xc
 3190 0217 0F000000 		.4byte	.LASF34
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 110


 3191 021b 01       		.byte	0x1
 3192 021c 7502     		.2byte	0x275
 3193 021e 6B000000 		.4byte	0x6b
 3194 0222 02       		.uleb128 0x2
 3195 0223 91       		.byte	0x91
 3196 0224 6F       		.sleb128 -17
 3197 0225 0C       		.uleb128 0xc
 3198 0226 F7030000 		.4byte	.LASF35
 3199 022a 01       		.byte	0x1
 3200 022b 7602     		.2byte	0x276
 3201 022d 6B000000 		.4byte	0x6b
 3202 0231 02       		.uleb128 0x2
 3203 0232 91       		.byte	0x91
 3204 0233 6E       		.sleb128 -18
 3205 0234 0C       		.uleb128 0xc
 3206 0235 CF060000 		.4byte	.LASF36
 3207 0239 01       		.byte	0x1
 3208 023a 7702     		.2byte	0x277
 3209 023c 6B000000 		.4byte	0x6b
 3210 0240 02       		.uleb128 0x2
 3211 0241 91       		.byte	0x91
 3212 0242 6B       		.sleb128 -21
 3213 0243 0C       		.uleb128 0xc
 3214 0244 DA000000 		.4byte	.LASF37
 3215 0248 01       		.byte	0x1
 3216 0249 7802     		.2byte	0x278
 3217 024b 6B000000 		.4byte	0x6b
 3218 024f 02       		.uleb128 0x2
 3219 0250 91       		.byte	0x91
 3220 0251 6D       		.sleb128 -19
 3221 0252 0C       		.uleb128 0xc
 3222 0253 73050000 		.4byte	.LASF38
 3223 0257 01       		.byte	0x1
 3224 0258 7902     		.2byte	0x279
 3225 025a 6B000000 		.4byte	0x6b
 3226 025e 02       		.uleb128 0x2
 3227 025f 91       		.byte	0x91
 3228 0260 6A       		.sleb128 -22
 3229 0261 0C       		.uleb128 0xc
 3230 0262 86010000 		.4byte	.LASF23
 3231 0266 01       		.byte	0x1
 3232 0267 8402     		.2byte	0x284
 3233 0269 6B000000 		.4byte	0x6b
 3234 026d 02       		.uleb128 0x2
 3235 026e 91       		.byte	0x91
 3236 026f 6C       		.sleb128 -20
 3237 0270 00       		.byte	0
 3238 0271 0E       		.uleb128 0xe
 3239 0272 F0040000 		.4byte	.LASF40
 3240 0276 01       		.byte	0x1
 3241 0277 0304     		.2byte	0x403
 3242 0279 A4000000 		.4byte	0xa4
 3243 027d 00000000 		.4byte	.LFB9
 3244 0281 74000000 		.4byte	.LFE9-.LFB9
 3245 0285 01       		.uleb128 0x1
 3246 0286 9C       		.byte	0x9c
 3247 0287 AA020000 		.4byte	0x2aa
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 111


 3248 028b 0B       		.uleb128 0xb
 3249 028c 01060000 		.4byte	.LASF41
 3250 0290 01       		.byte	0x1
 3251 0291 0304     		.2byte	0x403
 3252 0293 83000000 		.4byte	0x83
 3253 0297 02       		.uleb128 0x2
 3254 0298 91       		.byte	0x91
 3255 0299 6C       		.sleb128 -20
 3256 029a 0C       		.uleb128 0xc
 3257 029b C7030000 		.4byte	.LASF42
 3258 029f 01       		.byte	0x1
 3259 02a0 0504     		.2byte	0x405
 3260 02a2 A4000000 		.4byte	0xa4
 3261 02a6 02       		.uleb128 0x2
 3262 02a7 91       		.byte	0x91
 3263 02a8 74       		.sleb128 -12
 3264 02a9 00       		.byte	0
 3265 02aa 0F       		.uleb128 0xf
 3266 02ab E3050000 		.4byte	.LASF43
 3267 02af 01       		.byte	0x1
 3268 02b0 9104     		.2byte	0x491
 3269 02b2 00000000 		.4byte	.LFB10
 3270 02b6 2C000000 		.4byte	.LFE10-.LFB10
 3271 02ba 01       		.uleb128 0x1
 3272 02bb 9C       		.byte	0x9c
 3273 02bc 10       		.uleb128 0x10
 3274 02bd 1A020000 		.4byte	.LASF44
 3275 02c1 01       		.byte	0x1
 3276 02c2 B304     		.2byte	0x4b3
 3277 02c4 83000000 		.4byte	0x83
 3278 02c8 00000000 		.4byte	.LFB11
 3279 02cc 20000000 		.4byte	.LFE11-.LFB11
 3280 02d0 01       		.uleb128 0x1
 3281 02d1 9C       		.byte	0x9c
 3282 02d2 E6020000 		.4byte	0x2e6
 3283 02d6 0C       		.uleb128 0xc
 3284 02d7 40070000 		.4byte	.LASF45
 3285 02db 01       		.byte	0x1
 3286 02dc B504     		.2byte	0x4b5
 3287 02de 83000000 		.4byte	0x83
 3288 02e2 02       		.uleb128 0x2
 3289 02e3 91       		.byte	0x91
 3290 02e4 74       		.sleb128 -12
 3291 02e5 00       		.byte	0
 3292 02e6 0A       		.uleb128 0xa
 3293 02e7 13060000 		.4byte	.LASF46
 3294 02eb 01       		.byte	0x1
 3295 02ec E204     		.2byte	0x4e2
 3296 02ee 00000000 		.4byte	.LFB12
 3297 02f2 58000000 		.4byte	.LFE12-.LFB12
 3298 02f6 01       		.uleb128 0x1
 3299 02f7 9C       		.byte	0x9c
 3300 02f8 1B030000 		.4byte	0x31b
 3301 02fc 0B       		.uleb128 0xb
 3302 02fd 0B060000 		.4byte	.LASF31
 3303 0301 01       		.byte	0x1
 3304 0302 E204     		.2byte	0x4e2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 112


 3305 0304 83000000 		.4byte	0x83
 3306 0308 02       		.uleb128 0x2
 3307 0309 91       		.byte	0x91
 3308 030a 64       		.sleb128 -28
 3309 030b 0C       		.uleb128 0xc
 3310 030c 86010000 		.4byte	.LASF23
 3311 0310 01       		.byte	0x1
 3312 0311 E404     		.2byte	0x4e4
 3313 0313 6B000000 		.4byte	0x6b
 3314 0317 02       		.uleb128 0x2
 3315 0318 91       		.byte	0x91
 3316 0319 6F       		.sleb128 -17
 3317 031a 00       		.byte	0
 3318 031b 0A       		.uleb128 0xa
 3319 031c 5D040000 		.4byte	.LASF47
 3320 0320 01       		.byte	0x1
 3321 0321 4608     		.2byte	0x846
 3322 0323 00000000 		.4byte	.LFB13
 3323 0327 60000000 		.4byte	.LFE13-.LFB13
 3324 032b 01       		.uleb128 0x1
 3325 032c 9C       		.byte	0x9c
 3326 032d 41030000 		.4byte	0x341
 3327 0331 0B       		.uleb128 0xb
 3328 0332 9F040000 		.4byte	.LASF48
 3329 0336 01       		.byte	0x1
 3330 0337 4608     		.2byte	0x846
 3331 0339 83000000 		.4byte	0x83
 3332 033d 02       		.uleb128 0x2
 3333 033e 91       		.byte	0x91
 3334 033f 74       		.sleb128 -12
 3335 0340 00       		.byte	0
 3336 0341 0F       		.uleb128 0xf
 3337 0342 C4050000 		.4byte	.LASF49
 3338 0346 01       		.byte	0x1
 3339 0347 6408     		.2byte	0x864
 3340 0349 00000000 		.4byte	.LFB14
 3341 034d 28000000 		.4byte	.LFE14-.LFB14
 3342 0351 01       		.uleb128 0x1
 3343 0352 9C       		.byte	0x9c
 3344 0353 11       		.uleb128 0x11
 3345 0354 DD020000 		.4byte	.LASF89
 3346 0358 01       		.byte	0x1
 3347 0359 7608     		.2byte	0x876
 3348 035b 83000000 		.4byte	0x83
 3349 035f 00000000 		.4byte	.LFB15
 3350 0363 18000000 		.4byte	.LFE15-.LFB15
 3351 0367 01       		.uleb128 0x1
 3352 0368 9C       		.byte	0x9c
 3353 0369 0F       		.uleb128 0xf
 3354 036a FC010000 		.4byte	.LASF50
 3355 036e 01       		.byte	0x1
 3356 036f 8608     		.2byte	0x886
 3357 0371 00000000 		.4byte	.LFB16
 3358 0375 14000000 		.4byte	.LFE16-.LFB16
 3359 0379 01       		.uleb128 0x1
 3360 037a 9C       		.byte	0x9c
 3361 037b 10       		.uleb128 0x10
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 113


 3362 037c 18030000 		.4byte	.LASF51
 3363 0380 01       		.byte	0x1
 3364 0381 A008     		.2byte	0x8a0
 3365 0383 83000000 		.4byte	0x83
 3366 0387 00000000 		.4byte	.LFB17
 3367 038b 30000000 		.4byte	.LFE17-.LFB17
 3368 038f 01       		.uleb128 0x1
 3369 0390 9C       		.byte	0x9c
 3370 0391 B4030000 		.4byte	0x3b4
 3371 0395 0B       		.uleb128 0xb
 3372 0396 0B050000 		.4byte	.LASF52
 3373 039a 01       		.byte	0x1
 3374 039b A008     		.2byte	0x8a0
 3375 039d 83000000 		.4byte	0x83
 3376 03a1 02       		.uleb128 0x2
 3377 03a2 91       		.byte	0x91
 3378 03a3 6C       		.sleb128 -20
 3379 03a4 0C       		.uleb128 0xc
 3380 03a5 C7030000 		.4byte	.LASF42
 3381 03a9 01       		.byte	0x1
 3382 03aa A208     		.2byte	0x8a2
 3383 03ac 83000000 		.4byte	0x83
 3384 03b0 02       		.uleb128 0x2
 3385 03b1 91       		.byte	0x91
 3386 03b2 74       		.sleb128 -12
 3387 03b3 00       		.byte	0
 3388 03b4 10       		.uleb128 0x10
 3389 03b5 CC000000 		.4byte	.LASF53
 3390 03b9 01       		.byte	0x1
 3391 03ba B708     		.2byte	0x8b7
 3392 03bc 83000000 		.4byte	0x83
 3393 03c0 00000000 		.4byte	.LFB18
 3394 03c4 24000000 		.4byte	.LFE18-.LFB18
 3395 03c8 01       		.uleb128 0x1
 3396 03c9 9C       		.byte	0x9c
 3397 03ca DE030000 		.4byte	0x3de
 3398 03ce 0C       		.uleb128 0xc
 3399 03cf 1E000000 		.4byte	.LASF54
 3400 03d3 01       		.byte	0x1
 3401 03d4 B908     		.2byte	0x8b9
 3402 03d6 83000000 		.4byte	0x83
 3403 03da 02       		.uleb128 0x2
 3404 03db 91       		.byte	0x91
 3405 03dc 74       		.sleb128 -12
 3406 03dd 00       		.byte	0
 3407 03de 0D       		.uleb128 0xd
 3408 03df 17010000 		.4byte	.LASF55
 3409 03e3 01       		.byte	0x1
 3410 03e4 CE08     		.2byte	0x8ce
 3411 03e6 00000000 		.4byte	.LFB19
 3412 03ea 18000000 		.4byte	.LFE19-.LFB19
 3413 03ee 01       		.uleb128 0x1
 3414 03ef 9C       		.byte	0x9c
 3415 03f0 04040000 		.4byte	0x404
 3416 03f4 0B       		.uleb128 0xb
 3417 03f5 30020000 		.4byte	.LASF56
 3418 03f9 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 114


 3419 03fa CE08     		.2byte	0x8ce
 3420 03fc 83000000 		.4byte	0x83
 3421 0400 02       		.uleb128 0x2
 3422 0401 91       		.byte	0x91
 3423 0402 74       		.sleb128 -12
 3424 0403 00       		.byte	0
 3425 0404 0E       		.uleb128 0xe
 3426 0405 8B030000 		.4byte	.LASF57
 3427 0409 01       		.byte	0x1
 3428 040a E708     		.2byte	0x8e7
 3429 040c D2000000 		.4byte	0xd2
 3430 0410 00000000 		.4byte	.LFB20
 3431 0414 48000000 		.4byte	.LFE20-.LFB20
 3432 0418 01       		.uleb128 0x1
 3433 0419 9C       		.byte	0x9c
 3434 041a 5B040000 		.4byte	0x45b
 3435 041e 0B       		.uleb128 0xb
 3436 041f 66030000 		.4byte	.LASF58
 3437 0423 01       		.byte	0x1
 3438 0424 E708     		.2byte	0x8e7
 3439 0426 6B000000 		.4byte	0x6b
 3440 042a 02       		.uleb128 0x2
 3441 042b 91       		.byte	0x91
 3442 042c 6F       		.sleb128 -17
 3443 042d 0B       		.uleb128 0xb
 3444 042e EF030000 		.4byte	.LASF59
 3445 0432 01       		.byte	0x1
 3446 0433 E708     		.2byte	0x8e7
 3447 0435 D2000000 		.4byte	0xd2
 3448 0439 02       		.uleb128 0x2
 3449 043a 91       		.byte	0x91
 3450 043b 68       		.sleb128 -24
 3451 043c 0C       		.uleb128 0xc
 3452 043d BE000000 		.4byte	.LASF60
 3453 0441 01       		.byte	0x1
 3454 0442 E908     		.2byte	0x8e9
 3455 0444 D2000000 		.4byte	0xd2
 3456 0448 02       		.uleb128 0x2
 3457 0449 91       		.byte	0x91
 3458 044a 70       		.sleb128 -16
 3459 044b 0C       		.uleb128 0xc
 3460 044c 00000000 		.4byte	.LASF61
 3461 0450 01       		.byte	0x1
 3462 0451 EA08     		.2byte	0x8ea
 3463 0453 5B040000 		.4byte	0x45b
 3464 0457 02       		.uleb128 0x2
 3465 0458 91       		.byte	0x91
 3466 0459 74       		.sleb128 -12
 3467 045a 00       		.byte	0
 3468 045b 06       		.uleb128 0x6
 3469 045c 04       		.byte	0x4
 3470 045d D2000000 		.4byte	0xd2
 3471 0461 0E       		.uleb128 0xe
 3472 0462 D4040000 		.4byte	.LASF62
 3473 0466 01       		.byte	0x1
 3474 0467 0909     		.2byte	0x909
 3475 0469 D2000000 		.4byte	0xd2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 115


 3476 046d 00000000 		.4byte	.LFB21
 3477 0471 34000000 		.4byte	.LFE21-.LFB21
 3478 0475 01       		.uleb128 0x1
 3479 0476 9C       		.byte	0x9c
 3480 0477 9A040000 		.4byte	0x49a
 3481 047b 0B       		.uleb128 0xb
 3482 047c 66030000 		.4byte	.LASF58
 3483 0480 01       		.byte	0x1
 3484 0481 0909     		.2byte	0x909
 3485 0483 6B000000 		.4byte	0x6b
 3486 0487 02       		.uleb128 0x2
 3487 0488 91       		.byte	0x91
 3488 0489 6F       		.sleb128 -17
 3489 048a 0C       		.uleb128 0xc
 3490 048b 00000000 		.4byte	.LASF61
 3491 048f 01       		.byte	0x1
 3492 0490 0B09     		.2byte	0x90b
 3493 0492 5B040000 		.4byte	0x45b
 3494 0496 02       		.uleb128 0x2
 3495 0497 91       		.byte	0x91
 3496 0498 74       		.sleb128 -12
 3497 0499 00       		.byte	0
 3498 049a 0E       		.uleb128 0xe
 3499 049b 57030000 		.4byte	.LASF63
 3500 049f 01       		.byte	0x1
 3501 04a0 1F09     		.2byte	0x91f
 3502 04a2 D2000000 		.4byte	0xd2
 3503 04a6 00000000 		.4byte	.LFB22
 3504 04aa 4C000000 		.4byte	.LFE22-.LFB22
 3505 04ae 01       		.uleb128 0x1
 3506 04af 9C       		.byte	0x9c
 3507 04b0 F1040000 		.4byte	0x4f1
 3508 04b4 0B       		.uleb128 0xb
 3509 04b5 66030000 		.4byte	.LASF58
 3510 04b9 01       		.byte	0x1
 3511 04ba 1F09     		.2byte	0x91f
 3512 04bc 6B000000 		.4byte	0x6b
 3513 04c0 02       		.uleb128 0x2
 3514 04c1 91       		.byte	0x91
 3515 04c2 6F       		.sleb128 -17
 3516 04c3 0B       		.uleb128 0xb
 3517 04c4 EF030000 		.4byte	.LASF59
 3518 04c8 01       		.byte	0x1
 3519 04c9 1F09     		.2byte	0x91f
 3520 04cb D2000000 		.4byte	0xd2
 3521 04cf 02       		.uleb128 0x2
 3522 04d0 91       		.byte	0x91
 3523 04d1 68       		.sleb128 -24
 3524 04d2 0C       		.uleb128 0xc
 3525 04d3 BE000000 		.4byte	.LASF60
 3526 04d7 01       		.byte	0x1
 3527 04d8 2109     		.2byte	0x921
 3528 04da D2000000 		.4byte	0xd2
 3529 04de 02       		.uleb128 0x2
 3530 04df 91       		.byte	0x91
 3531 04e0 70       		.sleb128 -16
 3532 04e1 0C       		.uleb128 0xc
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 116


 3533 04e2 00000000 		.4byte	.LASF61
 3534 04e6 01       		.byte	0x1
 3535 04e7 2209     		.2byte	0x922
 3536 04e9 5B040000 		.4byte	0x45b
 3537 04ed 02       		.uleb128 0x2
 3538 04ee 91       		.byte	0x91
 3539 04ef 74       		.sleb128 -12
 3540 04f0 00       		.byte	0
 3541 04f1 0E       		.uleb128 0xe
 3542 04f2 7E040000 		.4byte	.LASF64
 3543 04f6 01       		.byte	0x1
 3544 04f7 3B09     		.2byte	0x93b
 3545 04f9 D2000000 		.4byte	0xd2
 3546 04fd 00000000 		.4byte	.LFB23
 3547 0501 36000000 		.4byte	.LFE23-.LFB23
 3548 0505 01       		.uleb128 0x1
 3549 0506 9C       		.byte	0x9c
 3550 0507 2A050000 		.4byte	0x52a
 3551 050b 0B       		.uleb128 0xb
 3552 050c 66030000 		.4byte	.LASF58
 3553 0510 01       		.byte	0x1
 3554 0511 3B09     		.2byte	0x93b
 3555 0513 6B000000 		.4byte	0x6b
 3556 0517 02       		.uleb128 0x2
 3557 0518 91       		.byte	0x91
 3558 0519 6F       		.sleb128 -17
 3559 051a 0C       		.uleb128 0xc
 3560 051b 00000000 		.4byte	.LASF61
 3561 051f 01       		.byte	0x1
 3562 0520 3D09     		.2byte	0x93d
 3563 0522 5B040000 		.4byte	0x45b
 3564 0526 02       		.uleb128 0x2
 3565 0527 91       		.byte	0x91
 3566 0528 74       		.sleb128 -12
 3567 0529 00       		.byte	0
 3568 052a 0A       		.uleb128 0xa
 3569 052b 46040000 		.4byte	.LASF65
 3570 052f 01       		.byte	0x1
 3571 0530 4E09     		.2byte	0x94e
 3572 0532 00000000 		.4byte	.LFB24
 3573 0536 A8000000 		.4byte	.LFE24-.LFB24
 3574 053a 01       		.uleb128 0x1
 3575 053b 9C       		.byte	0x9c
 3576 053c 8C050000 		.4byte	0x58c
 3577 0540 0B       		.uleb128 0xb
 3578 0541 66030000 		.4byte	.LASF58
 3579 0545 01       		.byte	0x1
 3580 0546 4E09     		.2byte	0x94e
 3581 0548 6B000000 		.4byte	0x6b
 3582 054c 02       		.uleb128 0x2
 3583 054d 91       		.byte	0x91
 3584 054e 5F       		.sleb128 -33
 3585 054f 0B       		.uleb128 0xb
 3586 0550 6D030000 		.4byte	.LASF66
 3587 0554 01       		.byte	0x1
 3588 0555 4E09     		.2byte	0x94e
 3589 0557 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 117


 3590 055b 02       		.uleb128 0x2
 3591 055c 91       		.byte	0x91
 3592 055d 5E       		.sleb128 -34
 3593 055e 0C       		.uleb128 0xc
 3594 055f 86010000 		.4byte	.LASF23
 3595 0563 01       		.byte	0x1
 3596 0564 5009     		.2byte	0x950
 3597 0566 6B000000 		.4byte	0x6b
 3598 056a 02       		.uleb128 0x2
 3599 056b 91       		.byte	0x91
 3600 056c 6B       		.sleb128 -21
 3601 056d 0C       		.uleb128 0xc
 3602 056e F6010000 		.4byte	.LASF67
 3603 0572 01       		.byte	0x1
 3604 0573 5109     		.2byte	0x951
 3605 0575 83000000 		.4byte	0x83
 3606 0579 02       		.uleb128 0x2
 3607 057a 91       		.byte	0x91
 3608 057b 6C       		.sleb128 -20
 3609 057c 0C       		.uleb128 0xc
 3610 057d 79020000 		.4byte	.LASF68
 3611 0581 01       		.byte	0x1
 3612 0582 5209     		.2byte	0x952
 3613 0584 83000000 		.4byte	0x83
 3614 0588 02       		.uleb128 0x2
 3615 0589 91       		.byte	0x91
 3616 058a 64       		.sleb128 -28
 3617 058b 00       		.byte	0
 3618 058c 0E       		.uleb128 0xe
 3619 058d 4D020000 		.4byte	.LASF69
 3620 0591 01       		.byte	0x1
 3621 0592 7009     		.2byte	0x970
 3622 0594 6B000000 		.4byte	0x6b
 3623 0598 00000000 		.4byte	.LFB25
 3624 059c 5C000000 		.4byte	.LFE25-.LFB25
 3625 05a0 01       		.uleb128 0x1
 3626 05a1 9C       		.byte	0x9c
 3627 05a2 C5050000 		.4byte	0x5c5
 3628 05a6 0B       		.uleb128 0xb
 3629 05a7 66030000 		.4byte	.LASF58
 3630 05ab 01       		.byte	0x1
 3631 05ac 7009     		.2byte	0x970
 3632 05ae 6B000000 		.4byte	0x6b
 3633 05b2 02       		.uleb128 0x2
 3634 05b3 91       		.byte	0x91
 3635 05b4 6F       		.sleb128 -17
 3636 05b5 0C       		.uleb128 0xc
 3637 05b6 6D030000 		.4byte	.LASF66
 3638 05ba 01       		.byte	0x1
 3639 05bb 7209     		.2byte	0x972
 3640 05bd 6B000000 		.4byte	0x6b
 3641 05c1 02       		.uleb128 0x2
 3642 05c2 91       		.byte	0x91
 3643 05c3 77       		.sleb128 -9
 3644 05c4 00       		.byte	0
 3645 05c5 0D       		.uleb128 0xd
 3646 05c6 C8040000 		.4byte	.LASF70
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 118


 3647 05ca 01       		.byte	0x1
 3648 05cb 8509     		.2byte	0x985
 3649 05cd 00000000 		.4byte	.LFB26
 3650 05d1 28000000 		.4byte	.LFE26-.LFB26
 3651 05d5 01       		.uleb128 0x1
 3652 05d6 9C       		.byte	0x9c
 3653 05d7 EB050000 		.4byte	0x5eb
 3654 05db 0B       		.uleb128 0xb
 3655 05dc 66030000 		.4byte	.LASF58
 3656 05e0 01       		.byte	0x1
 3657 05e1 8509     		.2byte	0x985
 3658 05e3 6B000000 		.4byte	0x6b
 3659 05e7 02       		.uleb128 0x2
 3660 05e8 91       		.byte	0x91
 3661 05e9 77       		.sleb128 -9
 3662 05ea 00       		.byte	0
 3663 05eb 10       		.uleb128 0x10
 3664 05ec 4D010000 		.4byte	.LASF71
 3665 05f0 01       		.byte	0x1
 3666 05f1 9709     		.2byte	0x997
 3667 05f3 6B000000 		.4byte	0x6b
 3668 05f7 00000000 		.4byte	.LFB27
 3669 05fb 30000000 		.4byte	.LFE27-.LFB27
 3670 05ff 01       		.uleb128 0x1
 3671 0600 9C       		.byte	0x9c
 3672 0601 15060000 		.4byte	0x615
 3673 0605 0B       		.uleb128 0xb
 3674 0606 66030000 		.4byte	.LASF58
 3675 060a 01       		.byte	0x1
 3676 060b 9709     		.2byte	0x997
 3677 060d 6B000000 		.4byte	0x6b
 3678 0611 02       		.uleb128 0x2
 3679 0612 91       		.byte	0x91
 3680 0613 77       		.sleb128 -9
 3681 0614 00       		.byte	0
 3682 0615 0D       		.uleb128 0xd
 3683 0616 B1010000 		.4byte	.LASF72
 3684 061a 01       		.byte	0x1
 3685 061b A709     		.2byte	0x9a7
 3686 061d 00000000 		.4byte	.LFB28
 3687 0621 28000000 		.4byte	.LFE28-.LFB28
 3688 0625 01       		.uleb128 0x1
 3689 0626 9C       		.byte	0x9c
 3690 0627 3B060000 		.4byte	0x63b
 3691 062b 0B       		.uleb128 0xb
 3692 062c 66030000 		.4byte	.LASF58
 3693 0630 01       		.byte	0x1
 3694 0631 A709     		.2byte	0x9a7
 3695 0633 6B000000 		.4byte	0x6b
 3696 0637 02       		.uleb128 0x2
 3697 0638 91       		.byte	0x91
 3698 0639 77       		.sleb128 -9
 3699 063a 00       		.byte	0
 3700 063b 0D       		.uleb128 0xd
 3701 063c 08030000 		.4byte	.LASF73
 3702 0640 01       		.byte	0x1
 3703 0641 B509     		.2byte	0x9b5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 119


 3704 0643 00000000 		.4byte	.LFB29
 3705 0647 28000000 		.4byte	.LFE29-.LFB29
 3706 064b 01       		.uleb128 0x1
 3707 064c 9C       		.byte	0x9c
 3708 064d 61060000 		.4byte	0x661
 3709 0651 0B       		.uleb128 0xb
 3710 0652 66030000 		.4byte	.LASF58
 3711 0656 01       		.byte	0x1
 3712 0657 B509     		.2byte	0x9b5
 3713 0659 6B000000 		.4byte	0x6b
 3714 065d 02       		.uleb128 0x2
 3715 065e 91       		.byte	0x91
 3716 065f 77       		.sleb128 -9
 3717 0660 00       		.byte	0
 3718 0661 0D       		.uleb128 0xd
 3719 0662 DD030000 		.4byte	.LASF74
 3720 0666 01       		.byte	0x1
 3721 0667 C409     		.2byte	0x9c4
 3722 0669 00000000 		.4byte	.LFB30
 3723 066d 28000000 		.4byte	.LFE30-.LFB30
 3724 0671 01       		.uleb128 0x1
 3725 0672 9C       		.byte	0x9c
 3726 0673 87060000 		.4byte	0x687
 3727 0677 0B       		.uleb128 0xb
 3728 0678 66030000 		.4byte	.LASF58
 3729 067c 01       		.byte	0x1
 3730 067d C409     		.2byte	0x9c4
 3731 067f 6B000000 		.4byte	0x6b
 3732 0683 02       		.uleb128 0x2
 3733 0684 91       		.byte	0x91
 3734 0685 77       		.sleb128 -9
 3735 0686 00       		.byte	0
 3736 0687 0D       		.uleb128 0xd
 3737 0688 A9040000 		.4byte	.LASF75
 3738 068c 01       		.byte	0x1
 3739 068d D309     		.2byte	0x9d3
 3740 068f 00000000 		.4byte	.LFB31
 3741 0693 14000000 		.4byte	.LFE31-.LFB31
 3742 0697 01       		.uleb128 0x1
 3743 0698 9C       		.byte	0x9c
 3744 0699 AD060000 		.4byte	0x6ad
 3745 069d 0B       		.uleb128 0xb
 3746 069e 0B050000 		.4byte	.LASF52
 3747 06a2 01       		.byte	0x1
 3748 06a3 D309     		.2byte	0x9d3
 3749 06a5 6B000000 		.4byte	0x6b
 3750 06a9 02       		.uleb128 0x2
 3751 06aa 91       		.byte	0x91
 3752 06ab 77       		.sleb128 -9
 3753 06ac 00       		.byte	0
 3754 06ad 0F       		.uleb128 0xf
 3755 06ae 24010000 		.4byte	.LASF76
 3756 06b2 01       		.byte	0x1
 3757 06b3 EB09     		.2byte	0x9eb
 3758 06b5 00000000 		.4byte	.LFB32
 3759 06b9 20000000 		.4byte	.LFE32-.LFB32
 3760 06bd 01       		.uleb128 0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 120


 3761 06be 9C       		.byte	0x9c
 3762 06bf 0A       		.uleb128 0xa
 3763 06c0 8A050000 		.4byte	.LASF77
 3764 06c4 01       		.byte	0x1
 3765 06c5 FF09     		.2byte	0x9ff
 3766 06c7 00000000 		.4byte	.LFB33
 3767 06cb 48000000 		.4byte	.LFE33-.LFB33
 3768 06cf 01       		.uleb128 0x1
 3769 06d0 9C       		.byte	0x9c
 3770 06d1 E5060000 		.4byte	0x6e5
 3771 06d5 0B       		.uleb128 0xb
 3772 06d6 8D040000 		.4byte	.LASF78
 3773 06da 01       		.byte	0x1
 3774 06db FF09     		.2byte	0x9ff
 3775 06dd 83000000 		.4byte	0x83
 3776 06e1 02       		.uleb128 0x2
 3777 06e2 91       		.byte	0x91
 3778 06e3 74       		.sleb128 -12
 3779 06e4 00       		.byte	0
 3780 06e5 0A       		.uleb128 0xa
 3781 06e6 01050000 		.4byte	.LASF79
 3782 06ea 01       		.byte	0x1
 3783 06eb 160A     		.2byte	0xa16
 3784 06ed 00000000 		.4byte	.LFB34
 3785 06f1 28000000 		.4byte	.LFE34-.LFB34
 3786 06f5 01       		.uleb128 0x1
 3787 06f6 9C       		.byte	0x9c
 3788 06f7 0B070000 		.4byte	0x70b
 3789 06fb 0B       		.uleb128 0xb
 3790 06fc FF060000 		.4byte	.LASF80
 3791 0700 01       		.byte	0x1
 3792 0701 160A     		.2byte	0xa16
 3793 0703 77000000 		.4byte	0x77
 3794 0707 02       		.uleb128 0x2
 3795 0708 91       		.byte	0x91
 3796 0709 76       		.sleb128 -10
 3797 070a 00       		.byte	0
 3798 070b 0A       		.uleb128 0xa
 3799 070c 7A010000 		.4byte	.LASF81
 3800 0710 01       		.byte	0x1
 3801 0711 240A     		.2byte	0xa24
 3802 0713 00000000 		.4byte	.LFB35
 3803 0717 84000000 		.4byte	.LFE35-.LFB35
 3804 071b 01       		.uleb128 0x1
 3805 071c 9C       		.byte	0x9c
 3806 071d 31070000 		.4byte	0x731
 3807 0721 0B       		.uleb128 0xb
 3808 0722 75010000 		.4byte	.LASF33
 3809 0726 01       		.byte	0x1
 3810 0727 240A     		.2byte	0xa24
 3811 0729 83000000 		.4byte	0x83
 3812 072d 02       		.uleb128 0x2
 3813 072e 91       		.byte	0x91
 3814 072f 74       		.sleb128 -12
 3815 0730 00       		.byte	0
 3816 0731 12       		.uleb128 0x12
 3817 0732 B8030000 		.4byte	.LASF82
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 121


 3818 0736 01       		.byte	0x1
 3819 0737 440A     		.2byte	0xa44
 3820 0739 00000000 		.4byte	.LFB36
 3821 073d 24000000 		.4byte	.LFE36-.LFB36
 3822 0741 01       		.uleb128 0x1
 3823 0742 9C       		.byte	0x9c
 3824 0743 0A       		.uleb128 0xa
 3825 0744 6B020000 		.4byte	.LASF83
 3826 0748 01       		.byte	0x1
 3827 0749 610A     		.2byte	0xa61
 3828 074b 00000000 		.4byte	.LFB37
 3829 074f 64000000 		.4byte	.LFE37-.LFB37
 3830 0753 01       		.uleb128 0x1
 3831 0754 9C       		.byte	0x9c
 3832 0755 67070000 		.4byte	0x767
 3833 0759 13       		.uleb128 0x13
 3834 075a 6900     		.ascii	"i\000"
 3835 075c 01       		.byte	0x1
 3836 075d 630A     		.2byte	0xa63
 3837 075f 83000000 		.4byte	0x83
 3838 0763 02       		.uleb128 0x2
 3839 0764 91       		.byte	0x91
 3840 0765 74       		.sleb128 -12
 3841 0766 00       		.byte	0
 3842 0767 12       		.uleb128 0x12
 3843 0768 24050000 		.4byte	.LASF84
 3844 076c 01       		.byte	0x1
 3845 076d 800A     		.2byte	0xa80
 3846 076f 00000000 		.4byte	.LFB38
 3847 0773 1C000000 		.4byte	.LFE38-.LFB38
 3848 0777 01       		.uleb128 0x1
 3849 0778 9C       		.byte	0x9c
 3850 0779 0F       		.uleb128 0xf
 3851 077a F3050000 		.4byte	.LASF85
 3852 077e 01       		.byte	0x1
 3853 077f 910A     		.2byte	0xa91
 3854 0781 00000000 		.4byte	.LFB39
 3855 0785 18000000 		.4byte	.LFE39-.LFB39
 3856 0789 01       		.uleb128 0x1
 3857 078a 9C       		.byte	0x9c
 3858 078b 0F       		.uleb128 0xf
 3859 078c 34010000 		.4byte	.LASF86
 3860 0790 01       		.byte	0x1
 3861 0791 A10A     		.2byte	0xaa1
 3862 0793 00000000 		.4byte	.LFB40
 3863 0797 18000000 		.4byte	.LFE40-.LFB40
 3864 079b 01       		.uleb128 0x1
 3865 079c 9C       		.byte	0x9c
 3866 079d 0F       		.uleb128 0xf
 3867 079e AA050000 		.4byte	.LASF87
 3868 07a2 01       		.byte	0x1
 3869 07a3 B10A     		.2byte	0xab1
 3870 07a5 00000000 		.4byte	.LFB41
 3871 07a9 18000000 		.4byte	.LFE41-.LFB41
 3872 07ad 01       		.uleb128 0x1
 3873 07ae 9C       		.byte	0x9c
 3874 07af 0D       		.uleb128 0xd
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 122


 3875 07b0 13070000 		.4byte	.LASF88
 3876 07b4 01       		.byte	0x1
 3877 07b5 C20A     		.2byte	0xac2
 3878 07b7 00000000 		.4byte	.LFB42
 3879 07bb 1C000000 		.4byte	.LFE42-.LFB42
 3880 07bf 01       		.uleb128 0x1
 3881 07c0 9C       		.byte	0x9c
 3882 07c1 D5070000 		.4byte	0x7d5
 3883 07c5 0B       		.uleb128 0xb
 3884 07c6 79020000 		.4byte	.LASF68
 3885 07ca 01       		.byte	0x1
 3886 07cb C20A     		.2byte	0xac2
 3887 07cd 83000000 		.4byte	0x83
 3888 07d1 02       		.uleb128 0x2
 3889 07d2 91       		.byte	0x91
 3890 07d3 74       		.sleb128 -12
 3891 07d4 00       		.byte	0
 3892 07d5 11       		.uleb128 0x11
 3893 07d6 95010000 		.4byte	.LASF90
 3894 07da 01       		.byte	0x1
 3895 07db D20A     		.2byte	0xad2
 3896 07dd 83000000 		.4byte	0x83
 3897 07e1 00000000 		.4byte	.LFB43
 3898 07e5 18000000 		.4byte	.LFE43-.LFB43
 3899 07e9 01       		.uleb128 0x1
 3900 07ea 9C       		.byte	0x9c
 3901 07eb 11       		.uleb128 0x11
 3902 07ec 26040000 		.4byte	.LASF91
 3903 07f0 01       		.byte	0x1
 3904 07f1 E20A     		.2byte	0xae2
 3905 07f3 83000000 		.4byte	0x83
 3906 07f7 00000000 		.4byte	.LFB44
 3907 07fb 18000000 		.4byte	.LFE44-.LFB44
 3908 07ff 01       		.uleb128 0x1
 3909 0800 9C       		.byte	0x9c
 3910 0801 0D       		.uleb128 0xd
 3911 0802 3F030000 		.4byte	.LASF92
 3912 0806 01       		.byte	0x1
 3913 0807 020B     		.2byte	0xb02
 3914 0809 00000000 		.4byte	.LFB45
 3915 080d 34000000 		.4byte	.LFE45-.LFB45
 3916 0811 01       		.uleb128 0x1
 3917 0812 9C       		.byte	0x9c
 3918 0813 27080000 		.4byte	0x827
 3919 0817 0B       		.uleb128 0xb
 3920 0818 7F020000 		.4byte	.LASF93
 3921 081c 01       		.byte	0x1
 3922 081d 020B     		.2byte	0xb02
 3923 081f 83000000 		.4byte	0x83
 3924 0823 02       		.uleb128 0x2
 3925 0824 91       		.byte	0x91
 3926 0825 74       		.sleb128 -12
 3927 0826 00       		.byte	0
 3928 0827 11       		.uleb128 0x11
 3929 0828 92050000 		.4byte	.LASF94
 3930 082c 01       		.byte	0x1
 3931 082d 1B0B     		.2byte	0xb1b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 123


 3932 082f 83000000 		.4byte	0x83
 3933 0833 00000000 		.4byte	.LFB46
 3934 0837 18000000 		.4byte	.LFE46-.LFB46
 3935 083b 01       		.uleb128 0x1
 3936 083c 9C       		.byte	0x9c
 3937 083d 11       		.uleb128 0x11
 3938 083e 99020000 		.4byte	.LASF95
 3939 0842 01       		.byte	0x1
 3940 0843 320B     		.2byte	0xb32
 3941 0845 83000000 		.4byte	0x83
 3942 0849 00000000 		.4byte	.LFB47
 3943 084d 18000000 		.4byte	.LFE47-.LFB47
 3944 0851 01       		.uleb128 0x1
 3945 0852 9C       		.byte	0x9c
 3946 0853 0F       		.uleb128 0xf
 3947 0854 BC020000 		.4byte	.LASF96
 3948 0858 01       		.byte	0x1
 3949 0859 3F0B     		.2byte	0xb3f
 3950 085b 00000000 		.4byte	.LFB48
 3951 085f 14000000 		.4byte	.LFE48-.LFB48
 3952 0863 01       		.uleb128 0x1
 3953 0864 9C       		.byte	0x9c
 3954 0865 10       		.uleb128 0x10
 3955 0866 4B050000 		.4byte	.LASF97
 3956 086a 01       		.byte	0x1
 3957 086b 620B     		.2byte	0xb62
 3958 086d EC000000 		.4byte	0xec
 3959 0871 00000000 		.4byte	.LFB49
 3960 0875 2C000000 		.4byte	.LFE49-.LFB49
 3961 0879 01       		.uleb128 0x1
 3962 087a 9C       		.byte	0x9c
 3963 087b AD080000 		.4byte	0x8ad
 3964 087f 0B       		.uleb128 0xb
 3965 0880 66030000 		.4byte	.LASF58
 3966 0884 01       		.byte	0x1
 3967 0885 620B     		.2byte	0xb62
 3968 0887 83000000 		.4byte	0x83
 3969 088b 02       		.uleb128 0x2
 3970 088c 91       		.byte	0x91
 3971 088d 6C       		.sleb128 -20
 3972 088e 0B       		.uleb128 0xb
 3973 088f 0C040000 		.4byte	.LASF98
 3974 0893 01       		.byte	0x1
 3975 0894 620B     		.2byte	0xb62
 3976 0896 EC000000 		.4byte	0xec
 3977 089a 02       		.uleb128 0x2
 3978 089b 91       		.byte	0x91
 3979 089c 68       		.sleb128 -24
 3980 089d 0C       		.uleb128 0xc
 3981 089e C5000000 		.4byte	.LASF99
 3982 08a2 01       		.byte	0x1
 3983 08a3 640B     		.2byte	0xb64
 3984 08a5 EC000000 		.4byte	0xec
 3985 08a9 02       		.uleb128 0x2
 3986 08aa 91       		.byte	0x91
 3987 08ab 74       		.sleb128 -12
 3988 08ac 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 124


 3989 08ad 10       		.uleb128 0x10
 3990 08ae BE010000 		.4byte	.LASF100
 3991 08b2 01       		.byte	0x1
 3992 08b3 7A0B     		.2byte	0xb7a
 3993 08b5 EC000000 		.4byte	0xec
 3994 08b9 00000000 		.4byte	.LFB50
 3995 08bd 1C000000 		.4byte	.LFE50-.LFB50
 3996 08c1 01       		.uleb128 0x1
 3997 08c2 9C       		.byte	0x9c
 3998 08c3 D7080000 		.4byte	0x8d7
 3999 08c7 0B       		.uleb128 0xb
 4000 08c8 66030000 		.4byte	.LASF58
 4001 08cc 01       		.byte	0x1
 4002 08cd 7A0B     		.2byte	0xb7a
 4003 08cf 83000000 		.4byte	0x83
 4004 08d3 02       		.uleb128 0x2
 4005 08d4 91       		.byte	0x91
 4006 08d5 74       		.sleb128 -12
 4007 08d6 00       		.byte	0
 4008 08d7 14       		.uleb128 0x14
 4009 08d8 26070000 		.4byte	.LASF114
 4010 08dc 01       		.byte	0x1
 4011 08dd 870B     		.2byte	0xb87
 4012 08df 00000000 		.4byte	.LFB51
 4013 08e3 44000000 		.4byte	.LFE51-.LFB51
 4014 08e7 01       		.uleb128 0x1
 4015 08e8 9C       		.byte	0x9c
 4016 08e9 FB080000 		.4byte	0x8fb
 4017 08ed 13       		.uleb128 0x13
 4018 08ee 6900     		.ascii	"i\000"
 4019 08f0 01       		.byte	0x1
 4020 08f1 890B     		.2byte	0xb89
 4021 08f3 83000000 		.4byte	0x83
 4022 08f7 02       		.uleb128 0x2
 4023 08f8 91       		.byte	0x91
 4024 08f9 74       		.sleb128 -12
 4025 08fa 00       		.byte	0
 4026 08fb 0D       		.uleb128 0xd
 4027 08fc 8B020000 		.4byte	.LASF101
 4028 0900 01       		.byte	0x1
 4029 0901 A70B     		.2byte	0xba7
 4030 0903 00000000 		.4byte	.LFB52
 4031 0907 C0000000 		.4byte	.LFE52-.LFB52
 4032 090b 01       		.uleb128 0x1
 4033 090c 9C       		.byte	0x9c
 4034 090d 21090000 		.4byte	0x921
 4035 0911 0B       		.uleb128 0xb
 4036 0912 81050000 		.4byte	.LASF102
 4037 0916 01       		.byte	0x1
 4038 0917 A70B     		.2byte	0xba7
 4039 0919 21090000 		.4byte	0x921
 4040 091d 02       		.uleb128 0x2
 4041 091e 91       		.byte	0x91
 4042 091f 74       		.sleb128 -12
 4043 0920 00       		.byte	0
 4044 0921 06       		.uleb128 0x6
 4045 0922 04       		.byte	0x4
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 125


 4046 0923 83000000 		.4byte	0x83
 4047 0927 15       		.uleb128 0x15
 4048 0928 EC000000 		.4byte	0xec
 4049 092c 37090000 		.4byte	0x937
 4050 0930 16       		.uleb128 0x16
 4051 0931 E5000000 		.4byte	0xe5
 4052 0935 04       		.byte	0x4
 4053 0936 00       		.byte	0
 4054 0937 17       		.uleb128 0x17
 4055 0938 60050000 		.4byte	.LASF103
 4056 093c 01       		.byte	0x1
 4057 093d 22       		.byte	0x22
 4058 093e 27090000 		.4byte	0x927
 4059 0942 05       		.uleb128 0x5
 4060 0943 03       		.byte	0x3
 4061 0944 00000000 		.4byte	CySysTickCallbacks
 4062 0948 18       		.uleb128 0x18
 4063 0949 38040000 		.4byte	.LASF104
 4064 094d 01       		.byte	0x1
 4065 094e 1B       		.byte	0x1b
 4066 094f 83000000 		.4byte	0x83
 4067 0953 05       		.uleb128 0x5
 4068 0954 03       		.byte	0x3
 4069 0955 00000000 		.4byte	cydelayFreqHz
 4070 0959 18       		.uleb128 0x18
 4071 095a D9010000 		.4byte	.LASF105
 4072 095e 01       		.byte	0x1
 4073 095f 1C       		.byte	0x1c
 4074 0960 83000000 		.4byte	0x83
 4075 0964 05       		.uleb128 0x5
 4076 0965 03       		.byte	0x3
 4077 0966 00000000 		.4byte	cydelayFreqKhz
 4078 096a 18       		.uleb128 0x18
 4079 096b D4050000 		.4byte	.LASF106
 4080 096f 01       		.byte	0x1
 4081 0970 1D       		.byte	0x1d
 4082 0971 6B000000 		.4byte	0x6b
 4083 0975 05       		.uleb128 0x5
 4084 0976 03       		.byte	0x3
 4085 0977 00000000 		.4byte	cydelayFreqMhz
 4086 097b 18       		.uleb128 0x18
 4087 097c 5E020000 		.4byte	.LASF107
 4088 0980 01       		.byte	0x1
 4089 0981 1E       		.byte	0x1e
 4090 0982 83000000 		.4byte	0x83
 4091 0986 05       		.uleb128 0x5
 4092 0987 03       		.byte	0x3
 4093 0988 00000000 		.4byte	cydelay32kMs
 4094 098c 18       		.uleb128 0x18
 4095 098d 06010000 		.4byte	.LASF108
 4096 0991 01       		.byte	0x1
 4097 0992 36       		.byte	0x36
 4098 0993 83000000 		.4byte	0x83
 4099 0997 05       		.uleb128 0x5
 4100 0998 03       		.byte	0x3
 4101 0999 00000000 		.4byte	CySysTickInitVar
 4102 099d 15       		.uleb128 0x15
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 126


 4103 099e 6B000000 		.4byte	0x6b
 4104 09a2 AD090000 		.4byte	0x9ad
 4105 09a6 16       		.uleb128 0x16
 4106 09a7 E5000000 		.4byte	0xe5
 4107 09ab 2D       		.byte	0x2d
 4108 09ac 00       		.byte	0
 4109 09ad 18       		.uleb128 0x18
 4110 09ae 15040000 		.4byte	.LASF109
 4111 09b2 01       		.byte	0x1
 4112 09b3 3B       		.byte	0x3b
 4113 09b4 BE090000 		.4byte	0x9be
 4114 09b8 05       		.uleb128 0x5
 4115 09b9 03       		.byte	0x3
 4116 09ba 00000000 		.4byte	cyImoFreqMhz2Reg
 4117 09be 19       		.uleb128 0x19
 4118 09bf 9D090000 		.4byte	0x99d
 4119 09c3 18       		.uleb128 0x18
 4120 09c4 AB000000 		.4byte	.LASF110
 4121 09c8 01       		.byte	0x1
 4122 09c9 5B       		.byte	0x5b
 4123 09ca 83000000 		.4byte	0x83
 4124 09ce 05       		.uleb128 0x5
 4125 09cf 03       		.byte	0x3
 4126 09d0 00000000 		.4byte	CySysClkPumpConfig
 4127 09d4 00       		.byte	0
 4128              		.section	.debug_abbrev,"",%progbits
 4129              	.Ldebug_abbrev0:
 4130 0000 01       		.uleb128 0x1
 4131 0001 11       		.uleb128 0x11
 4132 0002 01       		.byte	0x1
 4133 0003 25       		.uleb128 0x25
 4134 0004 0E       		.uleb128 0xe
 4135 0005 13       		.uleb128 0x13
 4136 0006 0B       		.uleb128 0xb
 4137 0007 03       		.uleb128 0x3
 4138 0008 0E       		.uleb128 0xe
 4139 0009 1B       		.uleb128 0x1b
 4140 000a 0E       		.uleb128 0xe
 4141 000b 55       		.uleb128 0x55
 4142 000c 17       		.uleb128 0x17
 4143 000d 11       		.uleb128 0x11
 4144 000e 01       		.uleb128 0x1
 4145 000f 10       		.uleb128 0x10
 4146 0010 17       		.uleb128 0x17
 4147 0011 00       		.byte	0
 4148 0012 00       		.byte	0
 4149 0013 02       		.uleb128 0x2
 4150 0014 24       		.uleb128 0x24
 4151 0015 00       		.byte	0
 4152 0016 0B       		.uleb128 0xb
 4153 0017 0B       		.uleb128 0xb
 4154 0018 3E       		.uleb128 0x3e
 4155 0019 0B       		.uleb128 0xb
 4156 001a 03       		.uleb128 0x3
 4157 001b 0E       		.uleb128 0xe
 4158 001c 00       		.byte	0
 4159 001d 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 127


 4160 001e 03       		.uleb128 0x3
 4161 001f 24       		.uleb128 0x24
 4162 0020 00       		.byte	0
 4163 0021 0B       		.uleb128 0xb
 4164 0022 0B       		.uleb128 0xb
 4165 0023 3E       		.uleb128 0x3e
 4166 0024 0B       		.uleb128 0xb
 4167 0025 03       		.uleb128 0x3
 4168 0026 08       		.uleb128 0x8
 4169 0027 00       		.byte	0
 4170 0028 00       		.byte	0
 4171 0029 04       		.uleb128 0x4
 4172 002a 16       		.uleb128 0x16
 4173 002b 00       		.byte	0
 4174 002c 03       		.uleb128 0x3
 4175 002d 0E       		.uleb128 0xe
 4176 002e 3A       		.uleb128 0x3a
 4177 002f 0B       		.uleb128 0xb
 4178 0030 3B       		.uleb128 0x3b
 4179 0031 05       		.uleb128 0x5
 4180 0032 49       		.uleb128 0x49
 4181 0033 13       		.uleb128 0x13
 4182 0034 00       		.byte	0
 4183 0035 00       		.byte	0
 4184 0036 05       		.uleb128 0x5
 4185 0037 35       		.uleb128 0x35
 4186 0038 00       		.byte	0
 4187 0039 49       		.uleb128 0x49
 4188 003a 13       		.uleb128 0x13
 4189 003b 00       		.byte	0
 4190 003c 00       		.byte	0
 4191 003d 06       		.uleb128 0x6
 4192 003e 0F       		.uleb128 0xf
 4193 003f 00       		.byte	0
 4194 0040 0B       		.uleb128 0xb
 4195 0041 0B       		.uleb128 0xb
 4196 0042 49       		.uleb128 0x49
 4197 0043 13       		.uleb128 0x13
 4198 0044 00       		.byte	0
 4199 0045 00       		.byte	0
 4200 0046 07       		.uleb128 0x7
 4201 0047 15       		.uleb128 0x15
 4202 0048 00       		.byte	0
 4203 0049 27       		.uleb128 0x27
 4204 004a 19       		.uleb128 0x19
 4205 004b 00       		.byte	0
 4206 004c 00       		.byte	0
 4207 004d 08       		.uleb128 0x8
 4208 004e 16       		.uleb128 0x16
 4209 004f 00       		.byte	0
 4210 0050 03       		.uleb128 0x3
 4211 0051 0E       		.uleb128 0xe
 4212 0052 3A       		.uleb128 0x3a
 4213 0053 0B       		.uleb128 0xb
 4214 0054 3B       		.uleb128 0x3b
 4215 0055 0B       		.uleb128 0xb
 4216 0056 49       		.uleb128 0x49
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 128


 4217 0057 13       		.uleb128 0x13
 4218 0058 00       		.byte	0
 4219 0059 00       		.byte	0
 4220 005a 09       		.uleb128 0x9
 4221 005b 2E       		.uleb128 0x2e
 4222 005c 00       		.byte	0
 4223 005d 3F       		.uleb128 0x3f
 4224 005e 19       		.uleb128 0x19
 4225 005f 03       		.uleb128 0x3
 4226 0060 0E       		.uleb128 0xe
 4227 0061 3A       		.uleb128 0x3a
 4228 0062 0B       		.uleb128 0xb
 4229 0063 3B       		.uleb128 0x3b
 4230 0064 0B       		.uleb128 0xb
 4231 0065 27       		.uleb128 0x27
 4232 0066 19       		.uleb128 0x19
 4233 0067 11       		.uleb128 0x11
 4234 0068 01       		.uleb128 0x1
 4235 0069 12       		.uleb128 0x12
 4236 006a 06       		.uleb128 0x6
 4237 006b 40       		.uleb128 0x40
 4238 006c 18       		.uleb128 0x18
 4239 006d 9742     		.uleb128 0x2117
 4240 006f 19       		.uleb128 0x19
 4241 0070 00       		.byte	0
 4242 0071 00       		.byte	0
 4243 0072 0A       		.uleb128 0xa
 4244 0073 2E       		.uleb128 0x2e
 4245 0074 01       		.byte	0x1
 4246 0075 3F       		.uleb128 0x3f
 4247 0076 19       		.uleb128 0x19
 4248 0077 03       		.uleb128 0x3
 4249 0078 0E       		.uleb128 0xe
 4250 0079 3A       		.uleb128 0x3a
 4251 007a 0B       		.uleb128 0xb
 4252 007b 3B       		.uleb128 0x3b
 4253 007c 05       		.uleb128 0x5
 4254 007d 27       		.uleb128 0x27
 4255 007e 19       		.uleb128 0x19
 4256 007f 11       		.uleb128 0x11
 4257 0080 01       		.uleb128 0x1
 4258 0081 12       		.uleb128 0x12
 4259 0082 06       		.uleb128 0x6
 4260 0083 40       		.uleb128 0x40
 4261 0084 18       		.uleb128 0x18
 4262 0085 9642     		.uleb128 0x2116
 4263 0087 19       		.uleb128 0x19
 4264 0088 01       		.uleb128 0x1
 4265 0089 13       		.uleb128 0x13
 4266 008a 00       		.byte	0
 4267 008b 00       		.byte	0
 4268 008c 0B       		.uleb128 0xb
 4269 008d 05       		.uleb128 0x5
 4270 008e 00       		.byte	0
 4271 008f 03       		.uleb128 0x3
 4272 0090 0E       		.uleb128 0xe
 4273 0091 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 129


 4274 0092 0B       		.uleb128 0xb
 4275 0093 3B       		.uleb128 0x3b
 4276 0094 05       		.uleb128 0x5
 4277 0095 49       		.uleb128 0x49
 4278 0096 13       		.uleb128 0x13
 4279 0097 02       		.uleb128 0x2
 4280 0098 18       		.uleb128 0x18
 4281 0099 00       		.byte	0
 4282 009a 00       		.byte	0
 4283 009b 0C       		.uleb128 0xc
 4284 009c 34       		.uleb128 0x34
 4285 009d 00       		.byte	0
 4286 009e 03       		.uleb128 0x3
 4287 009f 0E       		.uleb128 0xe
 4288 00a0 3A       		.uleb128 0x3a
 4289 00a1 0B       		.uleb128 0xb
 4290 00a2 3B       		.uleb128 0x3b
 4291 00a3 05       		.uleb128 0x5
 4292 00a4 49       		.uleb128 0x49
 4293 00a5 13       		.uleb128 0x13
 4294 00a6 02       		.uleb128 0x2
 4295 00a7 18       		.uleb128 0x18
 4296 00a8 00       		.byte	0
 4297 00a9 00       		.byte	0
 4298 00aa 0D       		.uleb128 0xd
 4299 00ab 2E       		.uleb128 0x2e
 4300 00ac 01       		.byte	0x1
 4301 00ad 3F       		.uleb128 0x3f
 4302 00ae 19       		.uleb128 0x19
 4303 00af 03       		.uleb128 0x3
 4304 00b0 0E       		.uleb128 0xe
 4305 00b1 3A       		.uleb128 0x3a
 4306 00b2 0B       		.uleb128 0xb
 4307 00b3 3B       		.uleb128 0x3b
 4308 00b4 05       		.uleb128 0x5
 4309 00b5 27       		.uleb128 0x27
 4310 00b6 19       		.uleb128 0x19
 4311 00b7 11       		.uleb128 0x11
 4312 00b8 01       		.uleb128 0x1
 4313 00b9 12       		.uleb128 0x12
 4314 00ba 06       		.uleb128 0x6
 4315 00bb 40       		.uleb128 0x40
 4316 00bc 18       		.uleb128 0x18
 4317 00bd 9742     		.uleb128 0x2117
 4318 00bf 19       		.uleb128 0x19
 4319 00c0 01       		.uleb128 0x1
 4320 00c1 13       		.uleb128 0x13
 4321 00c2 00       		.byte	0
 4322 00c3 00       		.byte	0
 4323 00c4 0E       		.uleb128 0xe
 4324 00c5 2E       		.uleb128 0x2e
 4325 00c6 01       		.byte	0x1
 4326 00c7 3F       		.uleb128 0x3f
 4327 00c8 19       		.uleb128 0x19
 4328 00c9 03       		.uleb128 0x3
 4329 00ca 0E       		.uleb128 0xe
 4330 00cb 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 130


 4331 00cc 0B       		.uleb128 0xb
 4332 00cd 3B       		.uleb128 0x3b
 4333 00ce 05       		.uleb128 0x5
 4334 00cf 27       		.uleb128 0x27
 4335 00d0 19       		.uleb128 0x19
 4336 00d1 49       		.uleb128 0x49
 4337 00d2 13       		.uleb128 0x13
 4338 00d3 11       		.uleb128 0x11
 4339 00d4 01       		.uleb128 0x1
 4340 00d5 12       		.uleb128 0x12
 4341 00d6 06       		.uleb128 0x6
 4342 00d7 40       		.uleb128 0x40
 4343 00d8 18       		.uleb128 0x18
 4344 00d9 9642     		.uleb128 0x2116
 4345 00db 19       		.uleb128 0x19
 4346 00dc 01       		.uleb128 0x1
 4347 00dd 13       		.uleb128 0x13
 4348 00de 00       		.byte	0
 4349 00df 00       		.byte	0
 4350 00e0 0F       		.uleb128 0xf
 4351 00e1 2E       		.uleb128 0x2e
 4352 00e2 00       		.byte	0
 4353 00e3 3F       		.uleb128 0x3f
 4354 00e4 19       		.uleb128 0x19
 4355 00e5 03       		.uleb128 0x3
 4356 00e6 0E       		.uleb128 0xe
 4357 00e7 3A       		.uleb128 0x3a
 4358 00e8 0B       		.uleb128 0xb
 4359 00e9 3B       		.uleb128 0x3b
 4360 00ea 05       		.uleb128 0x5
 4361 00eb 27       		.uleb128 0x27
 4362 00ec 19       		.uleb128 0x19
 4363 00ed 11       		.uleb128 0x11
 4364 00ee 01       		.uleb128 0x1
 4365 00ef 12       		.uleb128 0x12
 4366 00f0 06       		.uleb128 0x6
 4367 00f1 40       		.uleb128 0x40
 4368 00f2 18       		.uleb128 0x18
 4369 00f3 9742     		.uleb128 0x2117
 4370 00f5 19       		.uleb128 0x19
 4371 00f6 00       		.byte	0
 4372 00f7 00       		.byte	0
 4373 00f8 10       		.uleb128 0x10
 4374 00f9 2E       		.uleb128 0x2e
 4375 00fa 01       		.byte	0x1
 4376 00fb 3F       		.uleb128 0x3f
 4377 00fc 19       		.uleb128 0x19
 4378 00fd 03       		.uleb128 0x3
 4379 00fe 0E       		.uleb128 0xe
 4380 00ff 3A       		.uleb128 0x3a
 4381 0100 0B       		.uleb128 0xb
 4382 0101 3B       		.uleb128 0x3b
 4383 0102 05       		.uleb128 0x5
 4384 0103 27       		.uleb128 0x27
 4385 0104 19       		.uleb128 0x19
 4386 0105 49       		.uleb128 0x49
 4387 0106 13       		.uleb128 0x13
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 131


 4388 0107 11       		.uleb128 0x11
 4389 0108 01       		.uleb128 0x1
 4390 0109 12       		.uleb128 0x12
 4391 010a 06       		.uleb128 0x6
 4392 010b 40       		.uleb128 0x40
 4393 010c 18       		.uleb128 0x18
 4394 010d 9742     		.uleb128 0x2117
 4395 010f 19       		.uleb128 0x19
 4396 0110 01       		.uleb128 0x1
 4397 0111 13       		.uleb128 0x13
 4398 0112 00       		.byte	0
 4399 0113 00       		.byte	0
 4400 0114 11       		.uleb128 0x11
 4401 0115 2E       		.uleb128 0x2e
 4402 0116 00       		.byte	0
 4403 0117 3F       		.uleb128 0x3f
 4404 0118 19       		.uleb128 0x19
 4405 0119 03       		.uleb128 0x3
 4406 011a 0E       		.uleb128 0xe
 4407 011b 3A       		.uleb128 0x3a
 4408 011c 0B       		.uleb128 0xb
 4409 011d 3B       		.uleb128 0x3b
 4410 011e 05       		.uleb128 0x5
 4411 011f 27       		.uleb128 0x27
 4412 0120 19       		.uleb128 0x19
 4413 0121 49       		.uleb128 0x49
 4414 0122 13       		.uleb128 0x13
 4415 0123 11       		.uleb128 0x11
 4416 0124 01       		.uleb128 0x1
 4417 0125 12       		.uleb128 0x12
 4418 0126 06       		.uleb128 0x6
 4419 0127 40       		.uleb128 0x40
 4420 0128 18       		.uleb128 0x18
 4421 0129 9742     		.uleb128 0x2117
 4422 012b 19       		.uleb128 0x19
 4423 012c 00       		.byte	0
 4424 012d 00       		.byte	0
 4425 012e 12       		.uleb128 0x12
 4426 012f 2E       		.uleb128 0x2e
 4427 0130 00       		.byte	0
 4428 0131 3F       		.uleb128 0x3f
 4429 0132 19       		.uleb128 0x19
 4430 0133 03       		.uleb128 0x3
 4431 0134 0E       		.uleb128 0xe
 4432 0135 3A       		.uleb128 0x3a
 4433 0136 0B       		.uleb128 0xb
 4434 0137 3B       		.uleb128 0x3b
 4435 0138 05       		.uleb128 0x5
 4436 0139 27       		.uleb128 0x27
 4437 013a 19       		.uleb128 0x19
 4438 013b 11       		.uleb128 0x11
 4439 013c 01       		.uleb128 0x1
 4440 013d 12       		.uleb128 0x12
 4441 013e 06       		.uleb128 0x6
 4442 013f 40       		.uleb128 0x40
 4443 0140 18       		.uleb128 0x18
 4444 0141 9642     		.uleb128 0x2116
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 132


 4445 0143 19       		.uleb128 0x19
 4446 0144 00       		.byte	0
 4447 0145 00       		.byte	0
 4448 0146 13       		.uleb128 0x13
 4449 0147 34       		.uleb128 0x34
 4450 0148 00       		.byte	0
 4451 0149 03       		.uleb128 0x3
 4452 014a 08       		.uleb128 0x8
 4453 014b 3A       		.uleb128 0x3a
 4454 014c 0B       		.uleb128 0xb
 4455 014d 3B       		.uleb128 0x3b
 4456 014e 05       		.uleb128 0x5
 4457 014f 49       		.uleb128 0x49
 4458 0150 13       		.uleb128 0x13
 4459 0151 02       		.uleb128 0x2
 4460 0152 18       		.uleb128 0x18
 4461 0153 00       		.byte	0
 4462 0154 00       		.byte	0
 4463 0155 14       		.uleb128 0x14
 4464 0156 2E       		.uleb128 0x2e
 4465 0157 01       		.byte	0x1
 4466 0158 03       		.uleb128 0x3
 4467 0159 0E       		.uleb128 0xe
 4468 015a 3A       		.uleb128 0x3a
 4469 015b 0B       		.uleb128 0xb
 4470 015c 3B       		.uleb128 0x3b
 4471 015d 05       		.uleb128 0x5
 4472 015e 27       		.uleb128 0x27
 4473 015f 19       		.uleb128 0x19
 4474 0160 11       		.uleb128 0x11
 4475 0161 01       		.uleb128 0x1
 4476 0162 12       		.uleb128 0x12
 4477 0163 06       		.uleb128 0x6
 4478 0164 40       		.uleb128 0x40
 4479 0165 18       		.uleb128 0x18
 4480 0166 9642     		.uleb128 0x2116
 4481 0168 19       		.uleb128 0x19
 4482 0169 01       		.uleb128 0x1
 4483 016a 13       		.uleb128 0x13
 4484 016b 00       		.byte	0
 4485 016c 00       		.byte	0
 4486 016d 15       		.uleb128 0x15
 4487 016e 01       		.uleb128 0x1
 4488 016f 01       		.byte	0x1
 4489 0170 49       		.uleb128 0x49
 4490 0171 13       		.uleb128 0x13
 4491 0172 01       		.uleb128 0x1
 4492 0173 13       		.uleb128 0x13
 4493 0174 00       		.byte	0
 4494 0175 00       		.byte	0
 4495 0176 16       		.uleb128 0x16
 4496 0177 21       		.uleb128 0x21
 4497 0178 00       		.byte	0
 4498 0179 49       		.uleb128 0x49
 4499 017a 13       		.uleb128 0x13
 4500 017b 2F       		.uleb128 0x2f
 4501 017c 0B       		.uleb128 0xb
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 133


 4502 017d 00       		.byte	0
 4503 017e 00       		.byte	0
 4504 017f 17       		.uleb128 0x17
 4505 0180 34       		.uleb128 0x34
 4506 0181 00       		.byte	0
 4507 0182 03       		.uleb128 0x3
 4508 0183 0E       		.uleb128 0xe
 4509 0184 3A       		.uleb128 0x3a
 4510 0185 0B       		.uleb128 0xb
 4511 0186 3B       		.uleb128 0x3b
 4512 0187 0B       		.uleb128 0xb
 4513 0188 49       		.uleb128 0x49
 4514 0189 13       		.uleb128 0x13
 4515 018a 02       		.uleb128 0x2
 4516 018b 18       		.uleb128 0x18
 4517 018c 00       		.byte	0
 4518 018d 00       		.byte	0
 4519 018e 18       		.uleb128 0x18
 4520 018f 34       		.uleb128 0x34
 4521 0190 00       		.byte	0
 4522 0191 03       		.uleb128 0x3
 4523 0192 0E       		.uleb128 0xe
 4524 0193 3A       		.uleb128 0x3a
 4525 0194 0B       		.uleb128 0xb
 4526 0195 3B       		.uleb128 0x3b
 4527 0196 0B       		.uleb128 0xb
 4528 0197 49       		.uleb128 0x49
 4529 0198 13       		.uleb128 0x13
 4530 0199 3F       		.uleb128 0x3f
 4531 019a 19       		.uleb128 0x19
 4532 019b 02       		.uleb128 0x2
 4533 019c 18       		.uleb128 0x18
 4534 019d 00       		.byte	0
 4535 019e 00       		.byte	0
 4536 019f 19       		.uleb128 0x19
 4537 01a0 26       		.uleb128 0x26
 4538 01a1 00       		.byte	0
 4539 01a2 49       		.uleb128 0x49
 4540 01a3 13       		.uleb128 0x13
 4541 01a4 00       		.byte	0
 4542 01a5 00       		.byte	0
 4543 01a6 00       		.byte	0
 4544              		.section	.debug_aranges,"",%progbits
 4545 0000 AC010000 		.4byte	0x1ac
 4546 0004 0200     		.2byte	0x2
 4547 0006 00000000 		.4byte	.Ldebug_info0
 4548 000a 04       		.byte	0x4
 4549 000b 00       		.byte	0
 4550 000c 0000     		.2byte	0
 4551 000e 0000     		.2byte	0
 4552 0010 00000000 		.4byte	.LFB2
 4553 0014 1C000000 		.4byte	.LFE2-.LFB2
 4554 0018 00000000 		.4byte	.LFB3
 4555 001c 18000000 		.4byte	.LFE3-.LFB3
 4556 0020 00000000 		.4byte	.LFB4
 4557 0024 48000000 		.4byte	.LFE4-.LFB4
 4558 0028 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 134


 4559 002c 50000000 		.4byte	.LFE5-.LFB5
 4560 0030 00000000 		.4byte	.LFB6
 4561 0034 34000000 		.4byte	.LFE6-.LFB6
 4562 0038 00000000 		.4byte	.LFB7
 4563 003c 44000000 		.4byte	.LFE7-.LFB7
 4564 0040 00000000 		.4byte	.LFB8
 4565 0044 EC010000 		.4byte	.LFE8-.LFB8
 4566 0048 00000000 		.4byte	.LFB9
 4567 004c 74000000 		.4byte	.LFE9-.LFB9
 4568 0050 00000000 		.4byte	.LFB10
 4569 0054 2C000000 		.4byte	.LFE10-.LFB10
 4570 0058 00000000 		.4byte	.LFB11
 4571 005c 20000000 		.4byte	.LFE11-.LFB11
 4572 0060 00000000 		.4byte	.LFB12
 4573 0064 58000000 		.4byte	.LFE12-.LFB12
 4574 0068 00000000 		.4byte	.LFB13
 4575 006c 60000000 		.4byte	.LFE13-.LFB13
 4576 0070 00000000 		.4byte	.LFB14
 4577 0074 28000000 		.4byte	.LFE14-.LFB14
 4578 0078 00000000 		.4byte	.LFB15
 4579 007c 18000000 		.4byte	.LFE15-.LFB15
 4580 0080 00000000 		.4byte	.LFB16
 4581 0084 14000000 		.4byte	.LFE16-.LFB16
 4582 0088 00000000 		.4byte	.LFB17
 4583 008c 30000000 		.4byte	.LFE17-.LFB17
 4584 0090 00000000 		.4byte	.LFB18
 4585 0094 24000000 		.4byte	.LFE18-.LFB18
 4586 0098 00000000 		.4byte	.LFB19
 4587 009c 18000000 		.4byte	.LFE19-.LFB19
 4588 00a0 00000000 		.4byte	.LFB20
 4589 00a4 48000000 		.4byte	.LFE20-.LFB20
 4590 00a8 00000000 		.4byte	.LFB21
 4591 00ac 34000000 		.4byte	.LFE21-.LFB21
 4592 00b0 00000000 		.4byte	.LFB22
 4593 00b4 4C000000 		.4byte	.LFE22-.LFB22
 4594 00b8 00000000 		.4byte	.LFB23
 4595 00bc 36000000 		.4byte	.LFE23-.LFB23
 4596 00c0 00000000 		.4byte	.LFB24
 4597 00c4 A8000000 		.4byte	.LFE24-.LFB24
 4598 00c8 00000000 		.4byte	.LFB25
 4599 00cc 5C000000 		.4byte	.LFE25-.LFB25
 4600 00d0 00000000 		.4byte	.LFB26
 4601 00d4 28000000 		.4byte	.LFE26-.LFB26
 4602 00d8 00000000 		.4byte	.LFB27
 4603 00dc 30000000 		.4byte	.LFE27-.LFB27
 4604 00e0 00000000 		.4byte	.LFB28
 4605 00e4 28000000 		.4byte	.LFE28-.LFB28
 4606 00e8 00000000 		.4byte	.LFB29
 4607 00ec 28000000 		.4byte	.LFE29-.LFB29
 4608 00f0 00000000 		.4byte	.LFB30
 4609 00f4 28000000 		.4byte	.LFE30-.LFB30
 4610 00f8 00000000 		.4byte	.LFB31
 4611 00fc 14000000 		.4byte	.LFE31-.LFB31
 4612 0100 00000000 		.4byte	.LFB32
 4613 0104 20000000 		.4byte	.LFE32-.LFB32
 4614 0108 00000000 		.4byte	.LFB33
 4615 010c 48000000 		.4byte	.LFE33-.LFB33
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 135


 4616 0110 00000000 		.4byte	.LFB34
 4617 0114 28000000 		.4byte	.LFE34-.LFB34
 4618 0118 00000000 		.4byte	.LFB35
 4619 011c 84000000 		.4byte	.LFE35-.LFB35
 4620 0120 00000000 		.4byte	.LFB36
 4621 0124 24000000 		.4byte	.LFE36-.LFB36
 4622 0128 00000000 		.4byte	.LFB37
 4623 012c 64000000 		.4byte	.LFE37-.LFB37
 4624 0130 00000000 		.4byte	.LFB38
 4625 0134 1C000000 		.4byte	.LFE38-.LFB38
 4626 0138 00000000 		.4byte	.LFB39
 4627 013c 18000000 		.4byte	.LFE39-.LFB39
 4628 0140 00000000 		.4byte	.LFB40
 4629 0144 18000000 		.4byte	.LFE40-.LFB40
 4630 0148 00000000 		.4byte	.LFB41
 4631 014c 18000000 		.4byte	.LFE41-.LFB41
 4632 0150 00000000 		.4byte	.LFB42
 4633 0154 1C000000 		.4byte	.LFE42-.LFB42
 4634 0158 00000000 		.4byte	.LFB43
 4635 015c 18000000 		.4byte	.LFE43-.LFB43
 4636 0160 00000000 		.4byte	.LFB44
 4637 0164 18000000 		.4byte	.LFE44-.LFB44
 4638 0168 00000000 		.4byte	.LFB45
 4639 016c 34000000 		.4byte	.LFE45-.LFB45
 4640 0170 00000000 		.4byte	.LFB46
 4641 0174 18000000 		.4byte	.LFE46-.LFB46
 4642 0178 00000000 		.4byte	.LFB47
 4643 017c 18000000 		.4byte	.LFE47-.LFB47
 4644 0180 00000000 		.4byte	.LFB48
 4645 0184 14000000 		.4byte	.LFE48-.LFB48
 4646 0188 00000000 		.4byte	.LFB49
 4647 018c 2C000000 		.4byte	.LFE49-.LFB49
 4648 0190 00000000 		.4byte	.LFB50
 4649 0194 1C000000 		.4byte	.LFE50-.LFB50
 4650 0198 00000000 		.4byte	.LFB51
 4651 019c 44000000 		.4byte	.LFE51-.LFB51
 4652 01a0 00000000 		.4byte	.LFB52
 4653 01a4 C0000000 		.4byte	.LFE52-.LFB52
 4654 01a8 00000000 		.4byte	0
 4655 01ac 00000000 		.4byte	0
 4656              		.section	.debug_ranges,"",%progbits
 4657              	.Ldebug_ranges0:
 4658 0000 00000000 		.4byte	.LFB2
 4659 0004 1C000000 		.4byte	.LFE2
 4660 0008 00000000 		.4byte	.LFB3
 4661 000c 18000000 		.4byte	.LFE3
 4662 0010 00000000 		.4byte	.LFB4
 4663 0014 48000000 		.4byte	.LFE4
 4664 0018 00000000 		.4byte	.LFB5
 4665 001c 50000000 		.4byte	.LFE5
 4666 0020 00000000 		.4byte	.LFB6
 4667 0024 34000000 		.4byte	.LFE6
 4668 0028 00000000 		.4byte	.LFB7
 4669 002c 44000000 		.4byte	.LFE7
 4670 0030 00000000 		.4byte	.LFB8
 4671 0034 EC010000 		.4byte	.LFE8
 4672 0038 00000000 		.4byte	.LFB9
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 136


 4673 003c 74000000 		.4byte	.LFE9
 4674 0040 00000000 		.4byte	.LFB10
 4675 0044 2C000000 		.4byte	.LFE10
 4676 0048 00000000 		.4byte	.LFB11
 4677 004c 20000000 		.4byte	.LFE11
 4678 0050 00000000 		.4byte	.LFB12
 4679 0054 58000000 		.4byte	.LFE12
 4680 0058 00000000 		.4byte	.LFB13
 4681 005c 60000000 		.4byte	.LFE13
 4682 0060 00000000 		.4byte	.LFB14
 4683 0064 28000000 		.4byte	.LFE14
 4684 0068 00000000 		.4byte	.LFB15
 4685 006c 18000000 		.4byte	.LFE15
 4686 0070 00000000 		.4byte	.LFB16
 4687 0074 14000000 		.4byte	.LFE16
 4688 0078 00000000 		.4byte	.LFB17
 4689 007c 30000000 		.4byte	.LFE17
 4690 0080 00000000 		.4byte	.LFB18
 4691 0084 24000000 		.4byte	.LFE18
 4692 0088 00000000 		.4byte	.LFB19
 4693 008c 18000000 		.4byte	.LFE19
 4694 0090 00000000 		.4byte	.LFB20
 4695 0094 48000000 		.4byte	.LFE20
 4696 0098 00000000 		.4byte	.LFB21
 4697 009c 34000000 		.4byte	.LFE21
 4698 00a0 00000000 		.4byte	.LFB22
 4699 00a4 4C000000 		.4byte	.LFE22
 4700 00a8 00000000 		.4byte	.LFB23
 4701 00ac 36000000 		.4byte	.LFE23
 4702 00b0 00000000 		.4byte	.LFB24
 4703 00b4 A8000000 		.4byte	.LFE24
 4704 00b8 00000000 		.4byte	.LFB25
 4705 00bc 5C000000 		.4byte	.LFE25
 4706 00c0 00000000 		.4byte	.LFB26
 4707 00c4 28000000 		.4byte	.LFE26
 4708 00c8 00000000 		.4byte	.LFB27
 4709 00cc 30000000 		.4byte	.LFE27
 4710 00d0 00000000 		.4byte	.LFB28
 4711 00d4 28000000 		.4byte	.LFE28
 4712 00d8 00000000 		.4byte	.LFB29
 4713 00dc 28000000 		.4byte	.LFE29
 4714 00e0 00000000 		.4byte	.LFB30
 4715 00e4 28000000 		.4byte	.LFE30
 4716 00e8 00000000 		.4byte	.LFB31
 4717 00ec 14000000 		.4byte	.LFE31
 4718 00f0 00000000 		.4byte	.LFB32
 4719 00f4 20000000 		.4byte	.LFE32
 4720 00f8 00000000 		.4byte	.LFB33
 4721 00fc 48000000 		.4byte	.LFE33
 4722 0100 00000000 		.4byte	.LFB34
 4723 0104 28000000 		.4byte	.LFE34
 4724 0108 00000000 		.4byte	.LFB35
 4725 010c 84000000 		.4byte	.LFE35
 4726 0110 00000000 		.4byte	.LFB36
 4727 0114 24000000 		.4byte	.LFE36
 4728 0118 00000000 		.4byte	.LFB37
 4729 011c 64000000 		.4byte	.LFE37
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 137


 4730 0120 00000000 		.4byte	.LFB38
 4731 0124 1C000000 		.4byte	.LFE38
 4732 0128 00000000 		.4byte	.LFB39
 4733 012c 18000000 		.4byte	.LFE39
 4734 0130 00000000 		.4byte	.LFB40
 4735 0134 18000000 		.4byte	.LFE40
 4736 0138 00000000 		.4byte	.LFB41
 4737 013c 18000000 		.4byte	.LFE41
 4738 0140 00000000 		.4byte	.LFB42
 4739 0144 1C000000 		.4byte	.LFE42
 4740 0148 00000000 		.4byte	.LFB43
 4741 014c 18000000 		.4byte	.LFE43
 4742 0150 00000000 		.4byte	.LFB44
 4743 0154 18000000 		.4byte	.LFE44
 4744 0158 00000000 		.4byte	.LFB45
 4745 015c 34000000 		.4byte	.LFE45
 4746 0160 00000000 		.4byte	.LFB46
 4747 0164 18000000 		.4byte	.LFE46
 4748 0168 00000000 		.4byte	.LFB47
 4749 016c 18000000 		.4byte	.LFE47
 4750 0170 00000000 		.4byte	.LFB48
 4751 0174 14000000 		.4byte	.LFE48
 4752 0178 00000000 		.4byte	.LFB49
 4753 017c 2C000000 		.4byte	.LFE49
 4754 0180 00000000 		.4byte	.LFB50
 4755 0184 1C000000 		.4byte	.LFE50
 4756 0188 00000000 		.4byte	.LFB51
 4757 018c 44000000 		.4byte	.LFE51
 4758 0190 00000000 		.4byte	.LFB52
 4759 0194 C0000000 		.4byte	.LFE52
 4760 0198 00000000 		.4byte	0
 4761 019c 00000000 		.4byte	0
 4762              		.section	.debug_line,"",%progbits
 4763              	.Ldebug_line0:
 4764 0000 09050000 		.section	.debug_str,"MS",%progbits,1
 4764      02004D00 
 4764      00000201 
 4764      FB0E0D00 
 4764      01010101 
 4765              	.LASF61:
 4766 0000 72616D56 		.ascii	"ramVectorTable\000"
 4766      6563746F 
 4766      72546162 
 4766      6C6500
 4767              	.LASF34:
 4768 000f 62675472 		.ascii	"bgTrim4\000"
 4768      696D3400 
 4769              	.LASF10:
 4770 0017 75696E74 		.ascii	"uint16\000"
 4770      313600
 4771              	.LASF54:
 4772 001e 696E7453 		.ascii	"intState\000"
 4772      74617465 
 4772      00
 4773              	.LASF113:
 4774 0027 433A5C55 		.ascii	"C:\\Users\\Andrew Joseph\\Desktop\\Senior Design\\t"
 4774      73657273 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 138


 4774      5C416E64 
 4774      72657720 
 4774      4A6F7365 
 4775 0055 72756E6B 		.ascii	"runk\\src\\PSoC_Core\\fNIR PSoC Central\\fNIR PSoC "
 4775      5C737263 
 4775      5C50536F 
 4775      435F436F 
 4775      72655C66 
 4776 0084 43656E74 		.ascii	"Central.cydsn\000"
 4776      72616C2E 
 4776      63796473 
 4776      6E00
 4777              	.LASF25:
 4778 0092 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4778      73436C6B 
 4778      57726974 
 4778      65486663 
 4778      6C6B4469 
 4779              	.LASF110:
 4780 00ab 43795379 		.ascii	"CySysClkPumpConfig\000"
 4780      73436C6B 
 4780      50756D70 
 4780      436F6E66 
 4780      696700
 4781              	.LASF60:
 4782 00be 6F6C6449 		.ascii	"oldIsr\000"
 4782      737200
 4783              	.LASF99:
 4784 00c5 72657456 		.ascii	"retVal\000"
 4784      616C00
 4785              	.LASF53:
 4786 00cc 43794469 		.ascii	"CyDisableInts\000"
 4786      7361626C 
 4786      65496E74 
 4786      7300
 4787              	.LASF37:
 4788 00da 63757272 		.ascii	"currentImoTrim2Value\000"
 4788      656E7449 
 4788      6D6F5472 
 4788      696D3256 
 4788      616C7565 
 4789              	.LASF7:
 4790 00ef 6C6F6E67 		.ascii	"long long unsigned int\000"
 4790      206C6F6E 
 4790      6720756E 
 4790      7369676E 
 4790      65642069 
 4791              	.LASF108:
 4792 0106 43795379 		.ascii	"CySysTickInitVar\000"
 4792      73546963 
 4792      6B496E69 
 4792      74566172 
 4792      00
 4793              	.LASF55:
 4794 0117 4379456E 		.ascii	"CyEnableInts\000"
 4794      61626C65 
 4794      496E7473 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 139


 4794      00
 4795              	.LASF76:
 4796 0124 4379536F 		.ascii	"CySoftwareReset\000"
 4796      66747761 
 4796      72655265 
 4796      73657400 
 4797              	.LASF86:
 4798 0134 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4798      73546963 
 4798      6B456E61 
 4798      626C6549 
 4798      6E746572 
 4799              	.LASF71:
 4800 014d 4379496E 		.ascii	"CyIntGetState\000"
 4800      74476574 
 4800      53746174 
 4800      6500
 4801              	.LASF6:
 4802 015b 6C6F6E67 		.ascii	"long long int\000"
 4802      206C6F6E 
 4802      6720696E 
 4802      7400
 4803              	.LASF0:
 4804 0169 7369676E 		.ascii	"signed char\000"
 4804      65642063 
 4804      68617200 
 4805              	.LASF33:
 4806 0175 66726571 		.ascii	"freq\000"
 4806      00
 4807              	.LASF81:
 4808 017a 43794465 		.ascii	"CyDelayFreq\000"
 4808      6C617946 
 4808      72657100 
 4809              	.LASF23:
 4810 0186 696E7465 		.ascii	"interruptState\000"
 4810      72727570 
 4810      74537461 
 4810      746500
 4811              	.LASF90:
 4812 0195 43795379 		.ascii	"CySysTickGetReload\000"
 4812      73546963 
 4812      6B476574 
 4812      52656C6F 
 4812      616400
 4813              	.LASF4:
 4814 01a8 6C6F6E67 		.ascii	"long int\000"
 4814      20696E74 
 4814      00
 4815              	.LASF72:
 4816 01b1 4379496E 		.ascii	"CyIntDisable\000"
 4816      74446973 
 4816      61626C65 
 4816      00
 4817              	.LASF100:
 4818 01be 43795379 		.ascii	"CySysTickGetCallback\000"
 4818      73546963 
 4818      6B476574 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 140


 4818      43616C6C 
 4818      6261636B 
 4819              	.LASF9:
 4820 01d3 75696E74 		.ascii	"uint8\000"
 4820      3800
 4821              	.LASF105:
 4822 01d9 63796465 		.ascii	"cydelayFreqKhz\000"
 4822      6C617946 
 4822      7265714B 
 4822      687A00
 4823              	.LASF28:
 4824 01e8 656E6162 		.ascii	"enable\000"
 4824      6C6500
 4825              	.LASF13:
 4826 01ef 646F7562 		.ascii	"double\000"
 4826      6C6500
 4827              	.LASF67:
 4828 01f6 73686966 		.ascii	"shift\000"
 4828      7400
 4829              	.LASF50:
 4830 01fc 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 4830      734C7664 
 4830      436C6561 
 4830      72496E74 
 4830      65727275 
 4831              	.LASF11:
 4832 0213 75696E74 		.ascii	"uint32\000"
 4832      333200
 4833              	.LASF44:
 4834 021a 43795379 		.ascii	"CySysClkEcoReadStatus\000"
 4834      73436C6B 
 4834      45636F52 
 4834      65616453 
 4834      74617475 
 4835              	.LASF56:
 4836 0230 6D61736B 		.ascii	"mask\000"
 4836      00
 4837              	.LASF39:
 4838 0235 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4838      73436C6B 
 4838      47657453 
 4838      7973636C 
 4838      6B536F75 
 4839              	.LASF69:
 4840 024d 4379496E 		.ascii	"CyIntGetPriority\000"
 4840      74476574 
 4840      5072696F 
 4840      72697479 
 4840      00
 4841              	.LASF107:
 4842 025e 63796465 		.ascii	"cydelay32kMs\000"
 4842      6C617933 
 4842      326B4D73 
 4842      00
 4843              	.LASF83:
 4844 026b 43795379 		.ascii	"CySysTickInit\000"
 4844      73546963 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 141


 4844      6B496E69 
 4844      7400
 4845              	.LASF68:
 4846 0279 76616C75 		.ascii	"value\000"
 4846      6500
 4847              	.LASF93:
 4848 027f 636C6F63 		.ascii	"clockSource\000"
 4848      6B536F75 
 4848      72636500 
 4849              	.LASF101:
 4850 028b 43794765 		.ascii	"CyGetUniqueId\000"
 4850      74556E69 
 4850      71756549 
 4850      6400
 4851              	.LASF95:
 4852 0299 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4852      73546963 
 4852      6B476574 
 4852      436F756E 
 4852      74466C61 
 4853              	.LASF8:
 4854 02af 756E7369 		.ascii	"unsigned int\000"
 4854      676E6564 
 4854      20696E74 
 4854      00
 4855              	.LASF96:
 4856 02bc 43795379 		.ascii	"CySysTickClear\000"
 4856      73546963 
 4856      6B436C65 
 4856      617200
 4857              	.LASF5:
 4858 02cb 6C6F6E67 		.ascii	"long unsigned int\000"
 4858      20756E73 
 4858      69676E65 
 4858      6420696E 
 4858      7400
 4859              	.LASF89:
 4860 02dd 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 4860      734C7664 
 4860      47657449 
 4860      6E746572 
 4860      72757074 
 4861              	.LASF22:
 4862 02f8 43795379 		.ascii	"CySysClkImoStop\000"
 4862      73436C6B 
 4862      496D6F53 
 4862      746F7000 
 4863              	.LASF73:
 4864 0308 4379496E 		.ascii	"CyIntSetPending\000"
 4864      74536574 
 4864      50656E64 
 4864      696E6700 
 4865              	.LASF51:
 4866 0318 43795379 		.ascii	"CySysGetResetReason\000"
 4866      73476574 
 4866      52657365 
 4866      74526561 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 142


 4866      736F6E00 
 4867              	.LASF3:
 4868 032c 73686F72 		.ascii	"short unsigned int\000"
 4868      7420756E 
 4868      7369676E 
 4868      65642069 
 4868      6E7400
 4869              	.LASF92:
 4870 033f 43795379 		.ascii	"CySysTickSetClockSource\000"
 4870      73546963 
 4870      6B536574 
 4870      436C6F63 
 4870      6B536F75 
 4871              	.LASF63:
 4872 0357 4379496E 		.ascii	"CyIntSetVector\000"
 4872      74536574 
 4872      56656374 
 4872      6F7200
 4873              	.LASF58:
 4874 0366 6E756D62 		.ascii	"number\000"
 4874      657200
 4875              	.LASF66:
 4876 036d 7072696F 		.ascii	"priority\000"
 4876      72697479 
 4876      00
 4877              	.LASF32:
 4878 0376 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4878      73436C6B 
 4878      57726974 
 4878      65496D6F 
 4878      46726571 
 4879              	.LASF57:
 4880 038b 4379496E 		.ascii	"CyIntSetSysVector\000"
 4880      74536574 
 4880      53797356 
 4880      6563746F 
 4880      7200
 4881              	.LASF26:
 4882 039d 43795379 		.ascii	"CySysEnablePumpClock\000"
 4882      73456E61 
 4882      626C6550 
 4882      756D7043 
 4882      6C6F636B 
 4883              	.LASF17:
 4884 03b2 72656733 		.ascii	"reg32\000"
 4884      3200
 4885              	.LASF82:
 4886 03b8 43795379 		.ascii	"CySysTickStart\000"
 4886      73546963 
 4886      6B537461 
 4886      727400
 4887              	.LASF42:
 4888 03c7 72657475 		.ascii	"returnStatus\000"
 4888      726E5374 
 4888      61747573 
 4888      00
 4889              	.LASF19:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 143


 4890 03d4 73697A65 		.ascii	"sizetype\000"
 4890      74797065 
 4890      00
 4891              	.LASF74:
 4892 03dd 4379496E 		.ascii	"CyIntClearPending\000"
 4892      74436C65 
 4892      61725065 
 4892      6E64696E 
 4892      6700
 4893              	.LASF59:
 4894 03ef 61646472 		.ascii	"address\000"
 4894      65737300 
 4895              	.LASF35:
 4896 03f7 62675472 		.ascii	"bgTrim5\000"
 4896      696D3500 
 4897              	.LASF29:
 4898 03ff 73797363 		.ascii	"sysclkSource\000"
 4898      6C6B536F 
 4898      75726365 
 4898      00
 4899              	.LASF98:
 4900 040c 66756E63 		.ascii	"function\000"
 4900      74696F6E 
 4900      00
 4901              	.LASF109:
 4902 0415 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 4902      6F467265 
 4902      714D687A 
 4902      32526567 
 4902      00
 4903              	.LASF91:
 4904 0426 43795379 		.ascii	"CySysTickGetValue\000"
 4904      73546963 
 4904      6B476574 
 4904      56616C75 
 4904      6500
 4905              	.LASF104:
 4906 0438 63796465 		.ascii	"cydelayFreqHz\000"
 4906      6C617946 
 4906      72657148 
 4906      7A00
 4907              	.LASF65:
 4908 0446 4379496E 		.ascii	"CyIntSetPriority\000"
 4908      74536574 
 4908      5072696F 
 4908      72697479 
 4908      00
 4909              	.LASF12:
 4910 0457 666C6F61 		.ascii	"float\000"
 4910      7400
 4911              	.LASF47:
 4912 045d 43795379 		.ascii	"CySysLvdEnable\000"
 4912      734C7664 
 4912      456E6162 
 4912      6C6500
 4913              	.LASF20:
 4914 046c 63795379 		.ascii	"cySysTickCallback\000"
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 144


 4914      73546963 
 4914      6B43616C 
 4914      6C626163 
 4914      6B00
 4915              	.LASF64:
 4916 047e 4379496E 		.ascii	"CyIntGetVector\000"
 4916      74476574 
 4916      56656374 
 4916      6F7200
 4917              	.LASF78:
 4918 048d 6D696C6C 		.ascii	"milliseconds\000"
 4918      69736563 
 4918      6F6E6473 
 4918      00
 4919              	.LASF16:
 4920 049a 72656738 		.ascii	"reg8\000"
 4920      00
 4921              	.LASF48:
 4922 049f 74687265 		.ascii	"threshold\000"
 4922      73686F6C 
 4922      6400
 4923              	.LASF75:
 4924 04a9 43794861 		.ascii	"CyHalt\000"
 4924      6C7400
 4925              	.LASF1:
 4926 04b0 756E7369 		.ascii	"unsigned char\000"
 4926      676E6564 
 4926      20636861 
 4926      7200
 4927              	.LASF2:
 4928 04be 73686F72 		.ascii	"short int\000"
 4928      7420696E 
 4928      7400
 4929              	.LASF70:
 4930 04c8 4379496E 		.ascii	"CyIntEnable\000"
 4930      74456E61 
 4930      626C6500 
 4931              	.LASF62:
 4932 04d4 4379496E 		.ascii	"CyIntGetSysVector\000"
 4932      74476574 
 4932      53797356 
 4932      6563746F 
 4932      7200
 4933              	.LASF27:
 4934 04e6 636C6B53 		.ascii	"clkSelect\000"
 4934      656C6563 
 4934      7400
 4935              	.LASF40:
 4936 04f0 43795379 		.ascii	"CySysClkEcoStart\000"
 4936      73436C6B 
 4936      45636F53 
 4936      74617274 
 4936      00
 4937              	.LASF79:
 4938 0501 43794465 		.ascii	"CyDelayUs\000"
 4938      6C617955 
 4938      7300
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 145


 4939              	.LASF52:
 4940 050b 72656173 		.ascii	"reason\000"
 4940      6F6E00
 4941              	.LASF14:
 4942 0512 63686172 		.ascii	"char\000"
 4942      00
 4943              	.LASF18:
 4944 0517 63796973 		.ascii	"cyisraddress\000"
 4944      72616464 
 4944      72657373 
 4944      00
 4945              	.LASF84:
 4946 0524 43795379 		.ascii	"CySysTickEnable\000"
 4946      73546963 
 4946      6B456E61 
 4946      626C6500 
 4947              	.LASF30:
 4948 0534 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 4948      73436C6B 
 4948      57726974 
 4948      65537973 
 4948      636C6B44 
 4949              	.LASF97:
 4950 054b 43795379 		.ascii	"CySysTickSetCallback\000"
 4950      73546963 
 4950      6B536574 
 4950      43616C6C 
 4950      6261636B 
 4951              	.LASF103:
 4952 0560 43795379 		.ascii	"CySysTickCallbacks\000"
 4952      73546963 
 4952      6B43616C 
 4952      6C626163 
 4952      6B7300
 4953              	.LASF38:
 4954 0573 696D6F54 		.ascii	"imoTrim1Value\000"
 4954      72696D31 
 4954      56616C75 
 4954      6500
 4955              	.LASF102:
 4956 0581 756E6971 		.ascii	"uniqueId\000"
 4956      75654964 
 4956      00
 4957              	.LASF77:
 4958 058a 43794465 		.ascii	"CyDelay\000"
 4958      6C617900 
 4959              	.LASF94:
 4960 0592 43795379 		.ascii	"CySysTickGetClockSource\000"
 4960      73546963 
 4960      6B476574 
 4960      436C6F63 
 4960      6B536F75 
 4961              	.LASF87:
 4962 05aa 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 4962      73546963 
 4962      6B446973 
 4962      61626C65 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 146


 4962      496E7465 
 4963              	.LASF49:
 4964 05c4 43795379 		.ascii	"CySysLvdDisable\000"
 4964      734C7664 
 4964      44697361 
 4964      626C6500 
 4965              	.LASF106:
 4966 05d4 63796465 		.ascii	"cydelayFreqMhz\000"
 4966      6C617946 
 4966      7265714D 
 4966      687A00
 4967              	.LASF43:
 4968 05e3 43795379 		.ascii	"CySysClkEcoStop\000"
 4968      73436C6B 
 4968      45636F53 
 4968      746F7000 
 4969              	.LASF85:
 4970 05f3 43795379 		.ascii	"CySysTickStop\000"
 4970      73546963 
 4970      6B53746F 
 4970      7000
 4971              	.LASF41:
 4972 0601 74696D65 		.ascii	"timeoutUs\000"
 4972      6F757455 
 4972      7300
 4973              	.LASF31:
 4974 060b 64697669 		.ascii	"divider\000"
 4974      64657200 
 4975              	.LASF46:
 4976 0613 43795379 		.ascii	"CySysClkWriteEcoDiv\000"
 4976      73436C6B 
 4976      57726974 
 4976      6545636F 
 4976      44697600 
 4977              	.LASF15:
 4978 0627 63797374 		.ascii	"cystatus\000"
 4978      61747573 
 4978      00
 4979              	.LASF111:
 4980 0630 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4980      4320342E 
 4980      392E3320 
 4980      32303135 
 4980      30333033 
 4981 0663 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 4981      20726576 
 4981      6973696F 
 4981      6E203232 
 4981      31323230 
 4982 0696 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4982      66756E63 
 4982      74696F6E 
 4982      2D736563 
 4982      74696F6E 
 4983              	.LASF21:
 4984 06be 43795379 		.ascii	"CySysClkImoStart\000"
 4984      73436C6B 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccRl5US3.s 			page 147


 4984      496D6F53 
 4984      74617274 
 4984      00
 4985              	.LASF36:
 4986 06cf 6E657749 		.ascii	"newImoTrim2Value\000"
 4986      6D6F5472 
 4986      696D3256 
 4986      616C7565 
 4986      00
 4987              	.LASF112:
 4988 06e0 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 4988      72617465 
 4988      645F536F 
 4988      75726365 
 4988      5C50536F 
 4989              	.LASF80:
 4990 06ff 6D696372 		.ascii	"microseconds\000"
 4990      6F736563 
 4990      6F6E6473 
 4990      00
 4991              	.LASF24:
 4992 070c 746D7052 		.ascii	"tmpReg\000"
 4992      656700
 4993              	.LASF88:
 4994 0713 43795379 		.ascii	"CySysTickSetReload\000"
 4994      73546963 
 4994      6B536574 
 4994      52656C6F 
 4994      616400
 4995              	.LASF114:
 4996 0726 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 4996      73546963 
 4996      6B536572 
 4996      76696365 
 4996      43616C6C 
 4997              	.LASF45:
 4998 0740 72657475 		.ascii	"returnValue\000"
 4998      726E5661 
 4998      6C756500 
 4999              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
