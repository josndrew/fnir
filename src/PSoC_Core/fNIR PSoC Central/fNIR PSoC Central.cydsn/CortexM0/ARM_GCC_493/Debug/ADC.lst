ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,8,4
  24              		.comm	ADC_countsPer10Volt,16,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 16
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	16
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 2


  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000000u, 0x000000
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 3


  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 4


  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 5


 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 173 0
  97 000e 624B     		ldr	r3, .L16
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 604B     		ldr	r3, .L16+4
 103 001a 0F22     		mov	r2, #15
 104 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 6


 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
 106 001e 604B     		ldr	r3, .L16+8
 107 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 5F49     		ldr	r1, .L16+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 5F49     		ldr	r1, .L16+16
 117              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 5F4B     		ldr	r3, .L16+20
 120 002e 5F4A     		ldr	r2, .L16+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 5E4B     		ldr	r3, .L16+24
 126 0038 5E4A     		ldr	r2, .L16+28
 127 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 5E4B     		ldr	r3, .L16+32
 130 003e 5F4A     		ldr	r2, .L16+36
 131 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 5F4B     		ldr	r3, .L16+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 5E4B     		ldr	r3, .L16+44
 138 004a 5F4A     		ldr	r2, .L16+48
 139 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 5F4B     		ldr	r3, .L16+52
 142 0050 5D4A     		ldr	r2, .L16+48
 143 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 5E4B     		ldr	r3, .L16+56
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 7


 146 0056 5E4A     		ldr	r2, .L16+56
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 152              		.loc 1 193 0 discriminator 4
 153 0062 5C4B     		ldr	r3, .L16+60
 154 0064 5B4A     		ldr	r2, .L16+60
 155 0066 1268     		ldr	r2, [r2]
 156 0068 8021     		mov	r1, #128
 157 006a 4902     		lsl	r1, r1, #9
 158 006c 0A43     		orr	r2, r1
 159 006e 1A60     		str	r2, [r3]
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 160              		.loc 1 197 0 discriminator 4
 161 0070 594B     		ldr	r3, .L16+64
 162 0072 0022     		mov	r2, #0
 163 0074 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 164              		.loc 1 198 0 discriminator 4
 165 0076 594B     		ldr	r3, .L16+68
 166 0078 0022     		mov	r2, #0
 167 007a 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 168              		.loc 1 199 0 discriminator 4
 169 007c 584B     		ldr	r3, .L16+72
 170 007e 0122     		mov	r2, #1
 171 0080 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 172              		.loc 1 206 0 discriminator 4
 173 0082 584B     		ldr	r3, .L16+76
 174 0084 1B68     		ldr	r3, [r3]
 175 0086 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 176              		.loc 1 207 0 discriminator 4
 177 0088 7B68     		ldr	r3, [r7, #4]
 178 008a 574A     		ldr	r2, .L16+80
 179 008c 1340     		and	r3, r2
 180 008e 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 8


 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 181              		.loc 1 220 0 discriminator 4
 182 0090 7B68     		ldr	r3, [r7, #4]
 183 0092 8022     		mov	r2, #128
 184 0094 9205     		lsl	r2, r2, #22
 185 0096 1343     		orr	r3, r2
 186 0098 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187              		.loc 1 221 0 discriminator 4
 188 009a 7B68     		ldr	r3, [r7, #4]
 189 009c 0122     		mov	r2, #1
 190 009e 9343     		bic	r3, r2
 191 00a0 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 192              		.loc 1 226 0 discriminator 4
 193 00a2 504B     		ldr	r3, .L16+76
 194 00a4 7A68     		ldr	r2, [r7, #4]
 195 00a6 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 196              		.loc 1 232 0 discriminator 4
 197 00a8 0023     		mov	r3, #0
 198 00aa FB60     		str	r3, [r7, #12]
 199 00ac 6EE0     		b	.L8
 200              	.L15:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 201              		.loc 1 234 0
 202 00ae 4F4B     		ldr	r3, .L16+84
 203 00b0 FA68     		ldr	r2, [r7, #12]
 204 00b2 9200     		lsl	r2, r2, #2
 205 00b4 D258     		ldr	r2, [r2, r3]
 206 00b6 DC23     		mov	r3, #220
 207 00b8 9B01     		lsl	r3, r3, #6
 208 00ba 1340     		and	r3, r2
 209 00bc 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 210              		.loc 1 236 0
 211 00be 4C4A     		ldr	r2, .L16+88
 212 00c0 FB68     		ldr	r3, [r7, #12]
 213 00c2 D318     		add	r3, r2, r3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 9


 214 00c4 1B78     		ldrb	r3, [r3]
 215 00c6 1A1C     		mov	r2, r3
 216 00c8 7B68     		ldr	r3, [r7, #4]
 217 00ca 1343     		orr	r3, r2
 218 00cc 7B60     		str	r3, [r7, #4]
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 219              		.loc 1 253 0
 220 00ce FB68     		ldr	r3, [r7, #12]
 221 00d0 9B00     		lsl	r3, r3, #2
 222 00d2 484A     		ldr	r2, .L16+92
 223 00d4 9446     		mov	ip, r2
 224 00d6 6344     		add	r3, r3, ip
 225 00d8 7A68     		ldr	r2, [r7, #4]
 226 00da 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 227              		.loc 1 255 0
 228 00dc 434B     		ldr	r3, .L16+84
 229 00de FA68     		ldr	r2, [r7, #12]
 230 00e0 9200     		lsl	r2, r2, #2
 231 00e2 D358     		ldr	r3, [r2, r3]
 232 00e4 0122     		mov	r2, #1
 233 00e6 1340     		and	r3, r2
 234 00e8 09D0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 235              		.loc 1 257 0
 236 00ea 3B4B     		ldr	r3, .L16+64
 237 00ec 3A4A     		ldr	r2, .L16+64
 238 00ee 1268     		ldr	r2, [r2]
 239 00f0 F968     		ldr	r1, [r7, #12]
 240 00f2 0120     		mov	r0, #1
 241 00f4 8840     		lsl	r0, r0, r1
 242 00f6 011C     		mov	r1, r0
 243 00f8 89B2     		uxth	r1, r1
 244 00fa 0A43     		orr	r2, r1
 245 00fc 1A60     		str	r2, [r3]
 246              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 10


 247              		.loc 1 260 0
 248 00fe 3B4B     		ldr	r3, .L16+84
 249 0100 FA68     		ldr	r2, [r7, #12]
 250 0102 9200     		lsl	r2, r2, #2
 251 0104 D358     		ldr	r3, [r2, r3]
 252 0106 0222     		mov	r2, #2
 253 0108 1340     		and	r3, r2
 254 010a 09D0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 255              		.loc 1 262 0
 256 010c 334B     		ldr	r3, .L16+68
 257 010e 334A     		ldr	r2, .L16+68
 258 0110 1268     		ldr	r2, [r2]
 259 0112 F968     		ldr	r1, [r7, #12]
 260 0114 0120     		mov	r0, #1
 261 0116 8840     		lsl	r0, r0, r1
 262 0118 011C     		mov	r1, r0
 263 011a 89B2     		uxth	r1, r1
 264 011c 0A43     		orr	r2, r1
 265 011e 1A60     		str	r2, [r3]
 266              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 267              		.loc 1 282 0
 268 0120 324B     		ldr	r3, .L16+84
 269 0122 FA68     		ldr	r2, [r7, #12]
 270 0124 9200     		lsl	r2, r2, #2
 271 0126 D258     		ldr	r2, [r2, r3]
 272 0128 8023     		mov	r3, #128
 273 012a 9B00     		lsl	r3, r3, #2
 274 012c 1340     		and	r3, r2
 275 012e 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 276              		.loc 1 284 0
 277 0130 8023     		mov	r3, #128
 278 0132 5B00     		lsl	r3, r3, #1
 279 0134 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 11


 280 0136 02E0     		b	.L12
 281              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 282              		.loc 1 288 0
 283 0138 8023     		mov	r3, #128
 284 013a 5B01     		lsl	r3, r3, #5
 285 013c BB60     		str	r3, [r7, #8]
 286              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 287              		.loc 1 291 0
 288 013e 2B4B     		ldr	r3, .L16+84
 289 0140 FA68     		ldr	r2, [r7, #12]
 290 0142 9200     		lsl	r2, r2, #2
 291 0144 D258     		ldr	r2, [r2, r3]
 292 0146 8023     		mov	r3, #128
 293 0148 5B00     		lsl	r3, r3, #1
 294 014a 1340     		and	r3, r2
 295 014c 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 296              		.loc 1 298 0
 297 014e 2A4B     		ldr	r3, .L16+96
 298 0150 FA68     		ldr	r2, [r7, #12]
 299 0152 5200     		lsl	r2, r2, #1
 300 0154 0021     		mov	r1, #0
 301 0156 D152     		strh	r1, [r2, r3]
 302 0158 04E0     		b	.L14
 303              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 304              		.loc 1 307 0
 305 015a 274B     		ldr	r3, .L16+96
 306 015c FA68     		ldr	r2, [r7, #12]
 307 015e 5200     		lsl	r2, r2, #1
 308 0160 0021     		mov	r1, #0
 309 0162 D152     		strh	r1, [r2, r3]
 310              	.L14:
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 12


 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 311              		.loc 1 311 0 discriminator 2
 312 0164 BB68     		ldr	r3, [r7, #8]
 313 0166 254A     		ldr	r2, .L16+100
 314 0168 5343     		mul	r3, r2
 315 016a 254A     		ldr	r2, .L16+104
 316 016c 9446     		mov	ip, r2
 317 016e 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 318              		.loc 1 312 0 discriminator 2
 319 0170 181C     		mov	r0, r3
 320 0172 2449     		ldr	r1, .L16+108
 321 0174 FFF7FEFF 		bl	__aeabi_idiv
 322 0178 031C     		mov	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 323              		.loc 1 311 0 discriminator 2
 324 017a 9BB2     		uxth	r3, r3
 325 017c 19B2     		sxth	r1, r3
 326 017e 224B     		ldr	r3, .L16+112
 327 0180 FA68     		ldr	r2, [r7, #12]
 328 0182 9200     		lsl	r2, r2, #2
 329 0184 D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 330              		.loc 1 232 0 discriminator 2
 331 0186 FB68     		ldr	r3, [r7, #12]
 332 0188 0133     		add	r3, r3, #1
 333 018a FB60     		str	r3, [r7, #12]
 334              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 335              		.loc 1 232 0 is_stmt 0 discriminator 1
 336 018c FB68     		ldr	r3, [r7, #12]
 337 018e 032B     		cmp	r3, #3
 338 0190 8DD9     		bls	.L15
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 339              		.loc 1 314 0 is_stmt 1
 340 0192 BD46     		mov	sp, r7
 341 0194 04B0     		add	sp, sp, #16
 342              		@ sp needed
 343 0196 80BD     		pop	{r7, pc}
 344              	.L17:
 345              		.align	2
 346              	.L16:
 347 0198 00000000 		.word	ADC_ISR
 348 019c 20003A40 		.word	1077542944
 349 01a0 80033A40 		.word	1077543808
 350 01a4 70201010 		.word	269492336
 351 01a8 70200010 		.word	268443760
 352 01ac 00003A40 		.word	1077542912
 353 01b0 04003A40 		.word	1077542916
 354 01b4 CC000080 		.word	-2147483444
 355 01b8 18003A40 		.word	1077542936
 356 01bc 0000FF07 		.word	134152192
 357 01c0 1C003A40 		.word	1077542940
 358 01c4 10003A40 		.word	1077542928
 359 01c8 02000200 		.word	131074
 360 01cc 14003A40 		.word	1077542932
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 13


 361 01d0 00033A40 		.word	1077543680
 362 01d4 40033A40 		.word	1077543744
 363 01d8 28023A40 		.word	1077543464
 364 01dc 38023A40 		.word	1077543480
 365 01e0 18023A40 		.word	1077543448
 366 01e4 30003A40 		.word	1077542960
 367 01e8 FFFFFFDF 		.word	-536870913
 368 01ec 00000000 		.word	ADC_channelsConfig
 369 01f0 10000000 		.word	ADC_InputsPlacement.4788
 370 01f4 80003A40 		.word	1077543040
 371 01f8 00000000 		.word	ADC_offset
 372 01fc 10270000 		.word	10000
 373 0200 E40C0000 		.word	3300
 374 0204 C8190000 		.word	6600
 375 0208 00000000 		.word	ADC_countsPer10Volt
 376              		.cfi_endproc
 377              	.LFE3:
 378              		.size	ADC_Init, .-ADC_Init
 379              		.section	.text.ADC_Enable,"ax",%progbits
 380              		.align	2
 381              		.global	ADC_Enable
 382              		.code	16
 383              		.thumb_func
 384              		.type	ADC_Enable, %function
 385              	ADC_Enable:
 386              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 387              		.loc 1 331 0
 388              		.cfi_startproc
 389 0000 80B5     		push	{r7, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 00AF     		add	r7, sp, #0
 394              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 395              		.loc 1 332 0
 396 0004 0A4B     		ldr	r3, .L21
 397 0006 1B68     		ldr	r3, [r3]
 398 0008 002B     		cmp	r3, #0
 399 000a 0EDB     		blt	.L18
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 14


 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 400              		.loc 1 336 0
 401 000c C046     		mov	r8, r8
 402              	.L20:
 403              		.loc 1 336 0 is_stmt 0 discriminator 1
 404 000e 094B     		ldr	r3, .L21+4
 405 0010 1B68     		ldr	r3, [r3]
 406 0012 002B     		cmp	r3, #0
 407 0014 FBDB     		blt	.L20
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 408              		.loc 1 342 0 is_stmt 1
 409 0016 064B     		ldr	r3, .L21
 410 0018 054A     		ldr	r2, .L21
 411 001a 1268     		ldr	r2, [r2]
 412 001c 8021     		mov	r1, #128
 413 001e 0906     		lsl	r1, r1, #24
 414 0020 0A43     		orr	r2, r1
 415 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 416              		.loc 1 345 0
 417 0024 0A20     		mov	r0, #10
 418 0026 FFF7FEFF 		bl	CyDelayUs
 419              	.L18:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 420              		.loc 1 347 0
 421 002a BD46     		mov	sp, r7
 422              		@ sp needed
 423 002c 80BD     		pop	{r7, pc}
 424              	.L22:
 425 002e C046     		.align	2
 426              	.L21:
 427 0030 00003A40 		.word	1077542912
 428 0034 08023A40 		.word	1077543432
 429              		.cfi_endproc
 430              	.LFE4:
 431              		.size	ADC_Enable, .-ADC_Enable
 432              		.section	.text.ADC_Stop,"ax",%progbits
 433              		.align	2
 434              		.global	ADC_Stop
 435              		.code	16
 436              		.thumb_func
 437              		.type	ADC_Stop, %function
 438              	ADC_Stop:
 439              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 15


 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 440              		.loc 1 366 0
 441              		.cfi_startproc
 442 0000 80B5     		push	{r7, lr}
 443              		.cfi_def_cfa_offset 8
 444              		.cfi_offset 7, -8
 445              		.cfi_offset 14, -4
 446 0002 00AF     		add	r7, sp, #0
 447              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 448              		.loc 1 367 0
 449 0004 034B     		ldr	r3, .L24
 450 0006 034A     		ldr	r2, .L24
 451 0008 1268     		ldr	r2, [r2]
 452 000a 5200     		lsl	r2, r2, #1
 453 000c 5208     		lsr	r2, r2, #1
 454 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 455              		.loc 1 368 0
 456 0010 BD46     		mov	sp, r7
 457              		@ sp needed
 458 0012 80BD     		pop	{r7, pc}
 459              	.L25:
 460              		.align	2
 461              	.L24:
 462 0014 00003A40 		.word	1077542912
 463              		.cfi_endproc
 464              	.LFE5:
 465              		.size	ADC_Stop, .-ADC_Stop
 466              		.section	.text.ADC_StartConvert,"ax",%progbits
 467              		.align	2
 468              		.global	ADC_StartConvert
 469              		.code	16
 470              		.thumb_func
 471              		.type	ADC_StartConvert, %function
 472              	ADC_StartConvert:
 473              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 16


 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 474              		.loc 1 392 0
 475              		.cfi_startproc
 476 0000 80B5     		push	{r7, lr}
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 00AF     		add	r7, sp, #0
 481              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 482              		.loc 1 394 0
 483 0004 044B     		ldr	r3, .L27
 484 0006 044A     		ldr	r2, .L27
 485 0008 1268     		ldr	r2, [r2]
 486 000a 8021     		mov	r1, #128
 487 000c 4902     		lsl	r1, r1, #9
 488 000e 0A43     		orr	r2, r1
 489 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 490              		.loc 1 399 0
 491 0012 BD46     		mov	sp, r7
 492              		@ sp needed
 493 0014 80BD     		pop	{r7, pc}
 494              	.L28:
 495 0016 C046     		.align	2
 496              	.L27:
 497 0018 04003A40 		.word	1077542916
 498              		.cfi_endproc
 499              	.LFE6:
 500              		.size	ADC_StartConvert, .-ADC_StartConvert
 501              		.section	.text.ADC_StopConvert,"ax",%progbits
 502              		.align	2
 503              		.global	ADC_StopConvert
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 17


 504              		.code	16
 505              		.thumb_func
 506              		.type	ADC_StopConvert, %function
 507              	ADC_StopConvert:
 508              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 509              		.loc 1 417 0
 510              		.cfi_startproc
 511 0000 80B5     		push	{r7, lr}
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
 515 0002 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 517              		.loc 1 419 0
 518 0004 034B     		ldr	r3, .L30
 519 0006 034A     		ldr	r2, .L30
 520 0008 1268     		ldr	r2, [r2]
 521 000a 0349     		ldr	r1, .L30+4
 522 000c 0A40     		and	r2, r1
 523 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 524              		.loc 1 421 0
 525 0010 BD46     		mov	sp, r7
 526              		@ sp needed
 527 0012 80BD     		pop	{r7, pc}
 528              	.L31:
 529              		.align	2
 530              	.L30:
 531 0014 04003A40 		.word	1077542916
 532 0018 FFFFFEFF 		.word	-65537
 533              		.cfi_endproc
 534              	.LFE7:
 535              		.size	ADC_StopConvert, .-ADC_StopConvert
 536              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 537              		.align	2
 538              		.global	ADC_IsEndConversion
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 18


 539              		.code	16
 540              		.thumb_func
 541              		.type	ADC_IsEndConversion, %function
 542              	ADC_IsEndConversion:
 543              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 544              		.loc 1 451 0
 545              		.cfi_startproc
 546 0000 80B5     		push	{r7, lr}
 547              		.cfi_def_cfa_offset 8
 548              		.cfi_offset 7, -8
 549              		.cfi_offset 14, -4
 550 0002 84B0     		sub	sp, sp, #16
 551              		.cfi_def_cfa_offset 24
 552 0004 00AF     		add	r7, sp, #0
 553              		.cfi_def_cfa_register 7
 554 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 555              		.loc 1 452 0
 556 0008 0023     		mov	r3, #0
 557 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 558              		.loc 1 454 0
 559 000c 7B68     		ldr	r3, [r7, #4]
 560 000e 0322     		mov	r2, #3
 561 0010 1340     		and	r3, r2
 562 0012 11D0     		beq	.L33
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 19


 563              	.L35:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 564              		.loc 1 458 0 discriminator 2
 565 0014 0B4B     		ldr	r3, .L37
 566 0016 1B68     		ldr	r3, [r3]
 567 0018 0122     		mov	r2, #1
 568 001a 1340     		and	r3, r2
 569 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 570              		.loc 1 459 0 discriminator 2
 571 001e FB68     		ldr	r3, [r7, #12]
 572 0020 002B     		cmp	r3, #0
 573 0022 03D1     		bne	.L34
 574              		.loc 1 459 0 is_stmt 0 discriminator 1
 575 0024 7B68     		ldr	r3, [r7, #4]
 576 0026 0222     		mov	r2, #2
 577 0028 1340     		and	r3, r2
 578 002a F3D1     		bne	.L35
 579              	.L34:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 580              		.loc 1 461 0 is_stmt 1
 581 002c FB68     		ldr	r3, [r7, #12]
 582 002e 002B     		cmp	r3, #0
 583 0030 02D0     		beq	.L33
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 584              		.loc 1 464 0
 585 0032 044B     		ldr	r3, .L37
 586 0034 0122     		mov	r2, #1
 587 0036 1A60     		str	r2, [r3]
 588              	.L33:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 20


 589              		.loc 1 485 0
 590 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 591              		.loc 1 486 0
 592 003a 181C     		mov	r0, r3
 593 003c BD46     		mov	sp, r7
 594 003e 04B0     		add	sp, sp, #16
 595              		@ sp needed
 596 0040 80BD     		pop	{r7, pc}
 597              	.L38:
 598 0042 C046     		.align	2
 599              	.L37:
 600 0044 10023A40 		.word	1077543440
 601              		.cfi_endproc
 602              	.LFE8:
 603              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 604              		.section	.text.ADC_GetResult16,"ax",%progbits
 605              		.align	2
 606              		.global	ADC_GetResult16
 607              		.code	16
 608              		.thumb_func
 609              		.type	ADC_GetResult16, %function
 610              	ADC_GetResult16:
 611              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 612              		.loc 1 505 0
 613              		.cfi_startproc
 614 0000 80B5     		push	{r7, lr}
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 618 0002 84B0     		sub	sp, sp, #16
 619              		.cfi_def_cfa_offset 24
 620 0004 00AF     		add	r7, sp, #0
 621              		.cfi_def_cfa_register 7
 622 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 21


 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 623              		.loc 1 509 0
 624 0008 7B68     		ldr	r3, [r7, #4]
 625 000a 032B     		cmp	r3, #3
 626 000c 02D9     		bls	.L40
 627              		.loc 1 509 0 is_stmt 0 discriminator 1
 628 000e 0020     		mov	r0, #0
 629 0010 FFF7FEFF 		bl	CyHalt
 630              	.L40:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 631              		.loc 1 511 0 is_stmt 1
 632 0014 7B68     		ldr	r3, [r7, #4]
 633 0016 032B     		cmp	r3, #3
 634 0018 09D8     		bhi	.L41
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 635              		.loc 1 513 0
 636 001a 7B68     		ldr	r3, [r7, #4]
 637 001c 9B00     		lsl	r3, r3, #2
 638 001e 084A     		ldr	r2, .L44
 639 0020 9446     		mov	ip, r2
 640 0022 6344     		add	r3, r3, ip
 641 0024 1B68     		ldr	r3, [r3]
 642 0026 1B04     		lsl	r3, r3, #16
 643 0028 1B0C     		lsr	r3, r3, #16
 644 002a FB60     		str	r3, [r7, #12]
 645 002c 01E0     		b	.L42
 646              	.L41:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 647              		.loc 1 521 0
 648 002e 0023     		mov	r3, #0
 649 0030 FB60     		str	r3, [r7, #12]
 650              	.L42:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 651              		.loc 1 525 0
 652 0032 FB68     		ldr	r3, [r7, #12]
 653 0034 9BB2     		uxth	r3, r3
 654 0036 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 655              		.loc 1 526 0
 656 0038 181C     		mov	r0, r3
 657 003a BD46     		mov	sp, r7
 658 003c 04B0     		add	sp, sp, #16
 659              		@ sp needed
 660 003e 80BD     		pop	{r7, pc}
 661              	.L45:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 22


 662              		.align	2
 663              	.L44:
 664 0040 80013A40 		.word	1077543296
 665              		.cfi_endproc
 666              	.LFE9:
 667              		.size	ADC_GetResult16, .-ADC_GetResult16
 668              		.section	.text.ADC_SetChanMask,"ax",%progbits
 669              		.align	2
 670              		.global	ADC_SetChanMask
 671              		.code	16
 672              		.thumb_func
 673              		.type	ADC_SetChanMask, %function
 674              	ADC_SetChanMask:
 675              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 676              		.loc 1 550 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 82B0     		sub	sp, sp, #8
 683              		.cfi_def_cfa_offset 16
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 687              		.loc 1 551 0
 688 0008 034B     		ldr	r3, .L47
 689 000a 7A68     		ldr	r2, [r7, #4]
 690 000c 0F21     		mov	r1, #15
 691 000e 0A40     		and	r2, r1
 692 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 23


 693              		.loc 1 552 0
 694 0012 BD46     		mov	sp, r7
 695 0014 02B0     		add	sp, sp, #8
 696              		@ sp needed
 697 0016 80BD     		pop	{r7, pc}
 698              	.L48:
 699              		.align	2
 700              	.L47:
 701 0018 20003A40 		.word	1077542944
 702              		.cfi_endproc
 703              	.LFE10:
 704              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 705              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 706              		.align	2
 707              		.global	ADC_SetLowLimit
 708              		.code	16
 709              		.thumb_func
 710              		.type	ADC_SetLowLimit, %function
 711              	ADC_SetLowLimit:
 712              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 24


 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 713              		.loc 1 594 0
 714              		.cfi_startproc
 715 0000 80B5     		push	{r7, lr}
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 82B0     		sub	sp, sp, #8
 720              		.cfi_def_cfa_offset 16
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 723 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 724              		.loc 1 595 0
 725 0008 084B     		ldr	r3, .L50
 726 000a 084A     		ldr	r2, .L50
 727 000c 1268     		ldr	r2, [r2]
 728 000e 120C     		lsr	r2, r2, #16
 729 0010 1204     		lsl	r2, r2, #16
 730 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 731              		.loc 1 596 0
 732 0014 054B     		ldr	r3, .L50
 733 0016 054A     		ldr	r2, .L50
 734 0018 1168     		ldr	r1, [r2]
 735 001a 7A68     		ldr	r2, [r7, #4]
 736 001c 1204     		lsl	r2, r2, #16
 737 001e 120C     		lsr	r2, r2, #16
 738 0020 0A43     		orr	r2, r1
 739 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 740              		.loc 1 597 0
 741 0024 BD46     		mov	sp, r7
 742 0026 02B0     		add	sp, sp, #8
 743              		@ sp needed
 744 0028 80BD     		pop	{r7, pc}
 745              	.L51:
 746 002a C046     		.align	2
 747              	.L50:
 748 002c 18003A40 		.word	1077542936
 749              		.cfi_endproc
 750              	.LFE11:
 751              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 752              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 753              		.align	2
 754              		.global	ADC_SetHighLimit
 755              		.code	16
 756              		.thumb_func
 757              		.type	ADC_SetHighLimit, %function
 758              	ADC_SetHighLimit:
 759              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 25


 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 760              		.loc 1 615 0
 761              		.cfi_startproc
 762 0000 80B5     		push	{r7, lr}
 763              		.cfi_def_cfa_offset 8
 764              		.cfi_offset 7, -8
 765              		.cfi_offset 14, -4
 766 0002 82B0     		sub	sp, sp, #8
 767              		.cfi_def_cfa_offset 16
 768 0004 00AF     		add	r7, sp, #0
 769              		.cfi_def_cfa_register 7
 770 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 771              		.loc 1 616 0
 772 0008 074B     		ldr	r3, .L53
 773 000a 074A     		ldr	r2, .L53
 774 000c 1268     		ldr	r2, [r2]
 775 000e 1204     		lsl	r2, r2, #16
 776 0010 120C     		lsr	r2, r2, #16
 777 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 778              		.loc 1 617 0
 779 0014 044B     		ldr	r3, .L53
 780 0016 044A     		ldr	r2, .L53
 781 0018 1168     		ldr	r1, [r2]
 782 001a 7A68     		ldr	r2, [r7, #4]
 783 001c 1204     		lsl	r2, r2, #16
 784 001e 0A43     		orr	r2, r1
 785 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 786              		.loc 1 618 0
 787 0022 BD46     		mov	sp, r7
 788 0024 02B0     		add	sp, sp, #8
 789              		@ sp needed
 790 0026 80BD     		pop	{r7, pc}
 791              	.L54:
 792              		.align	2
 793              	.L53:
 794 0028 18003A40 		.word	1077542936
 795              		.cfi_endproc
 796              	.LFE12:
 797              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 26


 798              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 799              		.align	2
 800              		.global	ADC_SetLimitMask
 801              		.code	16
 802              		.thumb_func
 803              		.type	ADC_SetLimitMask, %function
 804              	ADC_SetLimitMask:
 805              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 806              		.loc 1 639 0
 807              		.cfi_startproc
 808 0000 80B5     		push	{r7, lr}
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 0002 82B0     		sub	sp, sp, #8
 813              		.cfi_def_cfa_offset 16
 814 0004 00AF     		add	r7, sp, #0
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 817              		.loc 1 640 0
 818 0008 034B     		ldr	r3, .L56
 819 000a 7A68     		ldr	r2, [r7, #4]
 820 000c 0F21     		mov	r1, #15
 821 000e 0A40     		and	r2, r1
 822 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 823              		.loc 1 641 0
 824 0012 BD46     		mov	sp, r7
 825 0014 02B0     		add	sp, sp, #8
 826              		@ sp needed
 827 0016 80BD     		pop	{r7, pc}
 828              	.L57:
 829              		.align	2
 830              	.L56:
 831 0018 38023A40 		.word	1077543480
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 27


 832              		.cfi_endproc
 833              	.LFE13:
 834              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 835              		.section	.text.ADC_SetSatMask,"ax",%progbits
 836              		.align	2
 837              		.global	ADC_SetSatMask
 838              		.code	16
 839              		.thumb_func
 840              		.type	ADC_SetSatMask, %function
 841              	ADC_SetSatMask:
 842              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 843              		.loc 1 662 0
 844              		.cfi_startproc
 845 0000 80B5     		push	{r7, lr}
 846              		.cfi_def_cfa_offset 8
 847              		.cfi_offset 7, -8
 848              		.cfi_offset 14, -4
 849 0002 82B0     		sub	sp, sp, #8
 850              		.cfi_def_cfa_offset 16
 851 0004 00AF     		add	r7, sp, #0
 852              		.cfi_def_cfa_register 7
 853 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 854              		.loc 1 663 0
 855 0008 034B     		ldr	r3, .L59
 856 000a 7A68     		ldr	r2, [r7, #4]
 857 000c 0F21     		mov	r1, #15
 858 000e 0A40     		and	r2, r1
 859 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 860              		.loc 1 664 0
 861 0012 BD46     		mov	sp, r7
 862 0014 02B0     		add	sp, sp, #8
 863              		@ sp needed
 864 0016 80BD     		pop	{r7, pc}
 865              	.L60:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 28


 866              		.align	2
 867              	.L59:
 868 0018 28023A40 		.word	1077543464
 869              		.cfi_endproc
 870              	.LFE14:
 871              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 872              		.section	.text.ADC_SetOffset,"ax",%progbits
 873              		.align	2
 874              		.global	ADC_SetOffset
 875              		.code	16
 876              		.thumb_func
 877              		.type	ADC_SetOffset, %function
 878              	ADC_SetOffset:
 879              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 880              		.loc 1 690 0
 881              		.cfi_startproc
 882 0000 80B5     		push	{r7, lr}
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 7, -8
 885              		.cfi_offset 14, -4
 886 0002 82B0     		sub	sp, sp, #8
 887              		.cfi_def_cfa_offset 16
 888 0004 00AF     		add	r7, sp, #0
 889              		.cfi_def_cfa_register 7
 890 0006 7860     		str	r0, [r7, #4]
 891 0008 0A1C     		mov	r2, r1
 892 000a BB1C     		add	r3, r7, #2
 893 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 894              		.loc 1 692 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 29


 895 000e 7B68     		ldr	r3, [r7, #4]
 896 0010 032B     		cmp	r3, #3
 897 0012 02D9     		bls	.L62
 898              		.loc 1 692 0 is_stmt 0 discriminator 1
 899 0014 0020     		mov	r0, #0
 900 0016 FFF7FEFF 		bl	CyHalt
 901              	.L62:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 902              		.loc 1 694 0 is_stmt 1
 903 001a 044B     		ldr	r3, .L63
 904 001c 7A68     		ldr	r2, [r7, #4]
 905 001e 5200     		lsl	r2, r2, #1
 906 0020 B91C     		add	r1, r7, #2
 907 0022 0988     		ldrh	r1, [r1]
 908 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 909              		.loc 1 695 0
 910 0026 BD46     		mov	sp, r7
 911 0028 02B0     		add	sp, sp, #8
 912              		@ sp needed
 913 002a 80BD     		pop	{r7, pc}
 914              	.L64:
 915              		.align	2
 916              	.L63:
 917 002c 00000000 		.word	ADC_offset
 918              		.cfi_endproc
 919              	.LFE15:
 920              		.size	ADC_SetOffset, .-ADC_SetOffset
 921              		.section	.text.ADC_SetGain,"ax",%progbits
 922              		.align	2
 923              		.global	ADC_SetGain
 924              		.code	16
 925              		.thumb_func
 926              		.type	ADC_SetGain, %function
 927              	ADC_SetGain:
 928              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 30


 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 929              		.loc 1 724 0
 930              		.cfi_startproc
 931 0000 80B5     		push	{r7, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 7, -8
 934              		.cfi_offset 14, -4
 935 0002 82B0     		sub	sp, sp, #8
 936              		.cfi_def_cfa_offset 16
 937 0004 00AF     		add	r7, sp, #0
 938              		.cfi_def_cfa_register 7
 939 0006 7860     		str	r0, [r7, #4]
 940 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 941              		.loc 1 726 0
 942 000a 7B68     		ldr	r3, [r7, #4]
 943 000c 032B     		cmp	r3, #3
 944 000e 02D9     		bls	.L66
 945              		.loc 1 726 0 is_stmt 0 discriminator 1
 946 0010 0020     		mov	r0, #0
 947 0012 FFF7FEFF 		bl	CyHalt
 948              	.L66:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 949              		.loc 1 728 0 is_stmt 1
 950 0016 044B     		ldr	r3, .L67
 951 0018 7A68     		ldr	r2, [r7, #4]
 952 001a 9200     		lsl	r2, r2, #2
 953 001c 3968     		ldr	r1, [r7]
 954 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 955              		.loc 1 729 0
 956 0020 BD46     		mov	sp, r7
 957 0022 02B0     		add	sp, sp, #8
 958              		@ sp needed
 959 0024 80BD     		pop	{r7, pc}
 960              	.L68:
 961 0026 C046     		.align	2
 962              	.L67:
 963 0028 00000000 		.word	ADC_countsPer10Volt
 964              		.cfi_endproc
 965              	.LFE16:
 966              		.size	ADC_SetGain, .-ADC_SetGain
 967              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 968              		.align	2
 969              		.global	ADC_CountsTo_mVolts
 970              		.code	16
 971              		.thumb_func
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 31


 972              		.type	ADC_CountsTo_mVolts, %function
 973              	ADC_CountsTo_mVolts:
 974              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 975              		.loc 1 757 0
 976              		.cfi_startproc
 977 0000 80B5     		push	{r7, lr}
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 84B0     		sub	sp, sp, #16
 982              		.cfi_def_cfa_offset 24
 983 0004 00AF     		add	r7, sp, #0
 984              		.cfi_def_cfa_register 7
 985 0006 7860     		str	r0, [r7, #4]
 986 0008 0A1C     		mov	r2, r1
 987 000a BB1C     		add	r3, r7, #2
 988 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 989              		.loc 1 761 0
 990 000e 7B68     		ldr	r3, [r7, #4]
 991 0010 032B     		cmp	r3, #3
 992 0012 02D9     		bls	.L70
 993              		.loc 1 761 0 is_stmt 0 discriminator 1
 994 0014 0020     		mov	r0, #0
 995 0016 FFF7FEFF 		bl	CyHalt
 996              	.L70:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 32


 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 997              		.loc 1 772 0 is_stmt 1
 998 001a 1F4B     		ldr	r3, .L76
 999 001c 7A68     		ldr	r2, [r7, #4]
 1000 001e 5200     		lsl	r2, r2, #1
 1001 0020 D35A     		ldrh	r3, [r2, r3]
 1002 0022 99B2     		uxth	r1, r3
 1003 0024 BB1C     		add	r3, r7, #2
 1004 0026 1A88     		ldrh	r2, [r3]
 1005 0028 8BB2     		uxth	r3, r1
 1006 002a D31A     		sub	r3, r2, r3
 1007 002c 9AB2     		uxth	r2, r3
 1008 002e BB1C     		add	r3, r7, #2
 1009 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1010              		.loc 1 774 0
 1011 0032 BB1C     		add	r3, r7, #2
 1012 0034 0022     		mov	r2, #0
 1013 0036 9B5E     		ldrsh	r3, [r3, r2]
 1014 0038 184A     		ldr	r2, .L76+4
 1015 003a 5A43     		mul	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1016              		.loc 1 775 0
 1017 003c BB1C     		add	r3, r7, #2
 1018 003e 0021     		mov	r1, #0
 1019 0040 5B5E     		ldrsh	r3, [r3, r1]
 1020 0042 002B     		cmp	r3, #0
 1021 0044 08DD     		ble	.L71
 1022              		.loc 1 775 0 is_stmt 0 discriminator 1
 1023 0046 164B     		ldr	r3, .L76+8
 1024 0048 7968     		ldr	r1, [r7, #4]
 1025 004a 8900     		lsl	r1, r1, #2
 1026 004c CB58     		ldr	r3, [r1, r3]
 1027 004e 002B     		cmp	r3, #0
 1028 0050 00DA     		bge	.L72
 1029 0052 0133     		add	r3, r3, #1
 1030              	.L72:
 1031 0054 5B10     		asr	r3, r3, #1
 1032 0056 08E0     		b	.L73
 1033              	.L71:
 1034              		.loc 1 775 0 discriminator 2
 1035 0058 114B     		ldr	r3, .L76+8
 1036 005a 7968     		ldr	r1, [r7, #4]
 1037 005c 8900     		lsl	r1, r1, #2
 1038 005e CB58     		ldr	r3, [r1, r3]
 1039 0060 002B     		cmp	r3, #0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 33


 1040 0062 00DA     		bge	.L74
 1041 0064 0133     		add	r3, r3, #1
 1042              	.L74:
 1043 0066 5B10     		asr	r3, r3, #1
 1044 0068 5B42     		neg	r3, r3
 1045              	.L73:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1046              		.loc 1 774 0 is_stmt 1
 1047 006a D118     		add	r1, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1048              		.loc 1 776 0
 1049 006c 0C4B     		ldr	r3, .L76+8
 1050 006e 7A68     		ldr	r2, [r7, #4]
 1051 0070 9200     		lsl	r2, r2, #2
 1052 0072 D358     		ldr	r3, [r2, r3]
 1053 0074 081C     		mov	r0, r1
 1054 0076 191C     		mov	r1, r3
 1055 0078 FFF7FEFF 		bl	__aeabi_idiv
 1056 007c 031C     		mov	r3, r0
 1057 007e 1A1C     		mov	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1058              		.loc 1 774 0
 1059 0080 0E23     		mov	r3, #14
 1060 0082 FB18     		add	r3, r7, r3
 1061 0084 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1062              		.loc 1 778 0
 1063 0086 0E23     		mov	r3, #14
 1064 0088 FB18     		add	r3, r7, r3
 1065 008a 1B88     		ldrh	r3, [r3]
 1066 008c 1BB2     		sxth	r3, r3
 779:Generated_Source\PSoC4/ADC.c ****     }
 1067              		.loc 1 779 0
 1068 008e 181C     		mov	r0, r3
 1069 0090 BD46     		mov	sp, r7
 1070 0092 04B0     		add	sp, sp, #16
 1071              		@ sp needed
 1072 0094 80BD     		pop	{r7, pc}
 1073              	.L77:
 1074 0096 C046     		.align	2
 1075              	.L76:
 1076 0098 00000000 		.word	ADC_offset
 1077 009c 10270000 		.word	10000
 1078 00a0 00000000 		.word	ADC_countsPer10Volt
 1079              		.cfi_endproc
 1080              	.LFE17:
 1081              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1082              		.global	__aeabi_lmul
 1083              		.global	__aeabi_ldivmod
 1084              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1085              		.align	2
 1086              		.global	ADC_CountsTo_uVolts
 1087              		.code	16
 1088              		.thumb_func
 1089              		.type	ADC_CountsTo_uVolts, %function
 1090              	ADC_CountsTo_uVolts:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 34


 1091              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1092              		.loc 1 811 0
 1093              		.cfi_startproc
 1094 0000 B0B5     		push	{r4, r5, r7, lr}
 1095              		.cfi_def_cfa_offset 16
 1096              		.cfi_offset 4, -16
 1097              		.cfi_offset 5, -12
 1098              		.cfi_offset 7, -8
 1099              		.cfi_offset 14, -4
 1100 0002 86B0     		sub	sp, sp, #24
 1101              		.cfi_def_cfa_offset 40
 1102 0004 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 0006 F860     		str	r0, [r7, #12]
 1105 0008 0A1C     		mov	r2, r1
 1106 000a 0A23     		mov	r3, #10
 1107 000c FB18     		add	r3, r7, r3
 1108 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1109              		.loc 1 815 0
 1110 0010 FB68     		ldr	r3, [r7, #12]
 1111 0012 032B     		cmp	r3, #3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 35


 1112 0014 02D9     		bls	.L79
 1113              		.loc 1 815 0 is_stmt 0 discriminator 1
 1114 0016 0020     		mov	r0, #0
 1115 0018 FFF7FEFF 		bl	CyHalt
 1116              	.L79:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1117              		.loc 1 826 0 is_stmt 1
 1118 001c 194B     		ldr	r3, .L81
 1119 001e FA68     		ldr	r2, [r7, #12]
 1120 0020 5200     		lsl	r2, r2, #1
 1121 0022 D35A     		ldrh	r3, [r2, r3]
 1122 0024 99B2     		uxth	r1, r3
 1123 0026 0A23     		mov	r3, #10
 1124 0028 FB18     		add	r3, r7, r3
 1125 002a 1A88     		ldrh	r2, [r3]
 1126 002c 8BB2     		uxth	r3, r1
 1127 002e D31A     		sub	r3, r2, r3
 1128 0030 9AB2     		uxth	r2, r3
 1129 0032 0A23     		mov	r3, #10
 1130 0034 FB18     		add	r3, r7, r3
 1131 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1132              		.loc 1 828 0
 1133 0038 0A23     		mov	r3, #10
 1134 003a FB18     		add	r3, r7, r3
 1135 003c 1B88     		ldrh	r3, [r3]
 1136 003e 1BB2     		sxth	r3, r3
 1137 0040 3B60     		str	r3, [r7]
 1138 0042 DB17     		asr	r3, r3, #31
 1139 0044 7B60     		str	r3, [r7, #4]
 1140 0046 3868     		ldr	r0, [r7]
 1141 0048 7968     		ldr	r1, [r7, #4]
 1142 004a 0F4A     		ldr	r2, .L81+4
 1143 004c 0023     		mov	r3, #0
 1144 004e FFF7FEFF 		bl	__aeabi_lmul
 1145 0052 021C     		mov	r2, r0
 1146 0054 0B1C     		mov	r3, r1
 1147 0056 101C     		mov	r0, r2
 1148 0058 191C     		mov	r1, r3
 1149 005a 0C4B     		ldr	r3, .L81+8
 1150 005c FA68     		ldr	r2, [r7, #12]
 1151 005e 9200     		lsl	r2, r2, #2
 1152 0060 D358     		ldr	r3, [r2, r3]
 1153 0062 1C1C     		mov	r4, r3
 1154 0064 DB17     		asr	r3, r3, #31
 1155 0066 1D1C     		mov	r5, r3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 36


 1156 0068 221C     		mov	r2, r4
 1157 006a 2B1C     		mov	r3, r5
 1158 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1159 0070 031C     		mov	r3, r0
 1160 0072 0C1C     		mov	r4, r1
 1161 0074 3B61     		str	r3, [r7, #16]
 1162 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1163              		.loc 1 830 0
 1164 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1165              		.loc 1 831 0
 1166 007a 181C     		mov	r0, r3
 1167 007c BD46     		mov	sp, r7
 1168 007e 06B0     		add	sp, sp, #24
 1169              		@ sp needed
 1170 0080 B0BD     		pop	{r4, r5, r7, pc}
 1171              	.L82:
 1172 0082 C046     		.align	2
 1173              	.L81:
 1174 0084 00000000 		.word	ADC_offset
 1175 0088 80969800 		.word	10000000
 1176 008c 00000000 		.word	ADC_countsPer10Volt
 1177              		.cfi_endproc
 1178              	.LFE18:
 1179              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1180              		.global	__aeabi_i2f
 1181              		.global	__aeabi_fmul
 1182              		.global	__aeabi_fdiv
 1183              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1184              		.align	2
 1185              		.global	ADC_CountsTo_Volts
 1186              		.code	16
 1187              		.thumb_func
 1188              		.type	ADC_CountsTo_Volts, %function
 1189              	ADC_CountsTo_Volts:
 1190              	.LFB19:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 37


 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1191              		.loc 1 856 0
 1192              		.cfi_startproc
 1193 0000 90B5     		push	{r4, r7, lr}
 1194              		.cfi_def_cfa_offset 12
 1195              		.cfi_offset 4, -12
 1196              		.cfi_offset 7, -8
 1197              		.cfi_offset 14, -4
 1198 0002 85B0     		sub	sp, sp, #20
 1199              		.cfi_def_cfa_offset 32
 1200 0004 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
 1203 0008 0A1C     		mov	r2, r1
 1204 000a BB1C     		add	r3, r7, #2
 1205 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1206              		.loc 1 860 0
 1207 000e 7B68     		ldr	r3, [r7, #4]
 1208 0010 032B     		cmp	r3, #3
 1209 0012 02D9     		bls	.L84
 1210              		.loc 1 860 0 is_stmt 0 discriminator 1
 1211 0014 0020     		mov	r0, #0
 1212 0016 FFF7FEFF 		bl	CyHalt
 1213              	.L84:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1214              		.loc 1 871 0 is_stmt 1
 1215 001a 164B     		ldr	r3, .L86
 1216 001c 7A68     		ldr	r2, [r7, #4]
 1217 001e 5200     		lsl	r2, r2, #1
 1218 0020 D35A     		ldrh	r3, [r2, r3]
 1219 0022 99B2     		uxth	r1, r3
 1220 0024 BB1C     		add	r3, r7, #2
 1221 0026 1A88     		ldrh	r2, [r3]
 1222 0028 8BB2     		uxth	r3, r1
 1223 002a D31A     		sub	r3, r2, r3
 1224 002c 9AB2     		uxth	r2, r3
 1225 002e BB1C     		add	r3, r7, #2
 1226 0030 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 38


 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1227              		.loc 1 873 0
 1228 0032 BB1C     		add	r3, r7, #2
 1229 0034 0022     		mov	r2, #0
 1230 0036 9B5E     		ldrsh	r3, [r3, r2]
 1231 0038 181C     		mov	r0, r3
 1232 003a FFF7FEFF 		bl	__aeabi_i2f
 1233 003e 031C     		add	r3, r0, #0
 1234 0040 181C     		add	r0, r3, #0
 1235 0042 0D49     		ldr	r1, .L86+4
 1236 0044 FFF7FEFF 		bl	__aeabi_fmul
 1237 0048 031C     		add	r3, r0, #0
 1238 004a 1C1C     		add	r4, r3, #0
 1239 004c 0B4B     		ldr	r3, .L86+8
 1240 004e 7A68     		ldr	r2, [r7, #4]
 1241 0050 9200     		lsl	r2, r2, #2
 1242 0052 D358     		ldr	r3, [r2, r3]
 1243 0054 181C     		mov	r0, r3
 1244 0056 FFF7FEFF 		bl	__aeabi_i2f
 1245 005a 031C     		add	r3, r0, #0
 1246 005c 201C     		add	r0, r4, #0
 1247 005e 191C     		add	r1, r3, #0
 1248 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1249 0064 031C     		add	r3, r0, #0
 1250 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1251              		.loc 1 875 0
 1252 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1253              		.loc 1 876 0
 1254 006a 181C     		add	r0, r3, #0
 1255 006c BD46     		mov	sp, r7
 1256 006e 05B0     		add	sp, sp, #20
 1257              		@ sp needed
 1258 0070 90BD     		pop	{r4, r7, pc}
 1259              	.L87:
 1260 0072 C046     		.align	2
 1261              	.L86:
 1262 0074 00000000 		.word	ADC_offset
 1263 0078 00002041 		.word	1092616192
 1264 007c 00000000 		.word	ADC_countsPer10Volt
 1265              		.cfi_endproc
 1266              	.LFE19:
 1267              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1268              		.section	.rodata
 1269              		.align	2
 1270              		.type	ADC_InputsPlacement.4788, %object
 1271              		.size	ADC_InputsPlacement.4788, 4
 1272              	ADC_InputsPlacement.4788:
 1273 0010 02       		.byte	2
 1274 0011 03       		.byte	3
 1275 0012 06       		.byte	6
 1276 0013 07       		.byte	7
 1277              		.text
 1278              	.Letext0:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 39


 1279              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1280              		.section	.debug_info,"",%progbits
 1281              	.Ldebug_info0:
 1282 0000 9D040000 		.4byte	0x49d
 1283 0004 0400     		.2byte	0x4
 1284 0006 00000000 		.4byte	.Ldebug_abbrev0
 1285 000a 04       		.byte	0x4
 1286 000b 01       		.uleb128 0x1
 1287 000c 1F030000 		.4byte	.LASF60
 1288 0010 01       		.byte	0x1
 1289 0011 43020000 		.4byte	.LASF61
 1290 0015 07000000 		.4byte	.LASF62
 1291 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1292 001d 00000000 		.4byte	0
 1293 0021 00000000 		.4byte	.Ldebug_line0
 1294 0025 02       		.uleb128 0x2
 1295 0026 01       		.byte	0x1
 1296 0027 06       		.byte	0x6
 1297 0028 E7000000 		.4byte	.LASF0
 1298 002c 02       		.uleb128 0x2
 1299 002d 01       		.byte	0x1
 1300 002e 08       		.byte	0x8
 1301 002f A0020000 		.4byte	.LASF1
 1302 0033 02       		.uleb128 0x2
 1303 0034 02       		.byte	0x2
 1304 0035 05       		.byte	0x5
 1305 0036 B9020000 		.4byte	.LASF2
 1306 003a 02       		.uleb128 0x2
 1307 003b 02       		.byte	0x2
 1308 003c 07       		.byte	0x7
 1309 003d BE010000 		.4byte	.LASF3
 1310 0041 02       		.uleb128 0x2
 1311 0042 04       		.byte	0x4
 1312 0043 05       		.byte	0x5
 1313 0044 0A010000 		.4byte	.LASF4
 1314 0048 02       		.uleb128 0x2
 1315 0049 04       		.byte	0x4
 1316 004a 07       		.byte	0x7
 1317 004b 8D010000 		.4byte	.LASF5
 1318 004f 02       		.uleb128 0x2
 1319 0050 08       		.byte	0x8
 1320 0051 05       		.byte	0x5
 1321 0052 D9000000 		.4byte	.LASF6
 1322 0056 02       		.uleb128 0x2
 1323 0057 08       		.byte	0x8
 1324 0058 07       		.byte	0x7
 1325 0059 9D000000 		.4byte	.LASF7
 1326 005d 03       		.uleb128 0x3
 1327 005e 04       		.byte	0x4
 1328 005f 05       		.byte	0x5
 1329 0060 696E7400 		.ascii	"int\000"
 1330 0064 02       		.uleb128 0x2
 1331 0065 04       		.byte	0x4
 1332 0066 07       		.byte	0x7
 1333 0067 79010000 		.4byte	.LASF8
 1334 006b 04       		.uleb128 0x4
 1335 006c 3B010000 		.4byte	.LASF9
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 40


 1336 0070 02       		.byte	0x2
 1337 0071 B901     		.2byte	0x1b9
 1338 0073 2C000000 		.4byte	0x2c
 1339 0077 04       		.uleb128 0x4
 1340 0078 00000000 		.4byte	.LASF10
 1341 007c 02       		.byte	0x2
 1342 007d BA01     		.2byte	0x1ba
 1343 007f 3A000000 		.4byte	0x3a
 1344 0083 04       		.uleb128 0x4
 1345 0084 48010000 		.4byte	.LASF11
 1346 0088 02       		.byte	0x2
 1347 0089 BB01     		.2byte	0x1bb
 1348 008b 48000000 		.4byte	0x48
 1349 008f 04       		.uleb128 0x4
 1350 0090 0B030000 		.4byte	.LASF12
 1351 0094 02       		.byte	0x2
 1352 0095 BD01     		.2byte	0x1bd
 1353 0097 33000000 		.4byte	0x33
 1354 009b 04       		.uleb128 0x4
 1355 009c FA000000 		.4byte	.LASF13
 1356 00a0 02       		.byte	0x2
 1357 00a1 BE01     		.2byte	0x1be
 1358 00a3 41000000 		.4byte	0x41
 1359 00a7 04       		.uleb128 0x4
 1360 00a8 EE010000 		.4byte	.LASF14
 1361 00ac 02       		.byte	0x2
 1362 00ad BF01     		.2byte	0x1bf
 1363 00af B3000000 		.4byte	0xb3
 1364 00b3 02       		.uleb128 0x2
 1365 00b4 04       		.byte	0x4
 1366 00b5 04       		.byte	0x4
 1367 00b6 6C020000 		.4byte	.LASF15
 1368 00ba 02       		.uleb128 0x2
 1369 00bb 08       		.byte	0x8
 1370 00bc 04       		.byte	0x4
 1371 00bd 41010000 		.4byte	.LASF16
 1372 00c1 04       		.uleb128 0x4
 1373 00c2 2D020000 		.4byte	.LASF17
 1374 00c6 02       		.byte	0x2
 1375 00c7 C401     		.2byte	0x1c4
 1376 00c9 4F000000 		.4byte	0x4f
 1377 00cd 02       		.uleb128 0x2
 1378 00ce 01       		.byte	0x1
 1379 00cf 08       		.byte	0x8
 1380 00d0 D7020000 		.4byte	.LASF18
 1381 00d4 04       		.uleb128 0x4
 1382 00d5 E8010000 		.4byte	.LASF19
 1383 00d9 02       		.byte	0x2
 1384 00da 6502     		.2byte	0x265
 1385 00dc E0000000 		.4byte	0xe0
 1386 00e0 05       		.uleb128 0x5
 1387 00e1 83000000 		.4byte	0x83
 1388 00e5 02       		.uleb128 0x2
 1389 00e6 04       		.byte	0x4
 1390 00e7 07       		.byte	0x7
 1391 00e8 F6010000 		.4byte	.LASF20
 1392 00ec 06       		.uleb128 0x6
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 41


 1393 00ed 00010000 		.4byte	.LASF25
 1394 00f1 01       		.byte	0x1
 1395 00f2 3F       		.byte	0x3f
 1396 00f3 00000000 		.4byte	.LFB2
 1397 00f7 24000000 		.4byte	.LFE2-.LFB2
 1398 00fb 01       		.uleb128 0x1
 1399 00fc 9C       		.byte	0x9c
 1400 00fd 07       		.uleb128 0x7
 1401 00fe 94000000 		.4byte	.LASF36
 1402 0102 01       		.byte	0x1
 1403 0103 5E       		.byte	0x5e
 1404 0104 00000000 		.4byte	.LFB3
 1405 0108 0C020000 		.4byte	.LFE3-.LFB3
 1406 010c 01       		.uleb128 0x1
 1407 010d 9C       		.byte	0x9c
 1408 010e 4E010000 		.4byte	0x14e
 1409 0112 08       		.uleb128 0x8
 1410 0113 CC020000 		.4byte	.LASF21
 1411 0117 01       		.byte	0x1
 1412 0118 60       		.byte	0x60
 1413 0119 83000000 		.4byte	0x83
 1414 011d 02       		.uleb128 0x2
 1415 011e 91       		.byte	0x91
 1416 011f 74       		.sleb128 -12
 1417 0120 08       		.uleb128 0x8
 1418 0121 B4010000 		.4byte	.LASF22
 1419 0125 01       		.byte	0x1
 1420 0126 61       		.byte	0x61
 1421 0127 83000000 		.4byte	0x83
 1422 012b 02       		.uleb128 0x2
 1423 012c 91       		.byte	0x91
 1424 012d 6C       		.sleb128 -20
 1425 012e 08       		.uleb128 0x8
 1426 012f 7A000000 		.4byte	.LASF23
 1427 0133 01       		.byte	0x1
 1428 0134 62       		.byte	0x62
 1429 0135 9B000000 		.4byte	0x9b
 1430 0139 02       		.uleb128 0x2
 1431 013a 91       		.byte	0x91
 1432 013b 70       		.sleb128 -16
 1433 013c 08       		.uleb128 0x8
 1434 013d B4000000 		.4byte	.LASF24
 1435 0141 01       		.byte	0x1
 1436 0142 65       		.byte	0x65
 1437 0143 5E010000 		.4byte	0x15e
 1438 0147 05       		.uleb128 0x5
 1439 0148 03       		.byte	0x3
 1440 0149 10000000 		.4byte	ADC_InputsPlacement.4788
 1441 014d 00       		.byte	0
 1442 014e 09       		.uleb128 0x9
 1443 014f 6B000000 		.4byte	0x6b
 1444 0153 5E010000 		.4byte	0x15e
 1445 0157 0A       		.uleb128 0xa
 1446 0158 E5000000 		.4byte	0xe5
 1447 015c 03       		.byte	0x3
 1448 015d 00       		.byte	0
 1449 015e 0B       		.uleb128 0xb
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 42


 1450 015f 4E010000 		.4byte	0x14e
 1451 0163 0C       		.uleb128 0xc
 1452 0164 00030000 		.4byte	.LASF26
 1453 0168 01       		.byte	0x1
 1454 0169 4A01     		.2byte	0x14a
 1455 016b 00000000 		.4byte	.LFB4
 1456 016f 38000000 		.4byte	.LFE4-.LFB4
 1457 0173 01       		.uleb128 0x1
 1458 0174 9C       		.byte	0x9c
 1459 0175 0D       		.uleb128 0xd
 1460 0176 C3020000 		.4byte	.LASF27
 1461 017a 01       		.byte	0x1
 1462 017b 6D01     		.2byte	0x16d
 1463 017d 00000000 		.4byte	.LFB5
 1464 0181 18000000 		.4byte	.LFE5-.LFB5
 1465 0185 01       		.uleb128 0x1
 1466 0186 9C       		.byte	0x9c
 1467 0187 0D       		.uleb128 0xd
 1468 0188 C8000000 		.4byte	.LASF28
 1469 018c 01       		.byte	0x1
 1470 018d 8701     		.2byte	0x187
 1471 018f 00000000 		.4byte	.LFB6
 1472 0193 1C000000 		.4byte	.LFE6-.LFB6
 1473 0197 01       		.uleb128 0x1
 1474 0198 9C       		.byte	0x9c
 1475 0199 0D       		.uleb128 0xd
 1476 019a D1010000 		.4byte	.LASF29
 1477 019e 01       		.byte	0x1
 1478 019f A001     		.2byte	0x1a0
 1479 01a1 00000000 		.4byte	.LFB7
 1480 01a5 1C000000 		.4byte	.LFE7-.LFB7
 1481 01a9 01       		.uleb128 0x1
 1482 01aa 9C       		.byte	0x9c
 1483 01ab 0E       		.uleb128 0xe
 1484 01ac 19020000 		.4byte	.LASF31
 1485 01b0 01       		.byte	0x1
 1486 01b1 C201     		.2byte	0x1c2
 1487 01b3 83000000 		.4byte	0x83
 1488 01b7 00000000 		.4byte	.LFB8
 1489 01bb 48000000 		.4byte	.LFE8-.LFB8
 1490 01bf 01       		.uleb128 0x1
 1491 01c0 9C       		.byte	0x9c
 1492 01c1 E4010000 		.4byte	0x1e4
 1493 01c5 0F       		.uleb128 0xf
 1494 01c6 60010000 		.4byte	.LASF33
 1495 01ca 01       		.byte	0x1
 1496 01cb C201     		.2byte	0x1c2
 1497 01cd 83000000 		.4byte	0x83
 1498 01d1 02       		.uleb128 0x2
 1499 01d2 91       		.byte	0x91
 1500 01d3 6C       		.sleb128 -20
 1501 01d4 10       		.uleb128 0x10
 1502 01d5 F3000000 		.4byte	.LASF30
 1503 01d9 01       		.byte	0x1
 1504 01da C401     		.2byte	0x1c4
 1505 01dc 83000000 		.4byte	0x83
 1506 01e0 02       		.uleb128 0x2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 43


 1507 01e1 91       		.byte	0x91
 1508 01e2 74       		.sleb128 -12
 1509 01e3 00       		.byte	0
 1510 01e4 11       		.uleb128 0x11
 1511 01e5 B4030000 		.4byte	.LASF32
 1512 01e9 01       		.byte	0x1
 1513 01ea F801     		.2byte	0x1f8
 1514 01ec 8F000000 		.4byte	0x8f
 1515 01f0 00000000 		.4byte	.LFB9
 1516 01f4 44000000 		.4byte	.LFE9-.LFB9
 1517 01f8 01       		.uleb128 0x1
 1518 01f9 9C       		.byte	0x9c
 1519 01fa 1D020000 		.4byte	0x21d
 1520 01fe 0F       		.uleb128 0xf
 1521 01ff D2020000 		.4byte	.LASF34
 1522 0203 01       		.byte	0x1
 1523 0204 F801     		.2byte	0x1f8
 1524 0206 83000000 		.4byte	0x83
 1525 020a 02       		.uleb128 0x2
 1526 020b 91       		.byte	0x91
 1527 020c 6C       		.sleb128 -20
 1528 020d 10       		.uleb128 0x10
 1529 020e AD030000 		.4byte	.LASF35
 1530 0212 01       		.byte	0x1
 1531 0213 FA01     		.2byte	0x1fa
 1532 0215 83000000 		.4byte	0x83
 1533 0219 02       		.uleb128 0x2
 1534 021a 91       		.byte	0x91
 1535 021b 74       		.sleb128 -12
 1536 021c 00       		.byte	0
 1537 021d 12       		.uleb128 0x12
 1538 021e 33020000 		.4byte	.LASF37
 1539 0222 01       		.byte	0x1
 1540 0223 2502     		.2byte	0x225
 1541 0225 00000000 		.4byte	.LFB10
 1542 0229 1C000000 		.4byte	.LFE10-.LFB10
 1543 022d 01       		.uleb128 0x1
 1544 022e 9C       		.byte	0x9c
 1545 022f 43020000 		.4byte	0x243
 1546 0233 0F       		.uleb128 0xf
 1547 0234 4F010000 		.4byte	.LASF38
 1548 0238 01       		.byte	0x1
 1549 0239 2502     		.2byte	0x225
 1550 023b 83000000 		.4byte	0x83
 1551 023f 02       		.uleb128 0x2
 1552 0240 91       		.byte	0x91
 1553 0241 74       		.sleb128 -12
 1554 0242 00       		.byte	0
 1555 0243 12       		.uleb128 0x12
 1556 0244 90020000 		.4byte	.LASF39
 1557 0248 01       		.byte	0x1
 1558 0249 5102     		.2byte	0x251
 1559 024b 00000000 		.4byte	.LFB11
 1560 024f 30000000 		.4byte	.LFE11-.LFB11
 1561 0253 01       		.uleb128 0x1
 1562 0254 9C       		.byte	0x9c
 1563 0255 69020000 		.4byte	0x269
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 44


 1564 0259 0F       		.uleb128 0xf
 1565 025a FF010000 		.4byte	.LASF40
 1566 025e 01       		.byte	0x1
 1567 025f 5102     		.2byte	0x251
 1568 0261 83000000 		.4byte	0x83
 1569 0265 02       		.uleb128 0x2
 1570 0266 91       		.byte	0x91
 1571 0267 74       		.sleb128 -12
 1572 0268 00       		.byte	0
 1573 0269 12       		.uleb128 0x12
 1574 026a 08020000 		.4byte	.LASF41
 1575 026e 01       		.byte	0x1
 1576 026f 6602     		.2byte	0x266
 1577 0271 00000000 		.4byte	.LFB12
 1578 0275 2C000000 		.4byte	.LFE12-.LFB12
 1579 0279 01       		.uleb128 0x1
 1580 027a 9C       		.byte	0x9c
 1581 027b 8F020000 		.4byte	0x28f
 1582 027f 0F       		.uleb128 0xf
 1583 0280 72020000 		.4byte	.LASF42
 1584 0284 01       		.byte	0x1
 1585 0285 6602     		.2byte	0x266
 1586 0287 83000000 		.4byte	0x83
 1587 028b 02       		.uleb128 0x2
 1588 028c 91       		.byte	0x91
 1589 028d 74       		.sleb128 -12
 1590 028e 00       		.byte	0
 1591 028f 12       		.uleb128 0x12
 1592 0290 68010000 		.4byte	.LASF43
 1593 0294 01       		.byte	0x1
 1594 0295 7E02     		.2byte	0x27e
 1595 0297 00000000 		.4byte	.LFB13
 1596 029b 1C000000 		.4byte	.LFE13-.LFB13
 1597 029f 01       		.uleb128 0x1
 1598 02a0 9C       		.byte	0x9c
 1599 02a1 B5020000 		.4byte	0x2b5
 1600 02a5 0F       		.uleb128 0xf
 1601 02a6 4F010000 		.4byte	.LASF38
 1602 02aa 01       		.byte	0x1
 1603 02ab 7E02     		.2byte	0x27e
 1604 02ad 83000000 		.4byte	0x83
 1605 02b1 02       		.uleb128 0x2
 1606 02b2 91       		.byte	0x91
 1607 02b3 74       		.sleb128 -12
 1608 02b4 00       		.byte	0
 1609 02b5 12       		.uleb128 0x12
 1610 02b6 9F010000 		.4byte	.LASF44
 1611 02ba 01       		.byte	0x1
 1612 02bb 9502     		.2byte	0x295
 1613 02bd 00000000 		.4byte	.LFB14
 1614 02c1 1C000000 		.4byte	.LFE14-.LFB14
 1615 02c5 01       		.uleb128 0x1
 1616 02c6 9C       		.byte	0x9c
 1617 02c7 DB020000 		.4byte	0x2db
 1618 02cb 0F       		.uleb128 0xf
 1619 02cc 4F010000 		.4byte	.LASF38
 1620 02d0 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 45


 1621 02d1 9502     		.2byte	0x295
 1622 02d3 83000000 		.4byte	0x83
 1623 02d7 02       		.uleb128 0x2
 1624 02d8 91       		.byte	0x91
 1625 02d9 74       		.sleb128 -12
 1626 02da 00       		.byte	0
 1627 02db 13       		.uleb128 0x13
 1628 02dc 11030000 		.4byte	.LASF45
 1629 02e0 01       		.byte	0x1
 1630 02e1 B102     		.2byte	0x2b1
 1631 02e3 00000000 		.4byte	.LFB15
 1632 02e7 30000000 		.4byte	.LFE15-.LFB15
 1633 02eb 01       		.uleb128 0x1
 1634 02ec 9C       		.byte	0x9c
 1635 02ed 10030000 		.4byte	0x310
 1636 02f1 0F       		.uleb128 0xf
 1637 02f2 D2020000 		.4byte	.LASF34
 1638 02f6 01       		.byte	0x1
 1639 02f7 B102     		.2byte	0x2b1
 1640 02f9 83000000 		.4byte	0x83
 1641 02fd 02       		.uleb128 0x2
 1642 02fe 91       		.byte	0x91
 1643 02ff 74       		.sleb128 -12
 1644 0300 0F       		.uleb128 0xf
 1645 0301 EF020000 		.4byte	.LASF46
 1646 0305 01       		.byte	0x1
 1647 0306 B102     		.2byte	0x2b1
 1648 0308 8F000000 		.4byte	0x8f
 1649 030c 02       		.uleb128 0x2
 1650 030d 91       		.byte	0x91
 1651 030e 72       		.sleb128 -14
 1652 030f 00       		.byte	0
 1653 0310 13       		.uleb128 0x13
 1654 0311 60020000 		.4byte	.LASF47
 1655 0315 01       		.byte	0x1
 1656 0316 D302     		.2byte	0x2d3
 1657 0318 00000000 		.4byte	.LFB16
 1658 031c 2C000000 		.4byte	.LFE16-.LFB16
 1659 0320 01       		.uleb128 0x1
 1660 0321 9C       		.byte	0x9c
 1661 0322 45030000 		.4byte	0x345
 1662 0326 0F       		.uleb128 0xf
 1663 0327 D2020000 		.4byte	.LASF34
 1664 032b 01       		.byte	0x1
 1665 032c D302     		.2byte	0x2d3
 1666 032e 83000000 		.4byte	0x83
 1667 0332 02       		.uleb128 0x2
 1668 0333 91       		.byte	0x91
 1669 0334 74       		.sleb128 -12
 1670 0335 0F       		.uleb128 0xf
 1671 0336 72000000 		.4byte	.LASF48
 1672 033a 01       		.byte	0x1
 1673 033b D302     		.2byte	0x2d3
 1674 033d 9B000000 		.4byte	0x9b
 1675 0341 02       		.uleb128 0x2
 1676 0342 91       		.byte	0x91
 1677 0343 70       		.sleb128 -16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 46


 1678 0344 00       		.byte	0
 1679 0345 11       		.uleb128 0x11
 1680 0346 7C020000 		.4byte	.LASF49
 1681 034a 01       		.byte	0x1
 1682 034b F402     		.2byte	0x2f4
 1683 034d 8F000000 		.4byte	0x8f
 1684 0351 00000000 		.4byte	.LFB17
 1685 0355 A4000000 		.4byte	.LFE17-.LFB17
 1686 0359 01       		.uleb128 0x1
 1687 035a 9C       		.byte	0x9c
 1688 035b 8D030000 		.4byte	0x38d
 1689 035f 0F       		.uleb128 0xf
 1690 0360 D2020000 		.4byte	.LASF34
 1691 0364 01       		.byte	0x1
 1692 0365 F402     		.2byte	0x2f4
 1693 0367 83000000 		.4byte	0x83
 1694 036b 02       		.uleb128 0x2
 1695 036c 91       		.byte	0x91
 1696 036d 6C       		.sleb128 -20
 1697 036e 0F       		.uleb128 0xf
 1698 036f F6020000 		.4byte	.LASF50
 1699 0373 01       		.byte	0x1
 1700 0374 F402     		.2byte	0x2f4
 1701 0376 8F000000 		.4byte	0x8f
 1702 037a 02       		.uleb128 0x2
 1703 037b 91       		.byte	0x91
 1704 037c 6A       		.sleb128 -22
 1705 037d 10       		.uleb128 0x10
 1706 037e E1010000 		.4byte	.LASF51
 1707 0382 01       		.byte	0x1
 1708 0383 F602     		.2byte	0x2f6
 1709 0385 8F000000 		.4byte	0x8f
 1710 0389 02       		.uleb128 0x2
 1711 038a 91       		.byte	0x91
 1712 038b 76       		.sleb128 -10
 1713 038c 00       		.byte	0
 1714 038d 11       		.uleb128 0x11
 1715 038e 13010000 		.4byte	.LASF52
 1716 0392 01       		.byte	0x1
 1717 0393 2A03     		.2byte	0x32a
 1718 0395 9B000000 		.4byte	0x9b
 1719 0399 00000000 		.4byte	.LFB18
 1720 039d 90000000 		.4byte	.LFE18-.LFB18
 1721 03a1 01       		.uleb128 0x1
 1722 03a2 9C       		.byte	0x9c
 1723 03a3 D5030000 		.4byte	0x3d5
 1724 03a7 0F       		.uleb128 0xf
 1725 03a8 D2020000 		.4byte	.LASF34
 1726 03ac 01       		.byte	0x1
 1727 03ad 2A03     		.2byte	0x32a
 1728 03af 83000000 		.4byte	0x83
 1729 03b3 02       		.uleb128 0x2
 1730 03b4 91       		.byte	0x91
 1731 03b5 64       		.sleb128 -28
 1732 03b6 0F       		.uleb128 0xf
 1733 03b7 F6020000 		.4byte	.LASF50
 1734 03bb 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 47


 1735 03bc 2A03     		.2byte	0x32a
 1736 03be 8F000000 		.4byte	0x8f
 1737 03c2 02       		.uleb128 0x2
 1738 03c3 91       		.byte	0x91
 1739 03c4 62       		.sleb128 -30
 1740 03c5 10       		.uleb128 0x10
 1741 03c6 86010000 		.4byte	.LASF53
 1742 03ca 01       		.byte	0x1
 1743 03cb 2C03     		.2byte	0x32c
 1744 03cd C1000000 		.4byte	0xc1
 1745 03d1 02       		.uleb128 0x2
 1746 03d2 91       		.byte	0x91
 1747 03d3 68       		.sleb128 -24
 1748 03d4 00       		.byte	0
 1749 03d5 11       		.uleb128 0x11
 1750 03d6 81000000 		.4byte	.LASF54
 1751 03da 01       		.byte	0x1
 1752 03db 5703     		.2byte	0x357
 1753 03dd A7000000 		.4byte	0xa7
 1754 03e1 00000000 		.4byte	.LFB19
 1755 03e5 80000000 		.4byte	.LFE19-.LFB19
 1756 03e9 01       		.uleb128 0x1
 1757 03ea 9C       		.byte	0x9c
 1758 03eb 1D040000 		.4byte	0x41d
 1759 03ef 0F       		.uleb128 0xf
 1760 03f0 D2020000 		.4byte	.LASF34
 1761 03f4 01       		.byte	0x1
 1762 03f5 5703     		.2byte	0x357
 1763 03f7 83000000 		.4byte	0x83
 1764 03fb 02       		.uleb128 0x2
 1765 03fc 91       		.byte	0x91
 1766 03fd 64       		.sleb128 -28
 1767 03fe 0F       		.uleb128 0xf
 1768 03ff F6020000 		.4byte	.LASF50
 1769 0403 01       		.byte	0x1
 1770 0404 5703     		.2byte	0x357
 1771 0406 8F000000 		.4byte	0x8f
 1772 040a 02       		.uleb128 0x2
 1773 040b 91       		.byte	0x91
 1774 040c 62       		.sleb128 -30
 1775 040d 10       		.uleb128 0x10
 1776 040e AE010000 		.4byte	.LASF55
 1777 0412 01       		.byte	0x1
 1778 0413 5903     		.2byte	0x359
 1779 0415 A7000000 		.4byte	0xa7
 1780 0419 02       		.uleb128 0x2
 1781 041a 91       		.byte	0x91
 1782 041b 6C       		.sleb128 -20
 1783 041c 00       		.byte	0
 1784 041d 09       		.uleb128 0x9
 1785 041e 83000000 		.4byte	0x83
 1786 0422 2D040000 		.4byte	0x42d
 1787 0426 0A       		.uleb128 0xa
 1788 0427 E5000000 		.4byte	0xe5
 1789 042b 03       		.byte	0x3
 1790 042c 00       		.byte	0
 1791 042d 08       		.uleb128 0x8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 48


 1792 042e DC020000 		.4byte	.LASF56
 1793 0432 01       		.byte	0x1
 1794 0433 21       		.byte	0x21
 1795 0434 3E040000 		.4byte	0x43e
 1796 0438 05       		.uleb128 0x5
 1797 0439 03       		.byte	0x3
 1798 043a 00000000 		.4byte	ADC_channelsConfig
 1799 043e 0B       		.uleb128 0xb
 1800 043f 1D040000 		.4byte	0x41d
 1801 0443 14       		.uleb128 0x14
 1802 0444 54010000 		.4byte	.LASF57
 1803 0448 01       		.byte	0x1
 1804 0449 18       		.byte	0x18
 1805 044a 6B000000 		.4byte	0x6b
 1806 044e 05       		.uleb128 0x5
 1807 044f 03       		.byte	0x3
 1808 0450 00000000 		.4byte	ADC_initVar
 1809 0454 09       		.uleb128 0x9
 1810 0455 8F000000 		.4byte	0x8f
 1811 0459 64040000 		.4byte	0x464
 1812 045d 0A       		.uleb128 0xa
 1813 045e E5000000 		.4byte	0xe5
 1814 0462 03       		.byte	0x3
 1815 0463 00       		.byte	0
 1816 0464 14       		.uleb128 0x14
 1817 0465 AE020000 		.4byte	.LASF58
 1818 0469 01       		.byte	0x1
 1819 046a 19       		.byte	0x19
 1820 046b 75040000 		.4byte	0x475
 1821 046f 05       		.uleb128 0x5
 1822 0470 03       		.byte	0x3
 1823 0471 00000000 		.4byte	ADC_offset
 1824 0475 05       		.uleb128 0x5
 1825 0476 54040000 		.4byte	0x454
 1826 047a 09       		.uleb128 0x9
 1827 047b 9B000000 		.4byte	0x9b
 1828 047f 8A040000 		.4byte	0x48a
 1829 0483 0A       		.uleb128 0xa
 1830 0484 E5000000 		.4byte	0xe5
 1831 0488 03       		.byte	0x3
 1832 0489 00       		.byte	0
 1833 048a 14       		.uleb128 0x14
 1834 048b 27010000 		.4byte	.LASF59
 1835 048f 01       		.byte	0x1
 1836 0490 1A       		.byte	0x1a
 1837 0491 9B040000 		.4byte	0x49b
 1838 0495 05       		.uleb128 0x5
 1839 0496 03       		.byte	0x3
 1840 0497 00000000 		.4byte	ADC_countsPer10Volt
 1841 049b 05       		.uleb128 0x5
 1842 049c 7A040000 		.4byte	0x47a
 1843 04a0 00       		.byte	0
 1844              		.section	.debug_abbrev,"",%progbits
 1845              	.Ldebug_abbrev0:
 1846 0000 01       		.uleb128 0x1
 1847 0001 11       		.uleb128 0x11
 1848 0002 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 49


 1849 0003 25       		.uleb128 0x25
 1850 0004 0E       		.uleb128 0xe
 1851 0005 13       		.uleb128 0x13
 1852 0006 0B       		.uleb128 0xb
 1853 0007 03       		.uleb128 0x3
 1854 0008 0E       		.uleb128 0xe
 1855 0009 1B       		.uleb128 0x1b
 1856 000a 0E       		.uleb128 0xe
 1857 000b 55       		.uleb128 0x55
 1858 000c 17       		.uleb128 0x17
 1859 000d 11       		.uleb128 0x11
 1860 000e 01       		.uleb128 0x1
 1861 000f 10       		.uleb128 0x10
 1862 0010 17       		.uleb128 0x17
 1863 0011 00       		.byte	0
 1864 0012 00       		.byte	0
 1865 0013 02       		.uleb128 0x2
 1866 0014 24       		.uleb128 0x24
 1867 0015 00       		.byte	0
 1868 0016 0B       		.uleb128 0xb
 1869 0017 0B       		.uleb128 0xb
 1870 0018 3E       		.uleb128 0x3e
 1871 0019 0B       		.uleb128 0xb
 1872 001a 03       		.uleb128 0x3
 1873 001b 0E       		.uleb128 0xe
 1874 001c 00       		.byte	0
 1875 001d 00       		.byte	0
 1876 001e 03       		.uleb128 0x3
 1877 001f 24       		.uleb128 0x24
 1878 0020 00       		.byte	0
 1879 0021 0B       		.uleb128 0xb
 1880 0022 0B       		.uleb128 0xb
 1881 0023 3E       		.uleb128 0x3e
 1882 0024 0B       		.uleb128 0xb
 1883 0025 03       		.uleb128 0x3
 1884 0026 08       		.uleb128 0x8
 1885 0027 00       		.byte	0
 1886 0028 00       		.byte	0
 1887 0029 04       		.uleb128 0x4
 1888 002a 16       		.uleb128 0x16
 1889 002b 00       		.byte	0
 1890 002c 03       		.uleb128 0x3
 1891 002d 0E       		.uleb128 0xe
 1892 002e 3A       		.uleb128 0x3a
 1893 002f 0B       		.uleb128 0xb
 1894 0030 3B       		.uleb128 0x3b
 1895 0031 05       		.uleb128 0x5
 1896 0032 49       		.uleb128 0x49
 1897 0033 13       		.uleb128 0x13
 1898 0034 00       		.byte	0
 1899 0035 00       		.byte	0
 1900 0036 05       		.uleb128 0x5
 1901 0037 35       		.uleb128 0x35
 1902 0038 00       		.byte	0
 1903 0039 49       		.uleb128 0x49
 1904 003a 13       		.uleb128 0x13
 1905 003b 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 50


 1906 003c 00       		.byte	0
 1907 003d 06       		.uleb128 0x6
 1908 003e 2E       		.uleb128 0x2e
 1909 003f 00       		.byte	0
 1910 0040 3F       		.uleb128 0x3f
 1911 0041 19       		.uleb128 0x19
 1912 0042 03       		.uleb128 0x3
 1913 0043 0E       		.uleb128 0xe
 1914 0044 3A       		.uleb128 0x3a
 1915 0045 0B       		.uleb128 0xb
 1916 0046 3B       		.uleb128 0x3b
 1917 0047 0B       		.uleb128 0xb
 1918 0048 27       		.uleb128 0x27
 1919 0049 19       		.uleb128 0x19
 1920 004a 11       		.uleb128 0x11
 1921 004b 01       		.uleb128 0x1
 1922 004c 12       		.uleb128 0x12
 1923 004d 06       		.uleb128 0x6
 1924 004e 40       		.uleb128 0x40
 1925 004f 18       		.uleb128 0x18
 1926 0050 9642     		.uleb128 0x2116
 1927 0052 19       		.uleb128 0x19
 1928 0053 00       		.byte	0
 1929 0054 00       		.byte	0
 1930 0055 07       		.uleb128 0x7
 1931 0056 2E       		.uleb128 0x2e
 1932 0057 01       		.byte	0x1
 1933 0058 3F       		.uleb128 0x3f
 1934 0059 19       		.uleb128 0x19
 1935 005a 03       		.uleb128 0x3
 1936 005b 0E       		.uleb128 0xe
 1937 005c 3A       		.uleb128 0x3a
 1938 005d 0B       		.uleb128 0xb
 1939 005e 3B       		.uleb128 0x3b
 1940 005f 0B       		.uleb128 0xb
 1941 0060 27       		.uleb128 0x27
 1942 0061 19       		.uleb128 0x19
 1943 0062 11       		.uleb128 0x11
 1944 0063 01       		.uleb128 0x1
 1945 0064 12       		.uleb128 0x12
 1946 0065 06       		.uleb128 0x6
 1947 0066 40       		.uleb128 0x40
 1948 0067 18       		.uleb128 0x18
 1949 0068 9642     		.uleb128 0x2116
 1950 006a 19       		.uleb128 0x19
 1951 006b 01       		.uleb128 0x1
 1952 006c 13       		.uleb128 0x13
 1953 006d 00       		.byte	0
 1954 006e 00       		.byte	0
 1955 006f 08       		.uleb128 0x8
 1956 0070 34       		.uleb128 0x34
 1957 0071 00       		.byte	0
 1958 0072 03       		.uleb128 0x3
 1959 0073 0E       		.uleb128 0xe
 1960 0074 3A       		.uleb128 0x3a
 1961 0075 0B       		.uleb128 0xb
 1962 0076 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 51


 1963 0077 0B       		.uleb128 0xb
 1964 0078 49       		.uleb128 0x49
 1965 0079 13       		.uleb128 0x13
 1966 007a 02       		.uleb128 0x2
 1967 007b 18       		.uleb128 0x18
 1968 007c 00       		.byte	0
 1969 007d 00       		.byte	0
 1970 007e 09       		.uleb128 0x9
 1971 007f 01       		.uleb128 0x1
 1972 0080 01       		.byte	0x1
 1973 0081 49       		.uleb128 0x49
 1974 0082 13       		.uleb128 0x13
 1975 0083 01       		.uleb128 0x1
 1976 0084 13       		.uleb128 0x13
 1977 0085 00       		.byte	0
 1978 0086 00       		.byte	0
 1979 0087 0A       		.uleb128 0xa
 1980 0088 21       		.uleb128 0x21
 1981 0089 00       		.byte	0
 1982 008a 49       		.uleb128 0x49
 1983 008b 13       		.uleb128 0x13
 1984 008c 2F       		.uleb128 0x2f
 1985 008d 0B       		.uleb128 0xb
 1986 008e 00       		.byte	0
 1987 008f 00       		.byte	0
 1988 0090 0B       		.uleb128 0xb
 1989 0091 26       		.uleb128 0x26
 1990 0092 00       		.byte	0
 1991 0093 49       		.uleb128 0x49
 1992 0094 13       		.uleb128 0x13
 1993 0095 00       		.byte	0
 1994 0096 00       		.byte	0
 1995 0097 0C       		.uleb128 0xc
 1996 0098 2E       		.uleb128 0x2e
 1997 0099 00       		.byte	0
 1998 009a 3F       		.uleb128 0x3f
 1999 009b 19       		.uleb128 0x19
 2000 009c 03       		.uleb128 0x3
 2001 009d 0E       		.uleb128 0xe
 2002 009e 3A       		.uleb128 0x3a
 2003 009f 0B       		.uleb128 0xb
 2004 00a0 3B       		.uleb128 0x3b
 2005 00a1 05       		.uleb128 0x5
 2006 00a2 27       		.uleb128 0x27
 2007 00a3 19       		.uleb128 0x19
 2008 00a4 11       		.uleb128 0x11
 2009 00a5 01       		.uleb128 0x1
 2010 00a6 12       		.uleb128 0x12
 2011 00a7 06       		.uleb128 0x6
 2012 00a8 40       		.uleb128 0x40
 2013 00a9 18       		.uleb128 0x18
 2014 00aa 9642     		.uleb128 0x2116
 2015 00ac 19       		.uleb128 0x19
 2016 00ad 00       		.byte	0
 2017 00ae 00       		.byte	0
 2018 00af 0D       		.uleb128 0xd
 2019 00b0 2E       		.uleb128 0x2e
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 52


 2020 00b1 00       		.byte	0
 2021 00b2 3F       		.uleb128 0x3f
 2022 00b3 19       		.uleb128 0x19
 2023 00b4 03       		.uleb128 0x3
 2024 00b5 0E       		.uleb128 0xe
 2025 00b6 3A       		.uleb128 0x3a
 2026 00b7 0B       		.uleb128 0xb
 2027 00b8 3B       		.uleb128 0x3b
 2028 00b9 05       		.uleb128 0x5
 2029 00ba 27       		.uleb128 0x27
 2030 00bb 19       		.uleb128 0x19
 2031 00bc 11       		.uleb128 0x11
 2032 00bd 01       		.uleb128 0x1
 2033 00be 12       		.uleb128 0x12
 2034 00bf 06       		.uleb128 0x6
 2035 00c0 40       		.uleb128 0x40
 2036 00c1 18       		.uleb128 0x18
 2037 00c2 9742     		.uleb128 0x2117
 2038 00c4 19       		.uleb128 0x19
 2039 00c5 00       		.byte	0
 2040 00c6 00       		.byte	0
 2041 00c7 0E       		.uleb128 0xe
 2042 00c8 2E       		.uleb128 0x2e
 2043 00c9 01       		.byte	0x1
 2044 00ca 3F       		.uleb128 0x3f
 2045 00cb 19       		.uleb128 0x19
 2046 00cc 03       		.uleb128 0x3
 2047 00cd 0E       		.uleb128 0xe
 2048 00ce 3A       		.uleb128 0x3a
 2049 00cf 0B       		.uleb128 0xb
 2050 00d0 3B       		.uleb128 0x3b
 2051 00d1 05       		.uleb128 0x5
 2052 00d2 27       		.uleb128 0x27
 2053 00d3 19       		.uleb128 0x19
 2054 00d4 49       		.uleb128 0x49
 2055 00d5 13       		.uleb128 0x13
 2056 00d6 11       		.uleb128 0x11
 2057 00d7 01       		.uleb128 0x1
 2058 00d8 12       		.uleb128 0x12
 2059 00d9 06       		.uleb128 0x6
 2060 00da 40       		.uleb128 0x40
 2061 00db 18       		.uleb128 0x18
 2062 00dc 9742     		.uleb128 0x2117
 2063 00de 19       		.uleb128 0x19
 2064 00df 01       		.uleb128 0x1
 2065 00e0 13       		.uleb128 0x13
 2066 00e1 00       		.byte	0
 2067 00e2 00       		.byte	0
 2068 00e3 0F       		.uleb128 0xf
 2069 00e4 05       		.uleb128 0x5
 2070 00e5 00       		.byte	0
 2071 00e6 03       		.uleb128 0x3
 2072 00e7 0E       		.uleb128 0xe
 2073 00e8 3A       		.uleb128 0x3a
 2074 00e9 0B       		.uleb128 0xb
 2075 00ea 3B       		.uleb128 0x3b
 2076 00eb 05       		.uleb128 0x5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 53


 2077 00ec 49       		.uleb128 0x49
 2078 00ed 13       		.uleb128 0x13
 2079 00ee 02       		.uleb128 0x2
 2080 00ef 18       		.uleb128 0x18
 2081 00f0 00       		.byte	0
 2082 00f1 00       		.byte	0
 2083 00f2 10       		.uleb128 0x10
 2084 00f3 34       		.uleb128 0x34
 2085 00f4 00       		.byte	0
 2086 00f5 03       		.uleb128 0x3
 2087 00f6 0E       		.uleb128 0xe
 2088 00f7 3A       		.uleb128 0x3a
 2089 00f8 0B       		.uleb128 0xb
 2090 00f9 3B       		.uleb128 0x3b
 2091 00fa 05       		.uleb128 0x5
 2092 00fb 49       		.uleb128 0x49
 2093 00fc 13       		.uleb128 0x13
 2094 00fd 02       		.uleb128 0x2
 2095 00fe 18       		.uleb128 0x18
 2096 00ff 00       		.byte	0
 2097 0100 00       		.byte	0
 2098 0101 11       		.uleb128 0x11
 2099 0102 2E       		.uleb128 0x2e
 2100 0103 01       		.byte	0x1
 2101 0104 3F       		.uleb128 0x3f
 2102 0105 19       		.uleb128 0x19
 2103 0106 03       		.uleb128 0x3
 2104 0107 0E       		.uleb128 0xe
 2105 0108 3A       		.uleb128 0x3a
 2106 0109 0B       		.uleb128 0xb
 2107 010a 3B       		.uleb128 0x3b
 2108 010b 05       		.uleb128 0x5
 2109 010c 27       		.uleb128 0x27
 2110 010d 19       		.uleb128 0x19
 2111 010e 49       		.uleb128 0x49
 2112 010f 13       		.uleb128 0x13
 2113 0110 11       		.uleb128 0x11
 2114 0111 01       		.uleb128 0x1
 2115 0112 12       		.uleb128 0x12
 2116 0113 06       		.uleb128 0x6
 2117 0114 40       		.uleb128 0x40
 2118 0115 18       		.uleb128 0x18
 2119 0116 9642     		.uleb128 0x2116
 2120 0118 19       		.uleb128 0x19
 2121 0119 01       		.uleb128 0x1
 2122 011a 13       		.uleb128 0x13
 2123 011b 00       		.byte	0
 2124 011c 00       		.byte	0
 2125 011d 12       		.uleb128 0x12
 2126 011e 2E       		.uleb128 0x2e
 2127 011f 01       		.byte	0x1
 2128 0120 3F       		.uleb128 0x3f
 2129 0121 19       		.uleb128 0x19
 2130 0122 03       		.uleb128 0x3
 2131 0123 0E       		.uleb128 0xe
 2132 0124 3A       		.uleb128 0x3a
 2133 0125 0B       		.uleb128 0xb
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 54


 2134 0126 3B       		.uleb128 0x3b
 2135 0127 05       		.uleb128 0x5
 2136 0128 27       		.uleb128 0x27
 2137 0129 19       		.uleb128 0x19
 2138 012a 11       		.uleb128 0x11
 2139 012b 01       		.uleb128 0x1
 2140 012c 12       		.uleb128 0x12
 2141 012d 06       		.uleb128 0x6
 2142 012e 40       		.uleb128 0x40
 2143 012f 18       		.uleb128 0x18
 2144 0130 9742     		.uleb128 0x2117
 2145 0132 19       		.uleb128 0x19
 2146 0133 01       		.uleb128 0x1
 2147 0134 13       		.uleb128 0x13
 2148 0135 00       		.byte	0
 2149 0136 00       		.byte	0
 2150 0137 13       		.uleb128 0x13
 2151 0138 2E       		.uleb128 0x2e
 2152 0139 01       		.byte	0x1
 2153 013a 3F       		.uleb128 0x3f
 2154 013b 19       		.uleb128 0x19
 2155 013c 03       		.uleb128 0x3
 2156 013d 0E       		.uleb128 0xe
 2157 013e 3A       		.uleb128 0x3a
 2158 013f 0B       		.uleb128 0xb
 2159 0140 3B       		.uleb128 0x3b
 2160 0141 05       		.uleb128 0x5
 2161 0142 27       		.uleb128 0x27
 2162 0143 19       		.uleb128 0x19
 2163 0144 11       		.uleb128 0x11
 2164 0145 01       		.uleb128 0x1
 2165 0146 12       		.uleb128 0x12
 2166 0147 06       		.uleb128 0x6
 2167 0148 40       		.uleb128 0x40
 2168 0149 18       		.uleb128 0x18
 2169 014a 9642     		.uleb128 0x2116
 2170 014c 19       		.uleb128 0x19
 2171 014d 01       		.uleb128 0x1
 2172 014e 13       		.uleb128 0x13
 2173 014f 00       		.byte	0
 2174 0150 00       		.byte	0
 2175 0151 14       		.uleb128 0x14
 2176 0152 34       		.uleb128 0x34
 2177 0153 00       		.byte	0
 2178 0154 03       		.uleb128 0x3
 2179 0155 0E       		.uleb128 0xe
 2180 0156 3A       		.uleb128 0x3a
 2181 0157 0B       		.uleb128 0xb
 2182 0158 3B       		.uleb128 0x3b
 2183 0159 0B       		.uleb128 0xb
 2184 015a 49       		.uleb128 0x49
 2185 015b 13       		.uleb128 0x13
 2186 015c 3F       		.uleb128 0x3f
 2187 015d 19       		.uleb128 0x19
 2188 015e 02       		.uleb128 0x2
 2189 015f 18       		.uleb128 0x18
 2190 0160 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 55


 2191 0161 00       		.byte	0
 2192 0162 00       		.byte	0
 2193              		.section	.debug_aranges,"",%progbits
 2194 0000 A4000000 		.4byte	0xa4
 2195 0004 0200     		.2byte	0x2
 2196 0006 00000000 		.4byte	.Ldebug_info0
 2197 000a 04       		.byte	0x4
 2198 000b 00       		.byte	0
 2199 000c 0000     		.2byte	0
 2200 000e 0000     		.2byte	0
 2201 0010 00000000 		.4byte	.LFB2
 2202 0014 24000000 		.4byte	.LFE2-.LFB2
 2203 0018 00000000 		.4byte	.LFB3
 2204 001c 0C020000 		.4byte	.LFE3-.LFB3
 2205 0020 00000000 		.4byte	.LFB4
 2206 0024 38000000 		.4byte	.LFE4-.LFB4
 2207 0028 00000000 		.4byte	.LFB5
 2208 002c 18000000 		.4byte	.LFE5-.LFB5
 2209 0030 00000000 		.4byte	.LFB6
 2210 0034 1C000000 		.4byte	.LFE6-.LFB6
 2211 0038 00000000 		.4byte	.LFB7
 2212 003c 1C000000 		.4byte	.LFE7-.LFB7
 2213 0040 00000000 		.4byte	.LFB8
 2214 0044 48000000 		.4byte	.LFE8-.LFB8
 2215 0048 00000000 		.4byte	.LFB9
 2216 004c 44000000 		.4byte	.LFE9-.LFB9
 2217 0050 00000000 		.4byte	.LFB10
 2218 0054 1C000000 		.4byte	.LFE10-.LFB10
 2219 0058 00000000 		.4byte	.LFB11
 2220 005c 30000000 		.4byte	.LFE11-.LFB11
 2221 0060 00000000 		.4byte	.LFB12
 2222 0064 2C000000 		.4byte	.LFE12-.LFB12
 2223 0068 00000000 		.4byte	.LFB13
 2224 006c 1C000000 		.4byte	.LFE13-.LFB13
 2225 0070 00000000 		.4byte	.LFB14
 2226 0074 1C000000 		.4byte	.LFE14-.LFB14
 2227 0078 00000000 		.4byte	.LFB15
 2228 007c 30000000 		.4byte	.LFE15-.LFB15
 2229 0080 00000000 		.4byte	.LFB16
 2230 0084 2C000000 		.4byte	.LFE16-.LFB16
 2231 0088 00000000 		.4byte	.LFB17
 2232 008c A4000000 		.4byte	.LFE17-.LFB17
 2233 0090 00000000 		.4byte	.LFB18
 2234 0094 90000000 		.4byte	.LFE18-.LFB18
 2235 0098 00000000 		.4byte	.LFB19
 2236 009c 80000000 		.4byte	.LFE19-.LFB19
 2237 00a0 00000000 		.4byte	0
 2238 00a4 00000000 		.4byte	0
 2239              		.section	.debug_ranges,"",%progbits
 2240              	.Ldebug_ranges0:
 2241 0000 00000000 		.4byte	.LFB2
 2242 0004 24000000 		.4byte	.LFE2
 2243 0008 00000000 		.4byte	.LFB3
 2244 000c 0C020000 		.4byte	.LFE3
 2245 0010 00000000 		.4byte	.LFB4
 2246 0014 38000000 		.4byte	.LFE4
 2247 0018 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 56


 2248 001c 18000000 		.4byte	.LFE5
 2249 0020 00000000 		.4byte	.LFB6
 2250 0024 1C000000 		.4byte	.LFE6
 2251 0028 00000000 		.4byte	.LFB7
 2252 002c 1C000000 		.4byte	.LFE7
 2253 0030 00000000 		.4byte	.LFB8
 2254 0034 48000000 		.4byte	.LFE8
 2255 0038 00000000 		.4byte	.LFB9
 2256 003c 44000000 		.4byte	.LFE9
 2257 0040 00000000 		.4byte	.LFB10
 2258 0044 1C000000 		.4byte	.LFE10
 2259 0048 00000000 		.4byte	.LFB11
 2260 004c 30000000 		.4byte	.LFE11
 2261 0050 00000000 		.4byte	.LFB12
 2262 0054 2C000000 		.4byte	.LFE12
 2263 0058 00000000 		.4byte	.LFB13
 2264 005c 1C000000 		.4byte	.LFE13
 2265 0060 00000000 		.4byte	.LFB14
 2266 0064 1C000000 		.4byte	.LFE14
 2267 0068 00000000 		.4byte	.LFB15
 2268 006c 30000000 		.4byte	.LFE15
 2269 0070 00000000 		.4byte	.LFB16
 2270 0074 2C000000 		.4byte	.LFE16
 2271 0078 00000000 		.4byte	.LFB17
 2272 007c A4000000 		.4byte	.LFE17
 2273 0080 00000000 		.4byte	.LFB18
 2274 0084 90000000 		.4byte	.LFE18
 2275 0088 00000000 		.4byte	.LFB19
 2276 008c 80000000 		.4byte	.LFE19
 2277 0090 00000000 		.4byte	0
 2278 0094 00000000 		.4byte	0
 2279              		.section	.debug_line,"",%progbits
 2280              	.Ldebug_line0:
 2281 0000 9E020000 		.section	.debug_str,"MS",%progbits,1
 2281      02004000 
 2281      00000201 
 2281      FB0E0D00 
 2281      01010101 
 2282              	.LASF10:
 2283 0000 75696E74 		.ascii	"uint16\000"
 2283      313600
 2284              	.LASF62:
 2285 0007 433A5C55 		.ascii	"C:\\Users\\Andrew Joseph\\Desktop\\Senior Design\\t"
 2285      73657273 
 2285      5C416E64 
 2285      72657720 
 2285      4A6F7365 
 2286 0035 72756E6B 		.ascii	"runk\\src\\PSoC_Core\\fNIR PSoC Central\\fNIR PSoC "
 2286      5C737263 
 2286      5C50536F 
 2286      435F436F 
 2286      72655C66 
 2287 0064 43656E74 		.ascii	"Central.cydsn\000"
 2287      72616C2E 
 2287      63796473 
 2287      6E00
 2288              	.LASF48:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 57


 2289 0072 61646347 		.ascii	"adcGain\000"
 2289      61696E00 
 2290              	.LASF23:
 2291 007a 636F756E 		.ascii	"counts\000"
 2291      747300
 2292              	.LASF54:
 2293 0081 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2293      436F756E 
 2293      7473546F 
 2293      5F566F6C 
 2293      747300
 2294              	.LASF36:
 2295 0094 4144435F 		.ascii	"ADC_Init\000"
 2295      496E6974 
 2295      00
 2296              	.LASF7:
 2297 009d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2297      206C6F6E 
 2297      6720756E 
 2297      7369676E 
 2297      65642069 
 2298              	.LASF24:
 2299 00b4 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2299      496E7075 
 2299      7473506C 
 2299      6163656D 
 2299      656E7400 
 2300              	.LASF28:
 2301 00c8 4144435F 		.ascii	"ADC_StartConvert\000"
 2301      53746172 
 2301      74436F6E 
 2301      76657274 
 2301      00
 2302              	.LASF6:
 2303 00d9 6C6F6E67 		.ascii	"long long int\000"
 2303      206C6F6E 
 2303      6720696E 
 2303      7400
 2304              	.LASF0:
 2305 00e7 7369676E 		.ascii	"signed char\000"
 2305      65642063 
 2305      68617200 
 2306              	.LASF30:
 2307 00f3 73746174 		.ascii	"status\000"
 2307      757300
 2308              	.LASF13:
 2309 00fa 696E7433 		.ascii	"int32\000"
 2309      3200
 2310              	.LASF25:
 2311 0100 4144435F 		.ascii	"ADC_Start\000"
 2311      53746172 
 2311      7400
 2312              	.LASF4:
 2313 010a 6C6F6E67 		.ascii	"long int\000"
 2313      20696E74 
 2313      00
 2314              	.LASF52:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 58


 2315 0113 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2315      436F756E 
 2315      7473546F 
 2315      5F75566F 
 2315      6C747300 
 2316              	.LASF59:
 2317 0127 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2317      636F756E 
 2317      74735065 
 2317      72313056 
 2317      6F6C7400 
 2318              	.LASF9:
 2319 013b 75696E74 		.ascii	"uint8\000"
 2319      3800
 2320              	.LASF16:
 2321 0141 646F7562 		.ascii	"double\000"
 2321      6C6500
 2322              	.LASF11:
 2323 0148 75696E74 		.ascii	"uint32\000"
 2323      333200
 2324              	.LASF38:
 2325 014f 6D61736B 		.ascii	"mask\000"
 2325      00
 2326              	.LASF57:
 2327 0154 4144435F 		.ascii	"ADC_initVar\000"
 2327      696E6974 
 2327      56617200 
 2328              	.LASF33:
 2329 0160 7265744D 		.ascii	"retMode\000"
 2329      6F646500 
 2330              	.LASF43:
 2331 0168 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2331      5365744C 
 2331      696D6974 
 2331      4D61736B 
 2331      00
 2332              	.LASF8:
 2333 0179 756E7369 		.ascii	"unsigned int\000"
 2333      676E6564 
 2333      20696E74 
 2333      00
 2334              	.LASF53:
 2335 0186 75566F6C 		.ascii	"uVolts\000"
 2335      747300
 2336              	.LASF5:
 2337 018d 6C6F6E67 		.ascii	"long unsigned int\000"
 2337      20756E73 
 2337      69676E65 
 2337      6420696E 
 2337      7400
 2338              	.LASF44:
 2339 019f 4144435F 		.ascii	"ADC_SetSatMask\000"
 2339      53657453 
 2339      61744D61 
 2339      736B00
 2340              	.LASF55:
 2341 01ae 766F6C74 		.ascii	"volts\000"
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 59


 2341      7300
 2342              	.LASF22:
 2343 01b4 746D7052 		.ascii	"tmpRegVal\000"
 2343      65675661 
 2343      6C00
 2344              	.LASF3:
 2345 01be 73686F72 		.ascii	"short unsigned int\000"
 2345      7420756E 
 2345      7369676E 
 2345      65642069 
 2345      6E7400
 2346              	.LASF29:
 2347 01d1 4144435F 		.ascii	"ADC_StopConvert\000"
 2347      53746F70 
 2347      436F6E76 
 2347      65727400 
 2348              	.LASF51:
 2349 01e1 6D566F6C 		.ascii	"mVolts\000"
 2349      747300
 2350              	.LASF19:
 2351 01e8 72656733 		.ascii	"reg32\000"
 2351      3200
 2352              	.LASF14:
 2353 01ee 666C6F61 		.ascii	"float32\000"
 2353      74333200 
 2354              	.LASF20:
 2355 01f6 73697A65 		.ascii	"sizetype\000"
 2355      74797065 
 2355      00
 2356              	.LASF40:
 2357 01ff 6C6F774C 		.ascii	"lowLimit\000"
 2357      696D6974 
 2357      00
 2358              	.LASF41:
 2359 0208 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2359      53657448 
 2359      6967684C 
 2359      696D6974 
 2359      00
 2360              	.LASF31:
 2361 0219 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2361      4973456E 
 2361      64436F6E 
 2361      76657273 
 2361      696F6E00 
 2362              	.LASF17:
 2363 022d 696E7436 		.ascii	"int64\000"
 2363      3400
 2364              	.LASF37:
 2365 0233 4144435F 		.ascii	"ADC_SetChanMask\000"
 2365      53657443 
 2365      68616E4D 
 2365      61736B00 
 2366              	.LASF61:
 2367 0243 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2367      72617465 
 2367      645F536F 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 60


 2367      75726365 
 2367      5C50536F 
 2368              	.LASF47:
 2369 0260 4144435F 		.ascii	"ADC_SetGain\000"
 2369      53657447 
 2369      61696E00 
 2370              	.LASF15:
 2371 026c 666C6F61 		.ascii	"float\000"
 2371      7400
 2372              	.LASF42:
 2373 0272 68696768 		.ascii	"highLimit\000"
 2373      4C696D69 
 2373      7400
 2374              	.LASF49:
 2375 027c 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2375      436F756E 
 2375      7473546F 
 2375      5F6D566F 
 2375      6C747300 
 2376              	.LASF39:
 2377 0290 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2377      5365744C 
 2377      6F774C69 
 2377      6D697400 
 2378              	.LASF1:
 2379 02a0 756E7369 		.ascii	"unsigned char\000"
 2379      676E6564 
 2379      20636861 
 2379      7200
 2380              	.LASF58:
 2381 02ae 4144435F 		.ascii	"ADC_offset\000"
 2381      6F666673 
 2381      657400
 2382              	.LASF2:
 2383 02b9 73686F72 		.ascii	"short int\000"
 2383      7420696E 
 2383      7400
 2384              	.LASF27:
 2385 02c3 4144435F 		.ascii	"ADC_Stop\000"
 2385      53746F70 
 2385      00
 2386              	.LASF21:
 2387 02cc 63684E75 		.ascii	"chNum\000"
 2387      6D00
 2388              	.LASF34:
 2389 02d2 6368616E 		.ascii	"chan\000"
 2389      00
 2390              	.LASF18:
 2391 02d7 63686172 		.ascii	"char\000"
 2391      00
 2392              	.LASF56:
 2393 02dc 4144435F 		.ascii	"ADC_channelsConfig\000"
 2393      6368616E 
 2393      6E656C73 
 2393      436F6E66 
 2393      696700
 2394              	.LASF46:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cc9HGvx4.s 			page 61


 2395 02ef 6F666673 		.ascii	"offset\000"
 2395      657400
 2396              	.LASF50:
 2397 02f6 61646343 		.ascii	"adcCounts\000"
 2397      6F756E74 
 2397      7300
 2398              	.LASF26:
 2399 0300 4144435F 		.ascii	"ADC_Enable\000"
 2399      456E6162 
 2399      6C6500
 2400              	.LASF12:
 2401 030b 696E7431 		.ascii	"int16\000"
 2401      3600
 2402              	.LASF45:
 2403 0311 4144435F 		.ascii	"ADC_SetOffset\000"
 2403      5365744F 
 2403      66667365 
 2403      7400
 2404              	.LASF60:
 2405 031f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2405      4320342E 
 2405      392E3320 
 2405      32303135 
 2405      30333033 
 2406 0352 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2406      20726576 
 2406      6973696F 
 2406      6E203232 
 2406      31323230 
 2407 0385 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2407      66756E63 
 2407      74696F6E 
 2407      2D736563 
 2407      74696F6E 
 2408              	.LASF35:
 2409 03ad 72657375 		.ascii	"result\000"
 2409      6C7400
 2410              	.LASF32:
 2411 03b4 4144435F 		.ascii	"ADC_GetResult16\000"
 2411      47657452 
 2411      6573756C 
 2411      74313600 
 2412              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
