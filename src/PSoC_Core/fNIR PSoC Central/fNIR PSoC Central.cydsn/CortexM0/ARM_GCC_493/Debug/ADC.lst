ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 2


  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 4


  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 5


 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 173 0
  97 000e 534B     		ldr	r3, .L16
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 514B     		ldr	r3, .L16+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 6


 106 001e 514B     		ldr	r3, .L16+8
 107 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 5049     		ldr	r1, .L16+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 5049     		ldr	r1, .L16+16
 117              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 504B     		ldr	r3, .L16+20
 120 002e 504A     		ldr	r2, .L16+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 4F4B     		ldr	r3, .L16+24
 126 0038 4F4A     		ldr	r2, .L16+28
 127 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 4F4B     		ldr	r3, .L16+32
 130 003e 504A     		ldr	r2, .L16+36
 131 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 504B     		ldr	r3, .L16+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 4F4B     		ldr	r3, .L16+44
 138 004a 504A     		ldr	r2, .L16+48
 139 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 504B     		ldr	r3, .L16+52
 142 0050 4E4A     		ldr	r2, .L16+48
 143 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 4F4B     		ldr	r3, .L16+56
 146 0056 4F4A     		ldr	r2, .L16+56
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 7


 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 197 0 discriminator 4
 153 0062 4D4B     		ldr	r3, .L16+60
 154 0064 0022     		mov	r2, #0
 155 0066 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 198 0 discriminator 4
 157 0068 4C4B     		ldr	r3, .L16+64
 158 006a 0022     		mov	r2, #0
 159 006c 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 160              		.loc 1 199 0 discriminator 4
 161 006e 4C4B     		ldr	r3, .L16+68
 162 0070 0122     		mov	r2, #1
 163 0072 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 164              		.loc 1 206 0 discriminator 4
 165 0074 4B4B     		ldr	r3, .L16+72
 166 0076 1B68     		ldr	r3, [r3]
 167 0078 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 168              		.loc 1 207 0 discriminator 4
 169 007a 7B68     		ldr	r3, [r7, #4]
 170 007c 4A4A     		ldr	r2, .L16+76
 171 007e 1340     		and	r3, r2
 172 0080 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 173              		.loc 1 220 0 discriminator 4
 174 0082 7B68     		ldr	r3, [r7, #4]
 175 0084 8022     		mov	r2, #128
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 8


 176 0086 9205     		lsl	r2, r2, #22
 177 0088 1343     		orr	r3, r2
 178 008a 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 179              		.loc 1 221 0 discriminator 4
 180 008c 7B68     		ldr	r3, [r7, #4]
 181 008e 0122     		mov	r2, #1
 182 0090 9343     		bic	r3, r2
 183 0092 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 184              		.loc 1 226 0 discriminator 4
 185 0094 434B     		ldr	r3, .L16+72
 186 0096 7A68     		ldr	r2, [r7, #4]
 187 0098 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 188              		.loc 1 232 0 discriminator 4
 189 009a 0023     		mov	r3, #0
 190 009c FB60     		str	r3, [r7, #12]
 191 009e 57E0     		b	.L8
 192              	.L15:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 193              		.loc 1 234 0
 194 00a0 0022     		mov	r2, #0
 195 00a2 DC23     		mov	r3, #220
 196 00a4 9B01     		lsl	r3, r3, #6
 197 00a6 1340     		and	r3, r2
 198 00a8 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 199              		.loc 1 253 0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 9


 200 00aa FB68     		ldr	r3, [r7, #12]
 201 00ac 9B00     		lsl	r3, r3, #2
 202 00ae 3F4A     		ldr	r2, .L16+80
 203 00b0 9446     		mov	ip, r2
 204 00b2 6344     		add	r3, r3, ip
 205 00b4 7A68     		ldr	r2, [r7, #4]
 206 00b6 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 207              		.loc 1 255 0
 208 00b8 0022     		mov	r2, #0
 209 00ba 0123     		mov	r3, #1
 210 00bc 1340     		and	r3, r2
 211 00be 09D0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 212              		.loc 1 257 0
 213 00c0 354B     		ldr	r3, .L16+60
 214 00c2 354A     		ldr	r2, .L16+60
 215 00c4 1268     		ldr	r2, [r2]
 216 00c6 F968     		ldr	r1, [r7, #12]
 217 00c8 0120     		mov	r0, #1
 218 00ca 8840     		lsl	r0, r0, r1
 219 00cc 011C     		mov	r1, r0
 220 00ce 89B2     		uxth	r1, r1
 221 00d0 0A43     		orr	r2, r1
 222 00d2 1A60     		str	r2, [r3]
 223              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 224              		.loc 1 260 0
 225 00d4 0022     		mov	r2, #0
 226 00d6 0223     		mov	r3, #2
 227 00d8 1340     		and	r3, r2
 228 00da 09D0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 229              		.loc 1 262 0
 230 00dc 2F4B     		ldr	r3, .L16+64
 231 00de 2F4A     		ldr	r2, .L16+64
 232 00e0 1268     		ldr	r2, [r2]
 233 00e2 F968     		ldr	r1, [r7, #12]
 234 00e4 0120     		mov	r0, #1
 235 00e6 8840     		lsl	r0, r0, r1
 236 00e8 011C     		mov	r1, r0
 237 00ea 89B2     		uxth	r1, r1
 238 00ec 0A43     		orr	r2, r1
 239 00ee 1A60     		str	r2, [r3]
 240              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 10


 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 241              		.loc 1 282 0
 242 00f0 0022     		mov	r2, #0
 243 00f2 8023     		mov	r3, #128
 244 00f4 9B00     		lsl	r3, r3, #2
 245 00f6 1340     		and	r3, r2
 246 00f8 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 247              		.loc 1 284 0
 248 00fa 8023     		mov	r3, #128
 249 00fc 5B00     		lsl	r3, r3, #1
 250 00fe BB60     		str	r3, [r7, #8]
 251 0100 02E0     		b	.L12
 252              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 253              		.loc 1 288 0
 254 0102 8023     		mov	r3, #128
 255 0104 5B01     		lsl	r3, r3, #5
 256 0106 BB60     		str	r3, [r7, #8]
 257              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 258              		.loc 1 291 0
 259 0108 0022     		mov	r2, #0
 260 010a 8023     		mov	r3, #128
 261 010c 5B00     		lsl	r3, r3, #1
 262 010e 1340     		and	r3, r2
 263 0110 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 264              		.loc 1 298 0
 265 0112 274B     		ldr	r3, .L16+84
 266 0114 FA68     		ldr	r2, [r7, #12]
 267 0116 5200     		lsl	r2, r2, #1
 268 0118 0021     		mov	r1, #0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 11


 269 011a D152     		strh	r1, [r2, r3]
 270 011c 04E0     		b	.L14
 271              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 272              		.loc 1 307 0
 273 011e 244B     		ldr	r3, .L16+84
 274 0120 FA68     		ldr	r2, [r7, #12]
 275 0122 5200     		lsl	r2, r2, #1
 276 0124 0021     		mov	r1, #0
 277 0126 D152     		strh	r1, [r2, r3]
 278              	.L14:
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 279              		.loc 1 311 0 discriminator 2
 280 0128 BB68     		ldr	r3, [r7, #8]
 281 012a 224A     		ldr	r2, .L16+88
 282 012c 5343     		mul	r3, r2
 283 012e 224A     		ldr	r2, .L16+92
 284 0130 9446     		mov	ip, r2
 285 0132 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 286              		.loc 1 312 0 discriminator 2
 287 0134 181C     		mov	r0, r3
 288 0136 2149     		ldr	r1, .L16+96
 289 0138 FFF7FEFF 		bl	__aeabi_idiv
 290 013c 031C     		mov	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 291              		.loc 1 311 0 discriminator 2
 292 013e 9BB2     		uxth	r3, r3
 293 0140 19B2     		sxth	r1, r3
 294 0142 1F4B     		ldr	r3, .L16+100
 295 0144 FA68     		ldr	r2, [r7, #12]
 296 0146 9200     		lsl	r2, r2, #2
 297 0148 D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 298              		.loc 1 232 0 discriminator 2
 299 014a FB68     		ldr	r3, [r7, #12]
 300 014c 0133     		add	r3, r3, #1
 301 014e FB60     		str	r3, [r7, #12]
 302              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 303              		.loc 1 232 0 is_stmt 0 discriminator 1
 304 0150 FB68     		ldr	r3, [r7, #12]
 305 0152 002B     		cmp	r3, #0
 306 0154 A4D0     		beq	.L15
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 12


 307              		.loc 1 314 0 is_stmt 1
 308 0156 BD46     		mov	sp, r7
 309 0158 04B0     		add	sp, sp, #16
 310              		@ sp needed
 311 015a 80BD     		pop	{r7, pc}
 312              	.L17:
 313              		.align	2
 314              	.L16:
 315 015c 00000000 		.word	ADC_ISR
 316 0160 20003A40 		.word	1077542944
 317 0164 80033A40 		.word	1077543808
 318 0168 70021051 		.word	1360003696
 319 016c 70020051 		.word	1358955120
 320 0170 00003A40 		.word	1077542912
 321 0174 04003A40 		.word	1077542916
 322 0178 8C000080 		.word	-2147483508
 323 017c 18003A40 		.word	1077542936
 324 0180 0000FF07 		.word	134152192
 325 0184 1C003A40 		.word	1077542940
 326 0188 10003A40 		.word	1077542928
 327 018c 02000200 		.word	131074
 328 0190 14003A40 		.word	1077542932
 329 0194 00033A40 		.word	1077543680
 330 0198 28023A40 		.word	1077543464
 331 019c 38023A40 		.word	1077543480
 332 01a0 18023A40 		.word	1077543448
 333 01a4 30003A40 		.word	1077542960
 334 01a8 FFFFFFDF 		.word	-536870913
 335 01ac 80003A40 		.word	1077543040
 336 01b0 00000000 		.word	ADC_offset
 337 01b4 10270000 		.word	10000
 338 01b8 E40C0000 		.word	3300
 339 01bc C8190000 		.word	6600
 340 01c0 00000000 		.word	ADC_countsPer10Volt
 341              		.cfi_endproc
 342              	.LFE3:
 343              		.size	ADC_Init, .-ADC_Init
 344              		.section	.text.ADC_Enable,"ax",%progbits
 345              		.align	2
 346              		.global	ADC_Enable
 347              		.code	16
 348              		.thumb_func
 349              		.type	ADC_Enable, %function
 350              	ADC_Enable:
 351              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 13


 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 352              		.loc 1 331 0
 353              		.cfi_startproc
 354 0000 80B5     		push	{r7, lr}
 355              		.cfi_def_cfa_offset 8
 356              		.cfi_offset 7, -8
 357              		.cfi_offset 14, -4
 358 0002 00AF     		add	r7, sp, #0
 359              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 360              		.loc 1 332 0
 361 0004 0A4B     		ldr	r3, .L21
 362 0006 1B68     		ldr	r3, [r3]
 363 0008 002B     		cmp	r3, #0
 364 000a 0EDB     		blt	.L18
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 365              		.loc 1 336 0
 366 000c C046     		mov	r8, r8
 367              	.L20:
 368              		.loc 1 336 0 is_stmt 0 discriminator 1
 369 000e 094B     		ldr	r3, .L21+4
 370 0010 1B68     		ldr	r3, [r3]
 371 0012 002B     		cmp	r3, #0
 372 0014 FBDB     		blt	.L20
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 373              		.loc 1 342 0 is_stmt 1
 374 0016 064B     		ldr	r3, .L21
 375 0018 054A     		ldr	r2, .L21
 376 001a 1268     		ldr	r2, [r2]
 377 001c 8021     		mov	r1, #128
 378 001e 0906     		lsl	r1, r1, #24
 379 0020 0A43     		orr	r2, r1
 380 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 381              		.loc 1 345 0
 382 0024 0A20     		mov	r0, #10
 383 0026 FFF7FEFF 		bl	CyDelayUs
 384              	.L18:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 385              		.loc 1 347 0
 386 002a BD46     		mov	sp, r7
 387              		@ sp needed
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 14


 388 002c 80BD     		pop	{r7, pc}
 389              	.L22:
 390 002e C046     		.align	2
 391              	.L21:
 392 0030 00003A40 		.word	1077542912
 393 0034 08023A40 		.word	1077543432
 394              		.cfi_endproc
 395              	.LFE4:
 396              		.size	ADC_Enable, .-ADC_Enable
 397              		.section	.text.ADC_Stop,"ax",%progbits
 398              		.align	2
 399              		.global	ADC_Stop
 400              		.code	16
 401              		.thumb_func
 402              		.type	ADC_Stop, %function
 403              	ADC_Stop:
 404              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 405              		.loc 1 366 0
 406              		.cfi_startproc
 407 0000 80B5     		push	{r7, lr}
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 413              		.loc 1 367 0
 414 0004 034B     		ldr	r3, .L24
 415 0006 034A     		ldr	r2, .L24
 416 0008 1268     		ldr	r2, [r2]
 417 000a 5200     		lsl	r2, r2, #1
 418 000c 5208     		lsr	r2, r2, #1
 419 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 420              		.loc 1 368 0
 421 0010 BD46     		mov	sp, r7
 422              		@ sp needed
 423 0012 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 15


 424              	.L25:
 425              		.align	2
 426              	.L24:
 427 0014 00003A40 		.word	1077542912
 428              		.cfi_endproc
 429              	.LFE5:
 430              		.size	ADC_Stop, .-ADC_Stop
 431              		.section	.text.ADC_StartConvert,"ax",%progbits
 432              		.align	2
 433              		.global	ADC_StartConvert
 434              		.code	16
 435              		.thumb_func
 436              		.type	ADC_StartConvert, %function
 437              	ADC_StartConvert:
 438              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 439              		.loc 1 392 0
 440              		.cfi_startproc
 441 0000 80B5     		push	{r7, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 00AF     		add	r7, sp, #0
 446              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 447              		.loc 1 394 0
 448 0004 044B     		ldr	r3, .L27
 449 0006 044A     		ldr	r2, .L27
 450 0008 1268     		ldr	r2, [r2]
 451 000a 8021     		mov	r1, #128
 452 000c 4902     		lsl	r1, r1, #9
 453 000e 0A43     		orr	r2, r1
 454 0010 1A60     		str	r2, [r3]
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 16


 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 455              		.loc 1 399 0
 456 0012 BD46     		mov	sp, r7
 457              		@ sp needed
 458 0014 80BD     		pop	{r7, pc}
 459              	.L28:
 460 0016 C046     		.align	2
 461              	.L27:
 462 0018 04003A40 		.word	1077542916
 463              		.cfi_endproc
 464              	.LFE6:
 465              		.size	ADC_StartConvert, .-ADC_StartConvert
 466              		.section	.text.ADC_StopConvert,"ax",%progbits
 467              		.align	2
 468              		.global	ADC_StopConvert
 469              		.code	16
 470              		.thumb_func
 471              		.type	ADC_StopConvert, %function
 472              	ADC_StopConvert:
 473              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 474              		.loc 1 417 0
 475              		.cfi_startproc
 476 0000 80B5     		push	{r7, lr}
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 00AF     		add	r7, sp, #0
 481              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 482              		.loc 1 419 0
 483 0004 034B     		ldr	r3, .L30
 484 0006 034A     		ldr	r2, .L30
 485 0008 1268     		ldr	r2, [r2]
 486 000a 0349     		ldr	r1, .L30+4
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 17


 487 000c 0A40     		and	r2, r1
 488 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 489              		.loc 1 421 0
 490 0010 BD46     		mov	sp, r7
 491              		@ sp needed
 492 0012 80BD     		pop	{r7, pc}
 493              	.L31:
 494              		.align	2
 495              	.L30:
 496 0014 04003A40 		.word	1077542916
 497 0018 FFFFFEFF 		.word	-65537
 498              		.cfi_endproc
 499              	.LFE7:
 500              		.size	ADC_StopConvert, .-ADC_StopConvert
 501              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 502              		.align	2
 503              		.global	ADC_IsEndConversion
 504              		.code	16
 505              		.thumb_func
 506              		.type	ADC_IsEndConversion, %function
 507              	ADC_IsEndConversion:
 508              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 509              		.loc 1 451 0
 510              		.cfi_startproc
 511 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 18


 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
 515 0002 84B0     		sub	sp, sp, #16
 516              		.cfi_def_cfa_offset 24
 517 0004 00AF     		add	r7, sp, #0
 518              		.cfi_def_cfa_register 7
 519 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 520              		.loc 1 452 0
 521 0008 0023     		mov	r3, #0
 522 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 523              		.loc 1 454 0
 524 000c 7B68     		ldr	r3, [r7, #4]
 525 000e 0322     		mov	r2, #3
 526 0010 1340     		and	r3, r2
 527 0012 11D0     		beq	.L33
 528              	.L35:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 529              		.loc 1 458 0 discriminator 2
 530 0014 0B4B     		ldr	r3, .L37
 531 0016 1B68     		ldr	r3, [r3]
 532 0018 0122     		mov	r2, #1
 533 001a 1340     		and	r3, r2
 534 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 535              		.loc 1 459 0 discriminator 2
 536 001e FB68     		ldr	r3, [r7, #12]
 537 0020 002B     		cmp	r3, #0
 538 0022 03D1     		bne	.L34
 539              		.loc 1 459 0 is_stmt 0 discriminator 1
 540 0024 7B68     		ldr	r3, [r7, #4]
 541 0026 0222     		mov	r2, #2
 542 0028 1340     		and	r3, r2
 543 002a F3D1     		bne	.L35
 544              	.L34:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 545              		.loc 1 461 0 is_stmt 1
 546 002c FB68     		ldr	r3, [r7, #12]
 547 002e 002B     		cmp	r3, #0
 548 0030 02D0     		beq	.L33
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 549              		.loc 1 464 0
 550 0032 044B     		ldr	r3, .L37
 551 0034 0122     		mov	r2, #1
 552 0036 1A60     		str	r2, [r3]
 553              	.L33:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 19


 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 554              		.loc 1 485 0
 555 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 556              		.loc 1 486 0
 557 003a 181C     		mov	r0, r3
 558 003c BD46     		mov	sp, r7
 559 003e 04B0     		add	sp, sp, #16
 560              		@ sp needed
 561 0040 80BD     		pop	{r7, pc}
 562              	.L38:
 563 0042 C046     		.align	2
 564              	.L37:
 565 0044 10023A40 		.word	1077543440
 566              		.cfi_endproc
 567              	.LFE8:
 568              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 569              		.section	.text.ADC_GetResult16,"ax",%progbits
 570              		.align	2
 571              		.global	ADC_GetResult16
 572              		.code	16
 573              		.thumb_func
 574              		.type	ADC_GetResult16, %function
 575              	ADC_GetResult16:
 576              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 20


 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 577              		.loc 1 505 0
 578              		.cfi_startproc
 579 0000 80B5     		push	{r7, lr}
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 84B0     		sub	sp, sp, #16
 584              		.cfi_def_cfa_offset 24
 585 0004 00AF     		add	r7, sp, #0
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 588              		.loc 1 509 0
 589 0008 7B68     		ldr	r3, [r7, #4]
 590 000a 002B     		cmp	r3, #0
 591 000c 02D0     		beq	.L40
 592              		.loc 1 509 0 is_stmt 0 discriminator 1
 593 000e 0020     		mov	r0, #0
 594 0010 FFF7FEFF 		bl	CyHalt
 595              	.L40:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 596              		.loc 1 511 0 is_stmt 1
 597 0014 7B68     		ldr	r3, [r7, #4]
 598 0016 002B     		cmp	r3, #0
 599 0018 09D1     		bne	.L41
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 600              		.loc 1 513 0
 601 001a 7B68     		ldr	r3, [r7, #4]
 602 001c 9B00     		lsl	r3, r3, #2
 603 001e 084A     		ldr	r2, .L44
 604 0020 9446     		mov	ip, r2
 605 0022 6344     		add	r3, r3, ip
 606 0024 1B68     		ldr	r3, [r3]
 607 0026 1B04     		lsl	r3, r3, #16
 608 0028 1B0C     		lsr	r3, r3, #16
 609 002a FB60     		str	r3, [r7, #12]
 610 002c 01E0     		b	.L42
 611              	.L41:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 612              		.loc 1 521 0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 21


 613 002e 0023     		mov	r3, #0
 614 0030 FB60     		str	r3, [r7, #12]
 615              	.L42:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 616              		.loc 1 525 0
 617 0032 FB68     		ldr	r3, [r7, #12]
 618 0034 9BB2     		uxth	r3, r3
 619 0036 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 620              		.loc 1 526 0
 621 0038 181C     		mov	r0, r3
 622 003a BD46     		mov	sp, r7
 623 003c 04B0     		add	sp, sp, #16
 624              		@ sp needed
 625 003e 80BD     		pop	{r7, pc}
 626              	.L45:
 627              		.align	2
 628              	.L44:
 629 0040 80013A40 		.word	1077543296
 630              		.cfi_endproc
 631              	.LFE9:
 632              		.size	ADC_GetResult16, .-ADC_GetResult16
 633              		.section	.text.ADC_SetChanMask,"ax",%progbits
 634              		.align	2
 635              		.global	ADC_SetChanMask
 636              		.code	16
 637              		.thumb_func
 638              		.type	ADC_SetChanMask, %function
 639              	ADC_SetChanMask:
 640              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 22


 641              		.loc 1 550 0
 642              		.cfi_startproc
 643 0000 80B5     		push	{r7, lr}
 644              		.cfi_def_cfa_offset 8
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 82B0     		sub	sp, sp, #8
 648              		.cfi_def_cfa_offset 16
 649 0004 00AF     		add	r7, sp, #0
 650              		.cfi_def_cfa_register 7
 651 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 652              		.loc 1 551 0
 653 0008 034B     		ldr	r3, .L47
 654 000a 7A68     		ldr	r2, [r7, #4]
 655 000c 0121     		mov	r1, #1
 656 000e 0A40     		and	r2, r1
 657 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 658              		.loc 1 552 0
 659 0012 BD46     		mov	sp, r7
 660 0014 02B0     		add	sp, sp, #8
 661              		@ sp needed
 662 0016 80BD     		pop	{r7, pc}
 663              	.L48:
 664              		.align	2
 665              	.L47:
 666 0018 20003A40 		.word	1077542944
 667              		.cfi_endproc
 668              	.LFE10:
 669              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 670              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 671              		.align	2
 672              		.global	ADC_SetLowLimit
 673              		.code	16
 674              		.thumb_func
 675              		.type	ADC_SetLowLimit, %function
 676              	ADC_SetLowLimit:
 677              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 23


 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 678              		.loc 1 594 0
 679              		.cfi_startproc
 680 0000 80B5     		push	{r7, lr}
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 7, -8
 683              		.cfi_offset 14, -4
 684 0002 82B0     		sub	sp, sp, #8
 685              		.cfi_def_cfa_offset 16
 686 0004 00AF     		add	r7, sp, #0
 687              		.cfi_def_cfa_register 7
 688 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 689              		.loc 1 595 0
 690 0008 084B     		ldr	r3, .L50
 691 000a 084A     		ldr	r2, .L50
 692 000c 1268     		ldr	r2, [r2]
 693 000e 120C     		lsr	r2, r2, #16
 694 0010 1204     		lsl	r2, r2, #16
 695 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 696              		.loc 1 596 0
 697 0014 054B     		ldr	r3, .L50
 698 0016 054A     		ldr	r2, .L50
 699 0018 1168     		ldr	r1, [r2]
 700 001a 7A68     		ldr	r2, [r7, #4]
 701 001c 1204     		lsl	r2, r2, #16
 702 001e 120C     		lsr	r2, r2, #16
 703 0020 0A43     		orr	r2, r1
 704 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 705              		.loc 1 597 0
 706 0024 BD46     		mov	sp, r7
 707 0026 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 24


 708              		@ sp needed
 709 0028 80BD     		pop	{r7, pc}
 710              	.L51:
 711 002a C046     		.align	2
 712              	.L50:
 713 002c 18003A40 		.word	1077542936
 714              		.cfi_endproc
 715              	.LFE11:
 716              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 717              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 718              		.align	2
 719              		.global	ADC_SetHighLimit
 720              		.code	16
 721              		.thumb_func
 722              		.type	ADC_SetHighLimit, %function
 723              	ADC_SetHighLimit:
 724              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 725              		.loc 1 615 0
 726              		.cfi_startproc
 727 0000 80B5     		push	{r7, lr}
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 7, -8
 730              		.cfi_offset 14, -4
 731 0002 82B0     		sub	sp, sp, #8
 732              		.cfi_def_cfa_offset 16
 733 0004 00AF     		add	r7, sp, #0
 734              		.cfi_def_cfa_register 7
 735 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 736              		.loc 1 616 0
 737 0008 074B     		ldr	r3, .L53
 738 000a 074A     		ldr	r2, .L53
 739 000c 1268     		ldr	r2, [r2]
 740 000e 1204     		lsl	r2, r2, #16
 741 0010 120C     		lsr	r2, r2, #16
 742 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 743              		.loc 1 617 0
 744 0014 044B     		ldr	r3, .L53
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 25


 745 0016 044A     		ldr	r2, .L53
 746 0018 1168     		ldr	r1, [r2]
 747 001a 7A68     		ldr	r2, [r7, #4]
 748 001c 1204     		lsl	r2, r2, #16
 749 001e 0A43     		orr	r2, r1
 750 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 751              		.loc 1 618 0
 752 0022 BD46     		mov	sp, r7
 753 0024 02B0     		add	sp, sp, #8
 754              		@ sp needed
 755 0026 80BD     		pop	{r7, pc}
 756              	.L54:
 757              		.align	2
 758              	.L53:
 759 0028 18003A40 		.word	1077542936
 760              		.cfi_endproc
 761              	.LFE12:
 762              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 763              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 764              		.align	2
 765              		.global	ADC_SetLimitMask
 766              		.code	16
 767              		.thumb_func
 768              		.type	ADC_SetLimitMask, %function
 769              	ADC_SetLimitMask:
 770              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 771              		.loc 1 639 0
 772              		.cfi_startproc
 773 0000 80B5     		push	{r7, lr}
 774              		.cfi_def_cfa_offset 8
 775              		.cfi_offset 7, -8
 776              		.cfi_offset 14, -4
 777 0002 82B0     		sub	sp, sp, #8
 778              		.cfi_def_cfa_offset 16
 779 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 26


 780              		.cfi_def_cfa_register 7
 781 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 782              		.loc 1 640 0
 783 0008 034B     		ldr	r3, .L56
 784 000a 7A68     		ldr	r2, [r7, #4]
 785 000c 0121     		mov	r1, #1
 786 000e 0A40     		and	r2, r1
 787 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 788              		.loc 1 641 0
 789 0012 BD46     		mov	sp, r7
 790 0014 02B0     		add	sp, sp, #8
 791              		@ sp needed
 792 0016 80BD     		pop	{r7, pc}
 793              	.L57:
 794              		.align	2
 795              	.L56:
 796 0018 38023A40 		.word	1077543480
 797              		.cfi_endproc
 798              	.LFE13:
 799              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 800              		.section	.text.ADC_SetSatMask,"ax",%progbits
 801              		.align	2
 802              		.global	ADC_SetSatMask
 803              		.code	16
 804              		.thumb_func
 805              		.type	ADC_SetSatMask, %function
 806              	ADC_SetSatMask:
 807              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 808              		.loc 1 662 0
 809              		.cfi_startproc
 810 0000 80B5     		push	{r7, lr}
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 27


 814 0002 82B0     		sub	sp, sp, #8
 815              		.cfi_def_cfa_offset 16
 816 0004 00AF     		add	r7, sp, #0
 817              		.cfi_def_cfa_register 7
 818 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 819              		.loc 1 663 0
 820 0008 034B     		ldr	r3, .L59
 821 000a 7A68     		ldr	r2, [r7, #4]
 822 000c 0121     		mov	r1, #1
 823 000e 0A40     		and	r2, r1
 824 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 825              		.loc 1 664 0
 826 0012 BD46     		mov	sp, r7
 827 0014 02B0     		add	sp, sp, #8
 828              		@ sp needed
 829 0016 80BD     		pop	{r7, pc}
 830              	.L60:
 831              		.align	2
 832              	.L59:
 833 0018 28023A40 		.word	1077543464
 834              		.cfi_endproc
 835              	.LFE14:
 836              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 837              		.section	.text.ADC_SetOffset,"ax",%progbits
 838              		.align	2
 839              		.global	ADC_SetOffset
 840              		.code	16
 841              		.thumb_func
 842              		.type	ADC_SetOffset, %function
 843              	ADC_SetOffset:
 844              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 28


 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 845              		.loc 1 690 0
 846              		.cfi_startproc
 847 0000 80B5     		push	{r7, lr}
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 14, -4
 851 0002 82B0     		sub	sp, sp, #8
 852              		.cfi_def_cfa_offset 16
 853 0004 00AF     		add	r7, sp, #0
 854              		.cfi_def_cfa_register 7
 855 0006 7860     		str	r0, [r7, #4]
 856 0008 0A1C     		mov	r2, r1
 857 000a BB1C     		add	r3, r7, #2
 858 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 859              		.loc 1 692 0
 860 000e 7B68     		ldr	r3, [r7, #4]
 861 0010 002B     		cmp	r3, #0
 862 0012 02D0     		beq	.L62
 863              		.loc 1 692 0 is_stmt 0 discriminator 1
 864 0014 0020     		mov	r0, #0
 865 0016 FFF7FEFF 		bl	CyHalt
 866              	.L62:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 867              		.loc 1 694 0 is_stmt 1
 868 001a 044B     		ldr	r3, .L63
 869 001c 7A68     		ldr	r2, [r7, #4]
 870 001e 5200     		lsl	r2, r2, #1
 871 0020 B91C     		add	r1, r7, #2
 872 0022 0988     		ldrh	r1, [r1]
 873 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 874              		.loc 1 695 0
 875 0026 BD46     		mov	sp, r7
 876 0028 02B0     		add	sp, sp, #8
 877              		@ sp needed
 878 002a 80BD     		pop	{r7, pc}
 879              	.L64:
 880              		.align	2
 881              	.L63:
 882 002c 00000000 		.word	ADC_offset
 883              		.cfi_endproc
 884              	.LFE15:
 885              		.size	ADC_SetOffset, .-ADC_SetOffset
 886              		.section	.text.ADC_SetGain,"ax",%progbits
 887              		.align	2
 888              		.global	ADC_SetGain
 889              		.code	16
 890              		.thumb_func
 891              		.type	ADC_SetGain, %function
 892              	ADC_SetGain:
 893              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 29


 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 894              		.loc 1 724 0
 895              		.cfi_startproc
 896 0000 80B5     		push	{r7, lr}
 897              		.cfi_def_cfa_offset 8
 898              		.cfi_offset 7, -8
 899              		.cfi_offset 14, -4
 900 0002 82B0     		sub	sp, sp, #8
 901              		.cfi_def_cfa_offset 16
 902 0004 00AF     		add	r7, sp, #0
 903              		.cfi_def_cfa_register 7
 904 0006 7860     		str	r0, [r7, #4]
 905 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 906              		.loc 1 726 0
 907 000a 7B68     		ldr	r3, [r7, #4]
 908 000c 002B     		cmp	r3, #0
 909 000e 02D0     		beq	.L66
 910              		.loc 1 726 0 is_stmt 0 discriminator 1
 911 0010 0020     		mov	r0, #0
 912 0012 FFF7FEFF 		bl	CyHalt
 913              	.L66:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 914              		.loc 1 728 0 is_stmt 1
 915 0016 044B     		ldr	r3, .L67
 916 0018 7A68     		ldr	r2, [r7, #4]
 917 001a 9200     		lsl	r2, r2, #2
 918 001c 3968     		ldr	r1, [r7]
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 30


 919 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 920              		.loc 1 729 0
 921 0020 BD46     		mov	sp, r7
 922 0022 02B0     		add	sp, sp, #8
 923              		@ sp needed
 924 0024 80BD     		pop	{r7, pc}
 925              	.L68:
 926 0026 C046     		.align	2
 927              	.L67:
 928 0028 00000000 		.word	ADC_countsPer10Volt
 929              		.cfi_endproc
 930              	.LFE16:
 931              		.size	ADC_SetGain, .-ADC_SetGain
 932              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 933              		.align	2
 934              		.global	ADC_CountsTo_mVolts
 935              		.code	16
 936              		.thumb_func
 937              		.type	ADC_CountsTo_mVolts, %function
 938              	ADC_CountsTo_mVolts:
 939              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 940              		.loc 1 757 0
 941              		.cfi_startproc
 942 0000 80B5     		push	{r7, lr}
 943              		.cfi_def_cfa_offset 8
 944              		.cfi_offset 7, -8
 945              		.cfi_offset 14, -4
 946 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 31


 947              		.cfi_def_cfa_offset 24
 948 0004 00AF     		add	r7, sp, #0
 949              		.cfi_def_cfa_register 7
 950 0006 7860     		str	r0, [r7, #4]
 951 0008 0A1C     		mov	r2, r1
 952 000a BB1C     		add	r3, r7, #2
 953 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 954              		.loc 1 761 0
 955 000e 7B68     		ldr	r3, [r7, #4]
 956 0010 002B     		cmp	r3, #0
 957 0012 02D0     		beq	.L70
 958              		.loc 1 761 0 is_stmt 0 discriminator 1
 959 0014 0020     		mov	r0, #0
 960 0016 FFF7FEFF 		bl	CyHalt
 961              	.L70:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 962              		.loc 1 772 0 is_stmt 1
 963 001a 1F4B     		ldr	r3, .L76
 964 001c 7A68     		ldr	r2, [r7, #4]
 965 001e 5200     		lsl	r2, r2, #1
 966 0020 D35A     		ldrh	r3, [r2, r3]
 967 0022 99B2     		uxth	r1, r3
 968 0024 BB1C     		add	r3, r7, #2
 969 0026 1A88     		ldrh	r2, [r3]
 970 0028 8BB2     		uxth	r3, r1
 971 002a D31A     		sub	r3, r2, r3
 972 002c 9AB2     		uxth	r2, r3
 973 002e BB1C     		add	r3, r7, #2
 974 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 975              		.loc 1 774 0
 976 0032 BB1C     		add	r3, r7, #2
 977 0034 0022     		mov	r2, #0
 978 0036 9B5E     		ldrsh	r3, [r3, r2]
 979 0038 184A     		ldr	r2, .L76+4
 980 003a 5A43     		mul	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 981              		.loc 1 775 0
 982 003c BB1C     		add	r3, r7, #2
 983 003e 0021     		mov	r1, #0
 984 0040 5B5E     		ldrsh	r3, [r3, r1]
 985 0042 002B     		cmp	r3, #0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 32


 986 0044 08DD     		ble	.L71
 987              		.loc 1 775 0 is_stmt 0 discriminator 1
 988 0046 164B     		ldr	r3, .L76+8
 989 0048 7968     		ldr	r1, [r7, #4]
 990 004a 8900     		lsl	r1, r1, #2
 991 004c CB58     		ldr	r3, [r1, r3]
 992 004e 002B     		cmp	r3, #0
 993 0050 00DA     		bge	.L72
 994 0052 0133     		add	r3, r3, #1
 995              	.L72:
 996 0054 5B10     		asr	r3, r3, #1
 997 0056 08E0     		b	.L73
 998              	.L71:
 999              		.loc 1 775 0 discriminator 2
 1000 0058 114B     		ldr	r3, .L76+8
 1001 005a 7968     		ldr	r1, [r7, #4]
 1002 005c 8900     		lsl	r1, r1, #2
 1003 005e CB58     		ldr	r3, [r1, r3]
 1004 0060 002B     		cmp	r3, #0
 1005 0062 00DA     		bge	.L74
 1006 0064 0133     		add	r3, r3, #1
 1007              	.L74:
 1008 0066 5B10     		asr	r3, r3, #1
 1009 0068 5B42     		neg	r3, r3
 1010              	.L73:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1011              		.loc 1 774 0 is_stmt 1
 1012 006a D118     		add	r1, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1013              		.loc 1 776 0
 1014 006c 0C4B     		ldr	r3, .L76+8
 1015 006e 7A68     		ldr	r2, [r7, #4]
 1016 0070 9200     		lsl	r2, r2, #2
 1017 0072 D358     		ldr	r3, [r2, r3]
 1018 0074 081C     		mov	r0, r1
 1019 0076 191C     		mov	r1, r3
 1020 0078 FFF7FEFF 		bl	__aeabi_idiv
 1021 007c 031C     		mov	r3, r0
 1022 007e 1A1C     		mov	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1023              		.loc 1 774 0
 1024 0080 0E23     		mov	r3, #14
 1025 0082 FB18     		add	r3, r7, r3
 1026 0084 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1027              		.loc 1 778 0
 1028 0086 0E23     		mov	r3, #14
 1029 0088 FB18     		add	r3, r7, r3
 1030 008a 1B88     		ldrh	r3, [r3]
 1031 008c 1BB2     		sxth	r3, r3
 779:Generated_Source\PSoC4/ADC.c ****     }
 1032              		.loc 1 779 0
 1033 008e 181C     		mov	r0, r3
 1034 0090 BD46     		mov	sp, r7
 1035 0092 04B0     		add	sp, sp, #16
 1036              		@ sp needed
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 33


 1037 0094 80BD     		pop	{r7, pc}
 1038              	.L77:
 1039 0096 C046     		.align	2
 1040              	.L76:
 1041 0098 00000000 		.word	ADC_offset
 1042 009c 10270000 		.word	10000
 1043 00a0 00000000 		.word	ADC_countsPer10Volt
 1044              		.cfi_endproc
 1045              	.LFE17:
 1046              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1047              		.global	__aeabi_lmul
 1048              		.global	__aeabi_ldivmod
 1049              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1050              		.align	2
 1051              		.global	ADC_CountsTo_uVolts
 1052              		.code	16
 1053              		.thumb_func
 1054              		.type	ADC_CountsTo_uVolts, %function
 1055              	ADC_CountsTo_uVolts:
 1056              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1057              		.loc 1 811 0
 1058              		.cfi_startproc
 1059 0000 B0B5     		push	{r4, r5, r7, lr}
 1060              		.cfi_def_cfa_offset 16
 1061              		.cfi_offset 4, -16
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 34


 1062              		.cfi_offset 5, -12
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0002 86B0     		sub	sp, sp, #24
 1066              		.cfi_def_cfa_offset 40
 1067 0004 00AF     		add	r7, sp, #0
 1068              		.cfi_def_cfa_register 7
 1069 0006 F860     		str	r0, [r7, #12]
 1070 0008 0A1C     		mov	r2, r1
 1071 000a 0A23     		mov	r3, #10
 1072 000c FB18     		add	r3, r7, r3
 1073 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1074              		.loc 1 815 0
 1075 0010 FB68     		ldr	r3, [r7, #12]
 1076 0012 002B     		cmp	r3, #0
 1077 0014 02D0     		beq	.L79
 1078              		.loc 1 815 0 is_stmt 0 discriminator 1
 1079 0016 0020     		mov	r0, #0
 1080 0018 FFF7FEFF 		bl	CyHalt
 1081              	.L79:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1082              		.loc 1 826 0 is_stmt 1
 1083 001c 194B     		ldr	r3, .L81
 1084 001e FA68     		ldr	r2, [r7, #12]
 1085 0020 5200     		lsl	r2, r2, #1
 1086 0022 D35A     		ldrh	r3, [r2, r3]
 1087 0024 99B2     		uxth	r1, r3
 1088 0026 0A23     		mov	r3, #10
 1089 0028 FB18     		add	r3, r7, r3
 1090 002a 1A88     		ldrh	r2, [r3]
 1091 002c 8BB2     		uxth	r3, r1
 1092 002e D31A     		sub	r3, r2, r3
 1093 0030 9AB2     		uxth	r2, r3
 1094 0032 0A23     		mov	r3, #10
 1095 0034 FB18     		add	r3, r7, r3
 1096 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1097              		.loc 1 828 0
 1098 0038 0A23     		mov	r3, #10
 1099 003a FB18     		add	r3, r7, r3
 1100 003c 1B88     		ldrh	r3, [r3]
 1101 003e 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 35


 1102 0040 3B60     		str	r3, [r7]
 1103 0042 DB17     		asr	r3, r3, #31
 1104 0044 7B60     		str	r3, [r7, #4]
 1105 0046 3868     		ldr	r0, [r7]
 1106 0048 7968     		ldr	r1, [r7, #4]
 1107 004a 0F4A     		ldr	r2, .L81+4
 1108 004c 0023     		mov	r3, #0
 1109 004e FFF7FEFF 		bl	__aeabi_lmul
 1110 0052 021C     		mov	r2, r0
 1111 0054 0B1C     		mov	r3, r1
 1112 0056 101C     		mov	r0, r2
 1113 0058 191C     		mov	r1, r3
 1114 005a 0C4B     		ldr	r3, .L81+8
 1115 005c FA68     		ldr	r2, [r7, #12]
 1116 005e 9200     		lsl	r2, r2, #2
 1117 0060 D358     		ldr	r3, [r2, r3]
 1118 0062 1C1C     		mov	r4, r3
 1119 0064 DB17     		asr	r3, r3, #31
 1120 0066 1D1C     		mov	r5, r3
 1121 0068 221C     		mov	r2, r4
 1122 006a 2B1C     		mov	r3, r5
 1123 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1124 0070 031C     		mov	r3, r0
 1125 0072 0C1C     		mov	r4, r1
 1126 0074 3B61     		str	r3, [r7, #16]
 1127 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1128              		.loc 1 830 0
 1129 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1130              		.loc 1 831 0
 1131 007a 181C     		mov	r0, r3
 1132 007c BD46     		mov	sp, r7
 1133 007e 06B0     		add	sp, sp, #24
 1134              		@ sp needed
 1135 0080 B0BD     		pop	{r4, r5, r7, pc}
 1136              	.L82:
 1137 0082 C046     		.align	2
 1138              	.L81:
 1139 0084 00000000 		.word	ADC_offset
 1140 0088 80969800 		.word	10000000
 1141 008c 00000000 		.word	ADC_countsPer10Volt
 1142              		.cfi_endproc
 1143              	.LFE18:
 1144              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1145              		.global	__aeabi_i2f
 1146              		.global	__aeabi_fmul
 1147              		.global	__aeabi_fdiv
 1148              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1149              		.align	2
 1150              		.global	ADC_CountsTo_Volts
 1151              		.code	16
 1152              		.thumb_func
 1153              		.type	ADC_CountsTo_Volts, %function
 1154              	ADC_CountsTo_Volts:
 1155              	.LFB19:
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 36


 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1156              		.loc 1 856 0
 1157              		.cfi_startproc
 1158 0000 90B5     		push	{r4, r7, lr}
 1159              		.cfi_def_cfa_offset 12
 1160              		.cfi_offset 4, -12
 1161              		.cfi_offset 7, -8
 1162              		.cfi_offset 14, -4
 1163 0002 85B0     		sub	sp, sp, #20
 1164              		.cfi_def_cfa_offset 32
 1165 0004 00AF     		add	r7, sp, #0
 1166              		.cfi_def_cfa_register 7
 1167 0006 7860     		str	r0, [r7, #4]
 1168 0008 0A1C     		mov	r2, r1
 1169 000a BB1C     		add	r3, r7, #2
 1170 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1171              		.loc 1 860 0
 1172 000e 7B68     		ldr	r3, [r7, #4]
 1173 0010 002B     		cmp	r3, #0
 1174 0012 02D0     		beq	.L84
 1175              		.loc 1 860 0 is_stmt 0 discriminator 1
 1176 0014 0020     		mov	r0, #0
 1177 0016 FFF7FEFF 		bl	CyHalt
 1178              	.L84:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 37


 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1179              		.loc 1 871 0 is_stmt 1
 1180 001a 164B     		ldr	r3, .L86
 1181 001c 7A68     		ldr	r2, [r7, #4]
 1182 001e 5200     		lsl	r2, r2, #1
 1183 0020 D35A     		ldrh	r3, [r2, r3]
 1184 0022 99B2     		uxth	r1, r3
 1185 0024 BB1C     		add	r3, r7, #2
 1186 0026 1A88     		ldrh	r2, [r3]
 1187 0028 8BB2     		uxth	r3, r1
 1188 002a D31A     		sub	r3, r2, r3
 1189 002c 9AB2     		uxth	r2, r3
 1190 002e BB1C     		add	r3, r7, #2
 1191 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1192              		.loc 1 873 0
 1193 0032 BB1C     		add	r3, r7, #2
 1194 0034 0022     		mov	r2, #0
 1195 0036 9B5E     		ldrsh	r3, [r3, r2]
 1196 0038 181C     		mov	r0, r3
 1197 003a FFF7FEFF 		bl	__aeabi_i2f
 1198 003e 031C     		add	r3, r0, #0
 1199 0040 181C     		add	r0, r3, #0
 1200 0042 0D49     		ldr	r1, .L86+4
 1201 0044 FFF7FEFF 		bl	__aeabi_fmul
 1202 0048 031C     		add	r3, r0, #0
 1203 004a 1C1C     		add	r4, r3, #0
 1204 004c 0B4B     		ldr	r3, .L86+8
 1205 004e 7A68     		ldr	r2, [r7, #4]
 1206 0050 9200     		lsl	r2, r2, #2
 1207 0052 D358     		ldr	r3, [r2, r3]
 1208 0054 181C     		mov	r0, r3
 1209 0056 FFF7FEFF 		bl	__aeabi_i2f
 1210 005a 031C     		add	r3, r0, #0
 1211 005c 201C     		add	r0, r4, #0
 1212 005e 191C     		add	r1, r3, #0
 1213 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1214 0064 031C     		add	r3, r0, #0
 1215 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1216              		.loc 1 875 0
 1217 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1218              		.loc 1 876 0
 1219 006a 181C     		add	r0, r3, #0
 1220 006c BD46     		mov	sp, r7
 1221 006e 05B0     		add	sp, sp, #20
 1222              		@ sp needed
 1223 0070 90BD     		pop	{r4, r7, pc}
 1224              	.L87:
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 38


 1225 0072 C046     		.align	2
 1226              	.L86:
 1227 0074 00000000 		.word	ADC_offset
 1228 0078 00002041 		.word	1092616192
 1229 007c 00000000 		.word	ADC_countsPer10Volt
 1230              		.cfi_endproc
 1231              	.LFE19:
 1232              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1233              		.text
 1234              	.Letext0:
 1235              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1236              		.section	.debug_info,"",%progbits
 1237              	.Ldebug_info0:
 1238 0000 77040000 		.4byte	0x477
 1239 0004 0400     		.2byte	0x4
 1240 0006 00000000 		.4byte	.Ldebug_abbrev0
 1241 000a 04       		.byte	0x4
 1242 000b 01       		.uleb128 0x1
 1243 000c 72000000 		.4byte	.LASF59
 1244 0010 01       		.byte	0x1
 1245 0011 14030000 		.4byte	.LASF60
 1246 0015 0E000000 		.4byte	.LASF61
 1247 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1248 001d 00000000 		.4byte	0
 1249 0021 00000000 		.4byte	.Ldebug_line0
 1250 0025 02       		.uleb128 0x2
 1251 0026 01       		.byte	0x1
 1252 0027 06       		.byte	0x6
 1253 0028 7C030000 		.4byte	.LASF0
 1254 002c 02       		.uleb128 0x2
 1255 002d 01       		.byte	0x1
 1256 002e 08       		.byte	0x8
 1257 002f 9D010000 		.4byte	.LASF1
 1258 0033 02       		.uleb128 0x2
 1259 0034 02       		.byte	0x2
 1260 0035 05       		.byte	0x5
 1261 0036 45010000 		.4byte	.LASF2
 1262 003a 02       		.uleb128 0x2
 1263 003b 02       		.byte	0x2
 1264 003c 07       		.byte	0x7
 1265 003d 32010000 		.4byte	.LASF3
 1266 0041 02       		.uleb128 0x2
 1267 0042 04       		.byte	0x4
 1268 0043 05       		.byte	0x5
 1269 0044 6E030000 		.4byte	.LASF4
 1270 0048 02       		.uleb128 0x2
 1271 0049 04       		.byte	0x4
 1272 004a 07       		.byte	0x7
 1273 004b C2010000 		.4byte	.LASF5
 1274 004f 02       		.uleb128 0x2
 1275 0050 08       		.byte	0x8
 1276 0051 05       		.byte	0x5
 1277 0052 00000000 		.4byte	.LASF6
 1278 0056 02       		.uleb128 0x2
 1279 0057 08       		.byte	0x8
 1280 0058 07       		.byte	0x7
 1281 0059 90020000 		.4byte	.LASF7
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 39


 1282 005d 03       		.uleb128 0x3
 1283 005e 04       		.byte	0x4
 1284 005f 05       		.byte	0x5
 1285 0060 696E7400 		.ascii	"int\000"
 1286 0064 02       		.uleb128 0x2
 1287 0065 04       		.byte	0x4
 1288 0066 07       		.byte	0x7
 1289 0067 71020000 		.4byte	.LASF8
 1290 006b 04       		.uleb128 0x4
 1291 006c 54030000 		.4byte	.LASF9
 1292 0070 02       		.byte	0x2
 1293 0071 B901     		.2byte	0x1b9
 1294 0073 2C000000 		.4byte	0x2c
 1295 0077 04       		.uleb128 0x4
 1296 0078 48020000 		.4byte	.LASF10
 1297 007c 02       		.byte	0x2
 1298 007d BA01     		.2byte	0x1ba
 1299 007f 3A000000 		.4byte	0x3a
 1300 0083 04       		.uleb128 0x4
 1301 0084 59020000 		.4byte	.LASF11
 1302 0088 02       		.byte	0x2
 1303 0089 BB01     		.2byte	0x1bb
 1304 008b 48000000 		.4byte	0x48
 1305 008f 04       		.uleb128 0x4
 1306 0090 BC010000 		.4byte	.LASF12
 1307 0094 02       		.byte	0x2
 1308 0095 BD01     		.2byte	0x1bd
 1309 0097 33000000 		.4byte	0x33
 1310 009b 04       		.uleb128 0x4
 1311 009c D4010000 		.4byte	.LASF13
 1312 00a0 02       		.byte	0x2
 1313 00a1 BE01     		.2byte	0x1be
 1314 00a3 41000000 		.4byte	0x41
 1315 00a7 04       		.uleb128 0x4
 1316 00a8 74010000 		.4byte	.LASF14
 1317 00ac 02       		.byte	0x2
 1318 00ad BF01     		.2byte	0x1bf
 1319 00af B3000000 		.4byte	0xb3
 1320 00b3 02       		.uleb128 0x2
 1321 00b4 04       		.byte	0x4
 1322 00b5 04       		.byte	0x4
 1323 00b6 07010000 		.4byte	.LASF15
 1324 00ba 02       		.uleb128 0x2
 1325 00bb 08       		.byte	0x8
 1326 00bc 04       		.byte	0x4
 1327 00bd 30020000 		.4byte	.LASF16
 1328 00c1 04       		.uleb128 0x4
 1329 00c2 94030000 		.4byte	.LASF17
 1330 00c6 02       		.byte	0x2
 1331 00c7 C401     		.2byte	0x1c4
 1332 00c9 4F000000 		.4byte	0x4f
 1333 00cd 02       		.uleb128 0x2
 1334 00ce 01       		.byte	0x1
 1335 00cf 08       		.byte	0x8
 1336 00d0 77030000 		.4byte	.LASF18
 1337 00d4 04       		.uleb128 0x4
 1338 00d5 6C000000 		.4byte	.LASF19
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 40


 1339 00d9 02       		.byte	0x2
 1340 00da 6502     		.2byte	0x265
 1341 00dc E0000000 		.4byte	0xe0
 1342 00e0 05       		.uleb128 0x5
 1343 00e1 83000000 		.4byte	0x83
 1344 00e5 02       		.uleb128 0x2
 1345 00e6 04       		.byte	0x4
 1346 00e7 07       		.byte	0x7
 1347 00e8 D3020000 		.4byte	.LASF20
 1348 00ec 06       		.uleb128 0x6
 1349 00ed AE020000 		.4byte	.LASF24
 1350 00f1 01       		.byte	0x1
 1351 00f2 3F       		.byte	0x3f
 1352 00f3 00000000 		.4byte	.LFB2
 1353 00f7 24000000 		.4byte	.LFE2-.LFB2
 1354 00fb 01       		.uleb128 0x1
 1355 00fc 9C       		.byte	0x9c
 1356 00fd 07       		.uleb128 0x7
 1357 00fe B8020000 		.4byte	.LASF35
 1358 0102 01       		.byte	0x1
 1359 0103 5E       		.byte	0x5e
 1360 0104 00000000 		.4byte	.LFB3
 1361 0108 C4010000 		.4byte	.LFE3-.LFB3
 1362 010c 01       		.uleb128 0x1
 1363 010d 9C       		.byte	0x9c
 1364 010e 3D010000 		.4byte	0x13d
 1365 0112 08       		.uleb128 0x8
 1366 0113 36030000 		.4byte	.LASF21
 1367 0117 01       		.byte	0x1
 1368 0118 60       		.byte	0x60
 1369 0119 83000000 		.4byte	0x83
 1370 011d 02       		.uleb128 0x2
 1371 011e 91       		.byte	0x91
 1372 011f 74       		.sleb128 -12
 1373 0120 08       		.uleb128 0x8
 1374 0121 87010000 		.4byte	.LASF22
 1375 0125 01       		.byte	0x1
 1376 0126 61       		.byte	0x61
 1377 0127 83000000 		.4byte	0x83
 1378 012b 02       		.uleb128 0x2
 1379 012c 91       		.byte	0x91
 1380 012d 6C       		.sleb128 -20
 1381 012e 08       		.uleb128 0x8
 1382 012f 89020000 		.4byte	.LASF23
 1383 0133 01       		.byte	0x1
 1384 0134 62       		.byte	0x62
 1385 0135 9B000000 		.4byte	0x9b
 1386 0139 02       		.uleb128 0x2
 1387 013a 91       		.byte	0x91
 1388 013b 70       		.sleb128 -16
 1389 013c 00       		.byte	0
 1390 013d 09       		.uleb128 0x9
 1391 013e 7E020000 		.4byte	.LASF25
 1392 0142 01       		.byte	0x1
 1393 0143 4A01     		.2byte	0x14a
 1394 0145 00000000 		.4byte	.LFB4
 1395 0149 38000000 		.4byte	.LFE4-.LFB4
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 41


 1396 014d 01       		.uleb128 0x1
 1397 014e 9C       		.byte	0x9c
 1398 014f 0A       		.uleb128 0xa
 1399 0150 9A030000 		.4byte	.LASF26
 1400 0154 01       		.byte	0x1
 1401 0155 6D01     		.2byte	0x16d
 1402 0157 00000000 		.4byte	.LFB5
 1403 015b 18000000 		.4byte	.LFE5-.LFB5
 1404 015f 01       		.uleb128 0x1
 1405 0160 9C       		.byte	0x9c
 1406 0161 0A       		.uleb128 0xa
 1407 0162 03030000 		.4byte	.LASF27
 1408 0166 01       		.byte	0x1
 1409 0167 8701     		.2byte	0x187
 1410 0169 00000000 		.4byte	.LFB6
 1411 016d 1C000000 		.4byte	.LFE6-.LFB6
 1412 0171 01       		.uleb128 0x1
 1413 0172 9C       		.byte	0x9c
 1414 0173 0A       		.uleb128 0xa
 1415 0174 44030000 		.4byte	.LASF28
 1416 0178 01       		.byte	0x1
 1417 0179 A001     		.2byte	0x1a0
 1418 017b 00000000 		.4byte	.LFB7
 1419 017f 1C000000 		.4byte	.LFE7-.LFB7
 1420 0183 01       		.uleb128 0x1
 1421 0184 9C       		.byte	0x9c
 1422 0185 0B       		.uleb128 0xb
 1423 0186 1C020000 		.4byte	.LASF30
 1424 018a 01       		.byte	0x1
 1425 018b C201     		.2byte	0x1c2
 1426 018d 83000000 		.4byte	0x83
 1427 0191 00000000 		.4byte	.LFB8
 1428 0195 48000000 		.4byte	.LFE8-.LFB8
 1429 0199 01       		.uleb128 0x1
 1430 019a 9C       		.byte	0x9c
 1431 019b BE010000 		.4byte	0x1be
 1432 019f 0C       		.uleb128 0xc
 1433 01a0 3C030000 		.4byte	.LASF32
 1434 01a4 01       		.byte	0x1
 1435 01a5 C201     		.2byte	0x1c2
 1436 01a7 83000000 		.4byte	0x83
 1437 01ab 02       		.uleb128 0x2
 1438 01ac 91       		.byte	0x91
 1439 01ad 6C       		.sleb128 -20
 1440 01ae 0D       		.uleb128 0xd
 1441 01af 6D010000 		.4byte	.LASF29
 1442 01b3 01       		.byte	0x1
 1443 01b4 C401     		.2byte	0x1c4
 1444 01b6 83000000 		.4byte	0x83
 1445 01ba 02       		.uleb128 0x2
 1446 01bb 91       		.byte	0x91
 1447 01bc 74       		.sleb128 -12
 1448 01bd 00       		.byte	0
 1449 01be 0E       		.uleb128 0xe
 1450 01bf ED010000 		.4byte	.LASF31
 1451 01c3 01       		.byte	0x1
 1452 01c4 F801     		.2byte	0x1f8
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 42


 1453 01c6 8F000000 		.4byte	0x8f
 1454 01ca 00000000 		.4byte	.LFB9
 1455 01ce 44000000 		.4byte	.LFE9-.LFB9
 1456 01d2 01       		.uleb128 0x1
 1457 01d3 9C       		.byte	0x9c
 1458 01d4 F7010000 		.4byte	0x1f7
 1459 01d8 0C       		.uleb128 0xc
 1460 01d9 C7020000 		.4byte	.LASF33
 1461 01dd 01       		.byte	0x1
 1462 01de F801     		.2byte	0x1f8
 1463 01e0 83000000 		.4byte	0x83
 1464 01e4 02       		.uleb128 0x2
 1465 01e5 91       		.byte	0x91
 1466 01e6 6C       		.sleb128 -20
 1467 01e7 0D       		.uleb128 0xd
 1468 01e8 A7020000 		.4byte	.LASF34
 1469 01ec 01       		.byte	0x1
 1470 01ed FA01     		.2byte	0x1fa
 1471 01ef 83000000 		.4byte	0x83
 1472 01f3 02       		.uleb128 0x2
 1473 01f4 91       		.byte	0x91
 1474 01f5 74       		.sleb128 -12
 1475 01f6 00       		.byte	0
 1476 01f7 0F       		.uleb128 0xf
 1477 01f8 FD010000 		.4byte	.LASF36
 1478 01fc 01       		.byte	0x1
 1479 01fd 2502     		.2byte	0x225
 1480 01ff 00000000 		.4byte	.LFB10
 1481 0203 1C000000 		.4byte	.LFE10-.LFB10
 1482 0207 01       		.uleb128 0x1
 1483 0208 9C       		.byte	0x9c
 1484 0209 1D020000 		.4byte	0x21d
 1485 020d 0C       		.uleb128 0xc
 1486 020e 31030000 		.4byte	.LASF37
 1487 0212 01       		.byte	0x1
 1488 0213 2502     		.2byte	0x225
 1489 0215 83000000 		.4byte	0x83
 1490 0219 02       		.uleb128 0x2
 1491 021a 91       		.byte	0x91
 1492 021b 74       		.sleb128 -12
 1493 021c 00       		.byte	0
 1494 021d 0F       		.uleb128 0xf
 1495 021e 5D010000 		.4byte	.LASF38
 1496 0222 01       		.byte	0x1
 1497 0223 5102     		.2byte	0x251
 1498 0225 00000000 		.4byte	.LFB11
 1499 0229 30000000 		.4byte	.LFE11-.LFB11
 1500 022d 01       		.uleb128 0x1
 1501 022e 9C       		.byte	0x9c
 1502 022f 43020000 		.4byte	0x243
 1503 0233 0C       		.uleb128 0xc
 1504 0234 37020000 		.4byte	.LASF39
 1505 0238 01       		.byte	0x1
 1506 0239 5102     		.2byte	0x251
 1507 023b 83000000 		.4byte	0x83
 1508 023f 02       		.uleb128 0x2
 1509 0240 91       		.byte	0x91
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 43


 1510 0241 74       		.sleb128 -12
 1511 0242 00       		.byte	0
 1512 0243 0F       		.uleb128 0xf
 1513 0244 AB010000 		.4byte	.LASF40
 1514 0248 01       		.byte	0x1
 1515 0249 6602     		.2byte	0x266
 1516 024b 00000000 		.4byte	.LFB12
 1517 024f 2C000000 		.4byte	.LFE12-.LFB12
 1518 0253 01       		.uleb128 0x1
 1519 0254 9C       		.byte	0x9c
 1520 0255 69020000 		.4byte	0x269
 1521 0259 0C       		.uleb128 0xc
 1522 025a 0D010000 		.4byte	.LASF41
 1523 025e 01       		.byte	0x1
 1524 025f 6602     		.2byte	0x266
 1525 0261 83000000 		.4byte	0x83
 1526 0265 02       		.uleb128 0x2
 1527 0266 91       		.byte	0x91
 1528 0267 74       		.sleb128 -12
 1529 0268 00       		.byte	0
 1530 0269 0F       		.uleb128 0xf
 1531 026a 60020000 		.4byte	.LASF42
 1532 026e 01       		.byte	0x1
 1533 026f 7E02     		.2byte	0x27e
 1534 0271 00000000 		.4byte	.LFB13
 1535 0275 1C000000 		.4byte	.LFE13-.LFB13
 1536 0279 01       		.uleb128 0x1
 1537 027a 9C       		.byte	0x9c
 1538 027b 8F020000 		.4byte	0x28f
 1539 027f 0C       		.uleb128 0xc
 1540 0280 31030000 		.4byte	.LASF37
 1541 0284 01       		.byte	0x1
 1542 0285 7E02     		.2byte	0x27e
 1543 0287 83000000 		.4byte	0x83
 1544 028b 02       		.uleb128 0x2
 1545 028c 91       		.byte	0x91
 1546 028d 74       		.sleb128 -12
 1547 028e 00       		.byte	0
 1548 028f 0F       		.uleb128 0xf
 1549 0290 0D020000 		.4byte	.LASF43
 1550 0294 01       		.byte	0x1
 1551 0295 9502     		.2byte	0x295
 1552 0297 00000000 		.4byte	.LFB14
 1553 029b 1C000000 		.4byte	.LFE14-.LFB14
 1554 029f 01       		.uleb128 0x1
 1555 02a0 9C       		.byte	0x9c
 1556 02a1 B5020000 		.4byte	0x2b5
 1557 02a5 0C       		.uleb128 0xc
 1558 02a6 31030000 		.4byte	.LASF37
 1559 02aa 01       		.byte	0x1
 1560 02ab 9502     		.2byte	0x295
 1561 02ad 83000000 		.4byte	0x83
 1562 02b1 02       		.uleb128 0x2
 1563 02b2 91       		.byte	0x91
 1564 02b3 74       		.sleb128 -12
 1565 02b4 00       		.byte	0
 1566 02b5 10       		.uleb128 0x10
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 44


 1567 02b6 4F010000 		.4byte	.LASF44
 1568 02ba 01       		.byte	0x1
 1569 02bb B102     		.2byte	0x2b1
 1570 02bd 00000000 		.4byte	.LFB15
 1571 02c1 30000000 		.4byte	.LFE15-.LFB15
 1572 02c5 01       		.uleb128 0x1
 1573 02c6 9C       		.byte	0x9c
 1574 02c7 EA020000 		.4byte	0x2ea
 1575 02cb 0C       		.uleb128 0xc
 1576 02cc C7020000 		.4byte	.LASF33
 1577 02d0 01       		.byte	0x1
 1578 02d1 B102     		.2byte	0x2b1
 1579 02d3 83000000 		.4byte	0x83
 1580 02d7 02       		.uleb128 0x2
 1581 02d8 91       		.byte	0x91
 1582 02d9 74       		.sleb128 -12
 1583 02da 0C       		.uleb128 0xc
 1584 02db 00010000 		.4byte	.LASF45
 1585 02df 01       		.byte	0x1
 1586 02e0 B102     		.2byte	0x2b1
 1587 02e2 8F000000 		.4byte	0x8f
 1588 02e6 02       		.uleb128 0x2
 1589 02e7 91       		.byte	0x91
 1590 02e8 72       		.sleb128 -14
 1591 02e9 00       		.byte	0
 1592 02ea 10       		.uleb128 0x10
 1593 02eb 91010000 		.4byte	.LASF46
 1594 02ef 01       		.byte	0x1
 1595 02f0 D302     		.2byte	0x2d3
 1596 02f2 00000000 		.4byte	.LFB16
 1597 02f6 2C000000 		.4byte	.LFE16-.LFB16
 1598 02fa 01       		.uleb128 0x1
 1599 02fb 9C       		.byte	0x9c
 1600 02fc 1F030000 		.4byte	0x31f
 1601 0300 0C       		.uleb128 0xc
 1602 0301 C7020000 		.4byte	.LASF33
 1603 0305 01       		.byte	0x1
 1604 0306 D302     		.2byte	0x2d3
 1605 0308 83000000 		.4byte	0x83
 1606 030c 02       		.uleb128 0x2
 1607 030d 91       		.byte	0x91
 1608 030e 74       		.sleb128 -12
 1609 030f 0C       		.uleb128 0xc
 1610 0310 40020000 		.4byte	.LASF47
 1611 0314 01       		.byte	0x1
 1612 0315 D302     		.2byte	0x2d3
 1613 0317 9B000000 		.4byte	0x9b
 1614 031b 02       		.uleb128 0x2
 1615 031c 91       		.byte	0x91
 1616 031d 70       		.sleb128 -16
 1617 031e 00       		.byte	0
 1618 031f 0E       		.uleb128 0xe
 1619 0320 17010000 		.4byte	.LASF48
 1620 0324 01       		.byte	0x1
 1621 0325 F402     		.2byte	0x2f4
 1622 0327 8F000000 		.4byte	0x8f
 1623 032b 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 45


 1624 032f A4000000 		.4byte	.LFE17-.LFB17
 1625 0333 01       		.uleb128 0x1
 1626 0334 9C       		.byte	0x9c
 1627 0335 67030000 		.4byte	0x367
 1628 0339 0C       		.uleb128 0xc
 1629 033a C7020000 		.4byte	.LASF33
 1630 033e 01       		.byte	0x1
 1631 033f F402     		.2byte	0x2f4
 1632 0341 83000000 		.4byte	0x83
 1633 0345 02       		.uleb128 0x2
 1634 0346 91       		.byte	0x91
 1635 0347 6C       		.sleb128 -20
 1636 0348 0C       		.uleb128 0xc
 1637 0349 4F020000 		.4byte	.LASF49
 1638 034d 01       		.byte	0x1
 1639 034e F402     		.2byte	0x2f4
 1640 0350 8F000000 		.4byte	0x8f
 1641 0354 02       		.uleb128 0x2
 1642 0355 91       		.byte	0x91
 1643 0356 6A       		.sleb128 -22
 1644 0357 0D       		.uleb128 0xd
 1645 0358 CC020000 		.4byte	.LASF50
 1646 035c 01       		.byte	0x1
 1647 035d F602     		.2byte	0x2f6
 1648 035f 8F000000 		.4byte	0x8f
 1649 0363 02       		.uleb128 0x2
 1650 0364 91       		.byte	0x91
 1651 0365 76       		.sleb128 -10
 1652 0366 00       		.byte	0
 1653 0367 0E       		.uleb128 0xe
 1654 0368 DC020000 		.4byte	.LASF51
 1655 036c 01       		.byte	0x1
 1656 036d 2A03     		.2byte	0x32a
 1657 036f 9B000000 		.4byte	0x9b
 1658 0373 00000000 		.4byte	.LFB18
 1659 0377 90000000 		.4byte	.LFE18-.LFB18
 1660 037b 01       		.uleb128 0x1
 1661 037c 9C       		.byte	0x9c
 1662 037d AF030000 		.4byte	0x3af
 1663 0381 0C       		.uleb128 0xc
 1664 0382 C7020000 		.4byte	.LASF33
 1665 0386 01       		.byte	0x1
 1666 0387 2A03     		.2byte	0x32a
 1667 0389 83000000 		.4byte	0x83
 1668 038d 02       		.uleb128 0x2
 1669 038e 91       		.byte	0x91
 1670 038f 64       		.sleb128 -28
 1671 0390 0C       		.uleb128 0xc
 1672 0391 4F020000 		.4byte	.LASF49
 1673 0395 01       		.byte	0x1
 1674 0396 2A03     		.2byte	0x32a
 1675 0398 8F000000 		.4byte	0x8f
 1676 039c 02       		.uleb128 0x2
 1677 039d 91       		.byte	0x91
 1678 039e 62       		.sleb128 -30
 1679 039f 0D       		.uleb128 0xd
 1680 03a0 2B010000 		.4byte	.LASF52
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 46


 1681 03a4 01       		.byte	0x1
 1682 03a5 2C03     		.2byte	0x32c
 1683 03a7 C1000000 		.4byte	0xc1
 1684 03ab 02       		.uleb128 0x2
 1685 03ac 91       		.byte	0x91
 1686 03ad 68       		.sleb128 -24
 1687 03ae 00       		.byte	0
 1688 03af 0E       		.uleb128 0xe
 1689 03b0 F0020000 		.4byte	.LASF53
 1690 03b4 01       		.byte	0x1
 1691 03b5 5703     		.2byte	0x357
 1692 03b7 A7000000 		.4byte	0xa7
 1693 03bb 00000000 		.4byte	.LFB19
 1694 03bf 80000000 		.4byte	.LFE19-.LFB19
 1695 03c3 01       		.uleb128 0x1
 1696 03c4 9C       		.byte	0x9c
 1697 03c5 F7030000 		.4byte	0x3f7
 1698 03c9 0C       		.uleb128 0xc
 1699 03ca C7020000 		.4byte	.LASF33
 1700 03ce 01       		.byte	0x1
 1701 03cf 5703     		.2byte	0x357
 1702 03d1 83000000 		.4byte	0x83
 1703 03d5 02       		.uleb128 0x2
 1704 03d6 91       		.byte	0x91
 1705 03d7 64       		.sleb128 -28
 1706 03d8 0C       		.uleb128 0xc
 1707 03d9 4F020000 		.4byte	.LASF49
 1708 03dd 01       		.byte	0x1
 1709 03de 5703     		.2byte	0x357
 1710 03e0 8F000000 		.4byte	0x8f
 1711 03e4 02       		.uleb128 0x2
 1712 03e5 91       		.byte	0x91
 1713 03e6 62       		.sleb128 -30
 1714 03e7 0D       		.uleb128 0xd
 1715 03e8 C1020000 		.4byte	.LASF54
 1716 03ec 01       		.byte	0x1
 1717 03ed 5903     		.2byte	0x359
 1718 03ef A7000000 		.4byte	0xa7
 1719 03f3 02       		.uleb128 0x2
 1720 03f4 91       		.byte	0x91
 1721 03f5 6C       		.sleb128 -20
 1722 03f6 00       		.byte	0
 1723 03f7 11       		.uleb128 0x11
 1724 03f8 83000000 		.4byte	0x83
 1725 03fc 07040000 		.4byte	0x407
 1726 0400 12       		.uleb128 0x12
 1727 0401 E5000000 		.4byte	0xe5
 1728 0405 00       		.byte	0
 1729 0406 00       		.byte	0
 1730 0407 08       		.uleb128 0x8
 1731 0408 DA010000 		.4byte	.LASF55
 1732 040c 01       		.byte	0x1
 1733 040d 21       		.byte	0x21
 1734 040e 18040000 		.4byte	0x418
 1735 0412 05       		.uleb128 0x5
 1736 0413 03       		.byte	0x3
 1737 0414 00000000 		.4byte	ADC_channelsConfig
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 47


 1738 0418 13       		.uleb128 0x13
 1739 0419 F7030000 		.4byte	0x3f7
 1740 041d 14       		.uleb128 0x14
 1741 041e 88030000 		.4byte	.LASF56
 1742 0422 01       		.byte	0x1
 1743 0423 18       		.byte	0x18
 1744 0424 6B000000 		.4byte	0x6b
 1745 0428 05       		.uleb128 0x5
 1746 0429 03       		.byte	0x3
 1747 042a 00000000 		.4byte	ADC_initVar
 1748 042e 11       		.uleb128 0x11
 1749 042f 8F000000 		.4byte	0x8f
 1750 0433 3E040000 		.4byte	0x43e
 1751 0437 12       		.uleb128 0x12
 1752 0438 E5000000 		.4byte	0xe5
 1753 043c 00       		.byte	0
 1754 043d 00       		.byte	0
 1755 043e 14       		.uleb128 0x14
 1756 043f 7C010000 		.4byte	.LASF57
 1757 0443 01       		.byte	0x1
 1758 0444 19       		.byte	0x19
 1759 0445 4F040000 		.4byte	0x44f
 1760 0449 05       		.uleb128 0x5
 1761 044a 03       		.byte	0x3
 1762 044b 00000000 		.4byte	ADC_offset
 1763 044f 05       		.uleb128 0x5
 1764 0450 2E040000 		.4byte	0x42e
 1765 0454 11       		.uleb128 0x11
 1766 0455 9B000000 		.4byte	0x9b
 1767 0459 64040000 		.4byte	0x464
 1768 045d 12       		.uleb128 0x12
 1769 045e E5000000 		.4byte	0xe5
 1770 0462 00       		.byte	0
 1771 0463 00       		.byte	0
 1772 0464 14       		.uleb128 0x14
 1773 0465 5A030000 		.4byte	.LASF58
 1774 0469 01       		.byte	0x1
 1775 046a 1A       		.byte	0x1a
 1776 046b 75040000 		.4byte	0x475
 1777 046f 05       		.uleb128 0x5
 1778 0470 03       		.byte	0x3
 1779 0471 00000000 		.4byte	ADC_countsPer10Volt
 1780 0475 05       		.uleb128 0x5
 1781 0476 54040000 		.4byte	0x454
 1782 047a 00       		.byte	0
 1783              		.section	.debug_abbrev,"",%progbits
 1784              	.Ldebug_abbrev0:
 1785 0000 01       		.uleb128 0x1
 1786 0001 11       		.uleb128 0x11
 1787 0002 01       		.byte	0x1
 1788 0003 25       		.uleb128 0x25
 1789 0004 0E       		.uleb128 0xe
 1790 0005 13       		.uleb128 0x13
 1791 0006 0B       		.uleb128 0xb
 1792 0007 03       		.uleb128 0x3
 1793 0008 0E       		.uleb128 0xe
 1794 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 48


 1795 000a 0E       		.uleb128 0xe
 1796 000b 55       		.uleb128 0x55
 1797 000c 17       		.uleb128 0x17
 1798 000d 11       		.uleb128 0x11
 1799 000e 01       		.uleb128 0x1
 1800 000f 10       		.uleb128 0x10
 1801 0010 17       		.uleb128 0x17
 1802 0011 00       		.byte	0
 1803 0012 00       		.byte	0
 1804 0013 02       		.uleb128 0x2
 1805 0014 24       		.uleb128 0x24
 1806 0015 00       		.byte	0
 1807 0016 0B       		.uleb128 0xb
 1808 0017 0B       		.uleb128 0xb
 1809 0018 3E       		.uleb128 0x3e
 1810 0019 0B       		.uleb128 0xb
 1811 001a 03       		.uleb128 0x3
 1812 001b 0E       		.uleb128 0xe
 1813 001c 00       		.byte	0
 1814 001d 00       		.byte	0
 1815 001e 03       		.uleb128 0x3
 1816 001f 24       		.uleb128 0x24
 1817 0020 00       		.byte	0
 1818 0021 0B       		.uleb128 0xb
 1819 0022 0B       		.uleb128 0xb
 1820 0023 3E       		.uleb128 0x3e
 1821 0024 0B       		.uleb128 0xb
 1822 0025 03       		.uleb128 0x3
 1823 0026 08       		.uleb128 0x8
 1824 0027 00       		.byte	0
 1825 0028 00       		.byte	0
 1826 0029 04       		.uleb128 0x4
 1827 002a 16       		.uleb128 0x16
 1828 002b 00       		.byte	0
 1829 002c 03       		.uleb128 0x3
 1830 002d 0E       		.uleb128 0xe
 1831 002e 3A       		.uleb128 0x3a
 1832 002f 0B       		.uleb128 0xb
 1833 0030 3B       		.uleb128 0x3b
 1834 0031 05       		.uleb128 0x5
 1835 0032 49       		.uleb128 0x49
 1836 0033 13       		.uleb128 0x13
 1837 0034 00       		.byte	0
 1838 0035 00       		.byte	0
 1839 0036 05       		.uleb128 0x5
 1840 0037 35       		.uleb128 0x35
 1841 0038 00       		.byte	0
 1842 0039 49       		.uleb128 0x49
 1843 003a 13       		.uleb128 0x13
 1844 003b 00       		.byte	0
 1845 003c 00       		.byte	0
 1846 003d 06       		.uleb128 0x6
 1847 003e 2E       		.uleb128 0x2e
 1848 003f 00       		.byte	0
 1849 0040 3F       		.uleb128 0x3f
 1850 0041 19       		.uleb128 0x19
 1851 0042 03       		.uleb128 0x3
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 49


 1852 0043 0E       		.uleb128 0xe
 1853 0044 3A       		.uleb128 0x3a
 1854 0045 0B       		.uleb128 0xb
 1855 0046 3B       		.uleb128 0x3b
 1856 0047 0B       		.uleb128 0xb
 1857 0048 27       		.uleb128 0x27
 1858 0049 19       		.uleb128 0x19
 1859 004a 11       		.uleb128 0x11
 1860 004b 01       		.uleb128 0x1
 1861 004c 12       		.uleb128 0x12
 1862 004d 06       		.uleb128 0x6
 1863 004e 40       		.uleb128 0x40
 1864 004f 18       		.uleb128 0x18
 1865 0050 9642     		.uleb128 0x2116
 1866 0052 19       		.uleb128 0x19
 1867 0053 00       		.byte	0
 1868 0054 00       		.byte	0
 1869 0055 07       		.uleb128 0x7
 1870 0056 2E       		.uleb128 0x2e
 1871 0057 01       		.byte	0x1
 1872 0058 3F       		.uleb128 0x3f
 1873 0059 19       		.uleb128 0x19
 1874 005a 03       		.uleb128 0x3
 1875 005b 0E       		.uleb128 0xe
 1876 005c 3A       		.uleb128 0x3a
 1877 005d 0B       		.uleb128 0xb
 1878 005e 3B       		.uleb128 0x3b
 1879 005f 0B       		.uleb128 0xb
 1880 0060 27       		.uleb128 0x27
 1881 0061 19       		.uleb128 0x19
 1882 0062 11       		.uleb128 0x11
 1883 0063 01       		.uleb128 0x1
 1884 0064 12       		.uleb128 0x12
 1885 0065 06       		.uleb128 0x6
 1886 0066 40       		.uleb128 0x40
 1887 0067 18       		.uleb128 0x18
 1888 0068 9642     		.uleb128 0x2116
 1889 006a 19       		.uleb128 0x19
 1890 006b 01       		.uleb128 0x1
 1891 006c 13       		.uleb128 0x13
 1892 006d 00       		.byte	0
 1893 006e 00       		.byte	0
 1894 006f 08       		.uleb128 0x8
 1895 0070 34       		.uleb128 0x34
 1896 0071 00       		.byte	0
 1897 0072 03       		.uleb128 0x3
 1898 0073 0E       		.uleb128 0xe
 1899 0074 3A       		.uleb128 0x3a
 1900 0075 0B       		.uleb128 0xb
 1901 0076 3B       		.uleb128 0x3b
 1902 0077 0B       		.uleb128 0xb
 1903 0078 49       		.uleb128 0x49
 1904 0079 13       		.uleb128 0x13
 1905 007a 02       		.uleb128 0x2
 1906 007b 18       		.uleb128 0x18
 1907 007c 00       		.byte	0
 1908 007d 00       		.byte	0
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 50


 1909 007e 09       		.uleb128 0x9
 1910 007f 2E       		.uleb128 0x2e
 1911 0080 00       		.byte	0
 1912 0081 3F       		.uleb128 0x3f
 1913 0082 19       		.uleb128 0x19
 1914 0083 03       		.uleb128 0x3
 1915 0084 0E       		.uleb128 0xe
 1916 0085 3A       		.uleb128 0x3a
 1917 0086 0B       		.uleb128 0xb
 1918 0087 3B       		.uleb128 0x3b
 1919 0088 05       		.uleb128 0x5
 1920 0089 27       		.uleb128 0x27
 1921 008a 19       		.uleb128 0x19
 1922 008b 11       		.uleb128 0x11
 1923 008c 01       		.uleb128 0x1
 1924 008d 12       		.uleb128 0x12
 1925 008e 06       		.uleb128 0x6
 1926 008f 40       		.uleb128 0x40
 1927 0090 18       		.uleb128 0x18
 1928 0091 9642     		.uleb128 0x2116
 1929 0093 19       		.uleb128 0x19
 1930 0094 00       		.byte	0
 1931 0095 00       		.byte	0
 1932 0096 0A       		.uleb128 0xa
 1933 0097 2E       		.uleb128 0x2e
 1934 0098 00       		.byte	0
 1935 0099 3F       		.uleb128 0x3f
 1936 009a 19       		.uleb128 0x19
 1937 009b 03       		.uleb128 0x3
 1938 009c 0E       		.uleb128 0xe
 1939 009d 3A       		.uleb128 0x3a
 1940 009e 0B       		.uleb128 0xb
 1941 009f 3B       		.uleb128 0x3b
 1942 00a0 05       		.uleb128 0x5
 1943 00a1 27       		.uleb128 0x27
 1944 00a2 19       		.uleb128 0x19
 1945 00a3 11       		.uleb128 0x11
 1946 00a4 01       		.uleb128 0x1
 1947 00a5 12       		.uleb128 0x12
 1948 00a6 06       		.uleb128 0x6
 1949 00a7 40       		.uleb128 0x40
 1950 00a8 18       		.uleb128 0x18
 1951 00a9 9742     		.uleb128 0x2117
 1952 00ab 19       		.uleb128 0x19
 1953 00ac 00       		.byte	0
 1954 00ad 00       		.byte	0
 1955 00ae 0B       		.uleb128 0xb
 1956 00af 2E       		.uleb128 0x2e
 1957 00b0 01       		.byte	0x1
 1958 00b1 3F       		.uleb128 0x3f
 1959 00b2 19       		.uleb128 0x19
 1960 00b3 03       		.uleb128 0x3
 1961 00b4 0E       		.uleb128 0xe
 1962 00b5 3A       		.uleb128 0x3a
 1963 00b6 0B       		.uleb128 0xb
 1964 00b7 3B       		.uleb128 0x3b
 1965 00b8 05       		.uleb128 0x5
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 51


 1966 00b9 27       		.uleb128 0x27
 1967 00ba 19       		.uleb128 0x19
 1968 00bb 49       		.uleb128 0x49
 1969 00bc 13       		.uleb128 0x13
 1970 00bd 11       		.uleb128 0x11
 1971 00be 01       		.uleb128 0x1
 1972 00bf 12       		.uleb128 0x12
 1973 00c0 06       		.uleb128 0x6
 1974 00c1 40       		.uleb128 0x40
 1975 00c2 18       		.uleb128 0x18
 1976 00c3 9742     		.uleb128 0x2117
 1977 00c5 19       		.uleb128 0x19
 1978 00c6 01       		.uleb128 0x1
 1979 00c7 13       		.uleb128 0x13
 1980 00c8 00       		.byte	0
 1981 00c9 00       		.byte	0
 1982 00ca 0C       		.uleb128 0xc
 1983 00cb 05       		.uleb128 0x5
 1984 00cc 00       		.byte	0
 1985 00cd 03       		.uleb128 0x3
 1986 00ce 0E       		.uleb128 0xe
 1987 00cf 3A       		.uleb128 0x3a
 1988 00d0 0B       		.uleb128 0xb
 1989 00d1 3B       		.uleb128 0x3b
 1990 00d2 05       		.uleb128 0x5
 1991 00d3 49       		.uleb128 0x49
 1992 00d4 13       		.uleb128 0x13
 1993 00d5 02       		.uleb128 0x2
 1994 00d6 18       		.uleb128 0x18
 1995 00d7 00       		.byte	0
 1996 00d8 00       		.byte	0
 1997 00d9 0D       		.uleb128 0xd
 1998 00da 34       		.uleb128 0x34
 1999 00db 00       		.byte	0
 2000 00dc 03       		.uleb128 0x3
 2001 00dd 0E       		.uleb128 0xe
 2002 00de 3A       		.uleb128 0x3a
 2003 00df 0B       		.uleb128 0xb
 2004 00e0 3B       		.uleb128 0x3b
 2005 00e1 05       		.uleb128 0x5
 2006 00e2 49       		.uleb128 0x49
 2007 00e3 13       		.uleb128 0x13
 2008 00e4 02       		.uleb128 0x2
 2009 00e5 18       		.uleb128 0x18
 2010 00e6 00       		.byte	0
 2011 00e7 00       		.byte	0
 2012 00e8 0E       		.uleb128 0xe
 2013 00e9 2E       		.uleb128 0x2e
 2014 00ea 01       		.byte	0x1
 2015 00eb 3F       		.uleb128 0x3f
 2016 00ec 19       		.uleb128 0x19
 2017 00ed 03       		.uleb128 0x3
 2018 00ee 0E       		.uleb128 0xe
 2019 00ef 3A       		.uleb128 0x3a
 2020 00f0 0B       		.uleb128 0xb
 2021 00f1 3B       		.uleb128 0x3b
 2022 00f2 05       		.uleb128 0x5
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 52


 2023 00f3 27       		.uleb128 0x27
 2024 00f4 19       		.uleb128 0x19
 2025 00f5 49       		.uleb128 0x49
 2026 00f6 13       		.uleb128 0x13
 2027 00f7 11       		.uleb128 0x11
 2028 00f8 01       		.uleb128 0x1
 2029 00f9 12       		.uleb128 0x12
 2030 00fa 06       		.uleb128 0x6
 2031 00fb 40       		.uleb128 0x40
 2032 00fc 18       		.uleb128 0x18
 2033 00fd 9642     		.uleb128 0x2116
 2034 00ff 19       		.uleb128 0x19
 2035 0100 01       		.uleb128 0x1
 2036 0101 13       		.uleb128 0x13
 2037 0102 00       		.byte	0
 2038 0103 00       		.byte	0
 2039 0104 0F       		.uleb128 0xf
 2040 0105 2E       		.uleb128 0x2e
 2041 0106 01       		.byte	0x1
 2042 0107 3F       		.uleb128 0x3f
 2043 0108 19       		.uleb128 0x19
 2044 0109 03       		.uleb128 0x3
 2045 010a 0E       		.uleb128 0xe
 2046 010b 3A       		.uleb128 0x3a
 2047 010c 0B       		.uleb128 0xb
 2048 010d 3B       		.uleb128 0x3b
 2049 010e 05       		.uleb128 0x5
 2050 010f 27       		.uleb128 0x27
 2051 0110 19       		.uleb128 0x19
 2052 0111 11       		.uleb128 0x11
 2053 0112 01       		.uleb128 0x1
 2054 0113 12       		.uleb128 0x12
 2055 0114 06       		.uleb128 0x6
 2056 0115 40       		.uleb128 0x40
 2057 0116 18       		.uleb128 0x18
 2058 0117 9742     		.uleb128 0x2117
 2059 0119 19       		.uleb128 0x19
 2060 011a 01       		.uleb128 0x1
 2061 011b 13       		.uleb128 0x13
 2062 011c 00       		.byte	0
 2063 011d 00       		.byte	0
 2064 011e 10       		.uleb128 0x10
 2065 011f 2E       		.uleb128 0x2e
 2066 0120 01       		.byte	0x1
 2067 0121 3F       		.uleb128 0x3f
 2068 0122 19       		.uleb128 0x19
 2069 0123 03       		.uleb128 0x3
 2070 0124 0E       		.uleb128 0xe
 2071 0125 3A       		.uleb128 0x3a
 2072 0126 0B       		.uleb128 0xb
 2073 0127 3B       		.uleb128 0x3b
 2074 0128 05       		.uleb128 0x5
 2075 0129 27       		.uleb128 0x27
 2076 012a 19       		.uleb128 0x19
 2077 012b 11       		.uleb128 0x11
 2078 012c 01       		.uleb128 0x1
 2079 012d 12       		.uleb128 0x12
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 53


 2080 012e 06       		.uleb128 0x6
 2081 012f 40       		.uleb128 0x40
 2082 0130 18       		.uleb128 0x18
 2083 0131 9642     		.uleb128 0x2116
 2084 0133 19       		.uleb128 0x19
 2085 0134 01       		.uleb128 0x1
 2086 0135 13       		.uleb128 0x13
 2087 0136 00       		.byte	0
 2088 0137 00       		.byte	0
 2089 0138 11       		.uleb128 0x11
 2090 0139 01       		.uleb128 0x1
 2091 013a 01       		.byte	0x1
 2092 013b 49       		.uleb128 0x49
 2093 013c 13       		.uleb128 0x13
 2094 013d 01       		.uleb128 0x1
 2095 013e 13       		.uleb128 0x13
 2096 013f 00       		.byte	0
 2097 0140 00       		.byte	0
 2098 0141 12       		.uleb128 0x12
 2099 0142 21       		.uleb128 0x21
 2100 0143 00       		.byte	0
 2101 0144 49       		.uleb128 0x49
 2102 0145 13       		.uleb128 0x13
 2103 0146 2F       		.uleb128 0x2f
 2104 0147 0B       		.uleb128 0xb
 2105 0148 00       		.byte	0
 2106 0149 00       		.byte	0
 2107 014a 13       		.uleb128 0x13
 2108 014b 26       		.uleb128 0x26
 2109 014c 00       		.byte	0
 2110 014d 49       		.uleb128 0x49
 2111 014e 13       		.uleb128 0x13
 2112 014f 00       		.byte	0
 2113 0150 00       		.byte	0
 2114 0151 14       		.uleb128 0x14
 2115 0152 34       		.uleb128 0x34
 2116 0153 00       		.byte	0
 2117 0154 03       		.uleb128 0x3
 2118 0155 0E       		.uleb128 0xe
 2119 0156 3A       		.uleb128 0x3a
 2120 0157 0B       		.uleb128 0xb
 2121 0158 3B       		.uleb128 0x3b
 2122 0159 0B       		.uleb128 0xb
 2123 015a 49       		.uleb128 0x49
 2124 015b 13       		.uleb128 0x13
 2125 015c 3F       		.uleb128 0x3f
 2126 015d 19       		.uleb128 0x19
 2127 015e 02       		.uleb128 0x2
 2128 015f 18       		.uleb128 0x18
 2129 0160 00       		.byte	0
 2130 0161 00       		.byte	0
 2131 0162 00       		.byte	0
 2132              		.section	.debug_aranges,"",%progbits
 2133 0000 A4000000 		.4byte	0xa4
 2134 0004 0200     		.2byte	0x2
 2135 0006 00000000 		.4byte	.Ldebug_info0
 2136 000a 04       		.byte	0x4
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 54


 2137 000b 00       		.byte	0
 2138 000c 0000     		.2byte	0
 2139 000e 0000     		.2byte	0
 2140 0010 00000000 		.4byte	.LFB2
 2141 0014 24000000 		.4byte	.LFE2-.LFB2
 2142 0018 00000000 		.4byte	.LFB3
 2143 001c C4010000 		.4byte	.LFE3-.LFB3
 2144 0020 00000000 		.4byte	.LFB4
 2145 0024 38000000 		.4byte	.LFE4-.LFB4
 2146 0028 00000000 		.4byte	.LFB5
 2147 002c 18000000 		.4byte	.LFE5-.LFB5
 2148 0030 00000000 		.4byte	.LFB6
 2149 0034 1C000000 		.4byte	.LFE6-.LFB6
 2150 0038 00000000 		.4byte	.LFB7
 2151 003c 1C000000 		.4byte	.LFE7-.LFB7
 2152 0040 00000000 		.4byte	.LFB8
 2153 0044 48000000 		.4byte	.LFE8-.LFB8
 2154 0048 00000000 		.4byte	.LFB9
 2155 004c 44000000 		.4byte	.LFE9-.LFB9
 2156 0050 00000000 		.4byte	.LFB10
 2157 0054 1C000000 		.4byte	.LFE10-.LFB10
 2158 0058 00000000 		.4byte	.LFB11
 2159 005c 30000000 		.4byte	.LFE11-.LFB11
 2160 0060 00000000 		.4byte	.LFB12
 2161 0064 2C000000 		.4byte	.LFE12-.LFB12
 2162 0068 00000000 		.4byte	.LFB13
 2163 006c 1C000000 		.4byte	.LFE13-.LFB13
 2164 0070 00000000 		.4byte	.LFB14
 2165 0074 1C000000 		.4byte	.LFE14-.LFB14
 2166 0078 00000000 		.4byte	.LFB15
 2167 007c 30000000 		.4byte	.LFE15-.LFB15
 2168 0080 00000000 		.4byte	.LFB16
 2169 0084 2C000000 		.4byte	.LFE16-.LFB16
 2170 0088 00000000 		.4byte	.LFB17
 2171 008c A4000000 		.4byte	.LFE17-.LFB17
 2172 0090 00000000 		.4byte	.LFB18
 2173 0094 90000000 		.4byte	.LFE18-.LFB18
 2174 0098 00000000 		.4byte	.LFB19
 2175 009c 80000000 		.4byte	.LFE19-.LFB19
 2176 00a0 00000000 		.4byte	0
 2177 00a4 00000000 		.4byte	0
 2178              		.section	.debug_ranges,"",%progbits
 2179              	.Ldebug_ranges0:
 2180 0000 00000000 		.4byte	.LFB2
 2181 0004 24000000 		.4byte	.LFE2
 2182 0008 00000000 		.4byte	.LFB3
 2183 000c C4010000 		.4byte	.LFE3
 2184 0010 00000000 		.4byte	.LFB4
 2185 0014 38000000 		.4byte	.LFE4
 2186 0018 00000000 		.4byte	.LFB5
 2187 001c 18000000 		.4byte	.LFE5
 2188 0020 00000000 		.4byte	.LFB6
 2189 0024 1C000000 		.4byte	.LFE6
 2190 0028 00000000 		.4byte	.LFB7
 2191 002c 1C000000 		.4byte	.LFE7
 2192 0030 00000000 		.4byte	.LFB8
 2193 0034 48000000 		.4byte	.LFE8
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 55


 2194 0038 00000000 		.4byte	.LFB9
 2195 003c 44000000 		.4byte	.LFE9
 2196 0040 00000000 		.4byte	.LFB10
 2197 0044 1C000000 		.4byte	.LFE10
 2198 0048 00000000 		.4byte	.LFB11
 2199 004c 30000000 		.4byte	.LFE11
 2200 0050 00000000 		.4byte	.LFB12
 2201 0054 2C000000 		.4byte	.LFE12
 2202 0058 00000000 		.4byte	.LFB13
 2203 005c 1C000000 		.4byte	.LFE13
 2204 0060 00000000 		.4byte	.LFB14
 2205 0064 1C000000 		.4byte	.LFE14
 2206 0068 00000000 		.4byte	.LFB15
 2207 006c 30000000 		.4byte	.LFE15
 2208 0070 00000000 		.4byte	.LFB16
 2209 0074 2C000000 		.4byte	.LFE16
 2210 0078 00000000 		.4byte	.LFB17
 2211 007c A4000000 		.4byte	.LFE17
 2212 0080 00000000 		.4byte	.LFB18
 2213 0084 90000000 		.4byte	.LFE18
 2214 0088 00000000 		.4byte	.LFB19
 2215 008c 80000000 		.4byte	.LFE19
 2216 0090 00000000 		.4byte	0
 2217 0094 00000000 		.4byte	0
 2218              		.section	.debug_line,"",%progbits
 2219              	.Ldebug_line0:
 2220 0000 98020000 		.section	.debug_str,"MS",%progbits,1
 2220      02004000 
 2220      00000201 
 2220      FB0E0D00 
 2220      01010101 
 2221              	.LASF6:
 2222 0000 6C6F6E67 		.ascii	"long long int\000"
 2222      206C6F6E 
 2222      6720696E 
 2222      7400
 2223              	.LASF61:
 2224 000e 433A5C55 		.ascii	"C:\\Users\\michs\\Documents\\PSoC Creator\\fNIR PSo"
 2224      73657273 
 2224      5C6D6963 
 2224      68735C44 
 2224      6F63756D 
 2225 003c 4320424C 		.ascii	"C BLE\\fNIR PSoC Central\\fNIR PSoC Central.cydsn\000"
 2225      455C664E 
 2225      49522050 
 2225      536F4320 
 2225      43656E74 
 2226              	.LASF19:
 2227 006c 72656733 		.ascii	"reg32\000"
 2227      3200
 2228              	.LASF59:
 2229 0072 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2229      4320342E 
 2229      392E3320 
 2229      32303135 
 2229      30333033 
 2230 00a5 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 56


 2230      20726576 
 2230      6973696F 
 2230      6E203232 
 2230      31323230 
 2231 00d8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2231      66756E63 
 2231      74696F6E 
 2231      2D736563 
 2231      74696F6E 
 2232              	.LASF45:
 2233 0100 6F666673 		.ascii	"offset\000"
 2233      657400
 2234              	.LASF15:
 2235 0107 666C6F61 		.ascii	"float\000"
 2235      7400
 2236              	.LASF41:
 2237 010d 68696768 		.ascii	"highLimit\000"
 2237      4C696D69 
 2237      7400
 2238              	.LASF48:
 2239 0117 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2239      436F756E 
 2239      7473546F 
 2239      5F6D566F 
 2239      6C747300 
 2240              	.LASF52:
 2241 012b 75566F6C 		.ascii	"uVolts\000"
 2241      747300
 2242              	.LASF3:
 2243 0132 73686F72 		.ascii	"short unsigned int\000"
 2243      7420756E 
 2243      7369676E 
 2243      65642069 
 2243      6E7400
 2244              	.LASF2:
 2245 0145 73686F72 		.ascii	"short int\000"
 2245      7420696E 
 2245      7400
 2246              	.LASF44:
 2247 014f 4144435F 		.ascii	"ADC_SetOffset\000"
 2247      5365744F 
 2247      66667365 
 2247      7400
 2248              	.LASF38:
 2249 015d 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2249      5365744C 
 2249      6F774C69 
 2249      6D697400 
 2250              	.LASF29:
 2251 016d 73746174 		.ascii	"status\000"
 2251      757300
 2252              	.LASF14:
 2253 0174 666C6F61 		.ascii	"float32\000"
 2253      74333200 
 2254              	.LASF57:
 2255 017c 4144435F 		.ascii	"ADC_offset\000"
 2255      6F666673 
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 57


 2255      657400
 2256              	.LASF22:
 2257 0187 746D7052 		.ascii	"tmpRegVal\000"
 2257      65675661 
 2257      6C00
 2258              	.LASF46:
 2259 0191 4144435F 		.ascii	"ADC_SetGain\000"
 2259      53657447 
 2259      61696E00 
 2260              	.LASF1:
 2261 019d 756E7369 		.ascii	"unsigned char\000"
 2261      676E6564 
 2261      20636861 
 2261      7200
 2262              	.LASF40:
 2263 01ab 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2263      53657448 
 2263      6967684C 
 2263      696D6974 
 2263      00
 2264              	.LASF12:
 2265 01bc 696E7431 		.ascii	"int16\000"
 2265      3600
 2266              	.LASF5:
 2267 01c2 6C6F6E67 		.ascii	"long unsigned int\000"
 2267      20756E73 
 2267      69676E65 
 2267      6420696E 
 2267      7400
 2268              	.LASF13:
 2269 01d4 696E7433 		.ascii	"int32\000"
 2269      3200
 2270              	.LASF55:
 2271 01da 4144435F 		.ascii	"ADC_channelsConfig\000"
 2271      6368616E 
 2271      6E656C73 
 2271      436F6E66 
 2271      696700
 2272              	.LASF31:
 2273 01ed 4144435F 		.ascii	"ADC_GetResult16\000"
 2273      47657452 
 2273      6573756C 
 2273      74313600 
 2274              	.LASF36:
 2275 01fd 4144435F 		.ascii	"ADC_SetChanMask\000"
 2275      53657443 
 2275      68616E4D 
 2275      61736B00 
 2276              	.LASF43:
 2277 020d 4144435F 		.ascii	"ADC_SetSatMask\000"
 2277      53657453 
 2277      61744D61 
 2277      736B00
 2278              	.LASF30:
 2279 021c 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2279      4973456E 
 2279      64436F6E 
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 58


 2279      76657273 
 2279      696F6E00 
 2280              	.LASF16:
 2281 0230 646F7562 		.ascii	"double\000"
 2281      6C6500
 2282              	.LASF39:
 2283 0237 6C6F774C 		.ascii	"lowLimit\000"
 2283      696D6974 
 2283      00
 2284              	.LASF47:
 2285 0240 61646347 		.ascii	"adcGain\000"
 2285      61696E00 
 2286              	.LASF10:
 2287 0248 75696E74 		.ascii	"uint16\000"
 2287      313600
 2288              	.LASF49:
 2289 024f 61646343 		.ascii	"adcCounts\000"
 2289      6F756E74 
 2289      7300
 2290              	.LASF11:
 2291 0259 75696E74 		.ascii	"uint32\000"
 2291      333200
 2292              	.LASF42:
 2293 0260 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2293      5365744C 
 2293      696D6974 
 2293      4D61736B 
 2293      00
 2294              	.LASF8:
 2295 0271 756E7369 		.ascii	"unsigned int\000"
 2295      676E6564 
 2295      20696E74 
 2295      00
 2296              	.LASF25:
 2297 027e 4144435F 		.ascii	"ADC_Enable\000"
 2297      456E6162 
 2297      6C6500
 2298              	.LASF23:
 2299 0289 636F756E 		.ascii	"counts\000"
 2299      747300
 2300              	.LASF7:
 2301 0290 6C6F6E67 		.ascii	"long long unsigned int\000"
 2301      206C6F6E 
 2301      6720756E 
 2301      7369676E 
 2301      65642069 
 2302              	.LASF34:
 2303 02a7 72657375 		.ascii	"result\000"
 2303      6C7400
 2304              	.LASF24:
 2305 02ae 4144435F 		.ascii	"ADC_Start\000"
 2305      53746172 
 2305      7400
 2306              	.LASF35:
 2307 02b8 4144435F 		.ascii	"ADC_Init\000"
 2307      496E6974 
 2307      00
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 59


 2308              	.LASF54:
 2309 02c1 766F6C74 		.ascii	"volts\000"
 2309      7300
 2310              	.LASF33:
 2311 02c7 6368616E 		.ascii	"chan\000"
 2311      00
 2312              	.LASF50:
 2313 02cc 6D566F6C 		.ascii	"mVolts\000"
 2313      747300
 2314              	.LASF20:
 2315 02d3 73697A65 		.ascii	"sizetype\000"
 2315      74797065 
 2315      00
 2316              	.LASF51:
 2317 02dc 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2317      436F756E 
 2317      7473546F 
 2317      5F75566F 
 2317      6C747300 
 2318              	.LASF53:
 2319 02f0 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2319      436F756E 
 2319      7473546F 
 2319      5F566F6C 
 2319      747300
 2320              	.LASF27:
 2321 0303 4144435F 		.ascii	"ADC_StartConvert\000"
 2321      53746172 
 2321      74436F6E 
 2321      76657274 
 2321      00
 2322              	.LASF60:
 2323 0314 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2323      72617465 
 2323      645F536F 
 2323      75726365 
 2323      5C50536F 
 2324              	.LASF37:
 2325 0331 6D61736B 		.ascii	"mask\000"
 2325      00
 2326              	.LASF21:
 2327 0336 63684E75 		.ascii	"chNum\000"
 2327      6D00
 2328              	.LASF32:
 2329 033c 7265744D 		.ascii	"retMode\000"
 2329      6F646500 
 2330              	.LASF28:
 2331 0344 4144435F 		.ascii	"ADC_StopConvert\000"
 2331      53746F70 
 2331      436F6E76 
 2331      65727400 
 2332              	.LASF9:
 2333 0354 75696E74 		.ascii	"uint8\000"
 2333      3800
 2334              	.LASF58:
 2335 035a 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2335      636F756E 
ARM GAS  C:\Users\michs\AppData\Local\Temp\ccSmsbxq.s 			page 60


 2335      74735065 
 2335      72313056 
 2335      6F6C7400 
 2336              	.LASF4:
 2337 036e 6C6F6E67 		.ascii	"long int\000"
 2337      20696E74 
 2337      00
 2338              	.LASF18:
 2339 0377 63686172 		.ascii	"char\000"
 2339      00
 2340              	.LASF0:
 2341 037c 7369676E 		.ascii	"signed char\000"
 2341      65642063 
 2341      68617200 
 2342              	.LASF56:
 2343 0388 4144435F 		.ascii	"ADC_initVar\000"
 2343      696E6974 
 2343      56617200 
 2344              	.LASF17:
 2345 0394 696E7436 		.ascii	"int64\000"
 2345      3400
 2346              	.LASF26:
 2347 039a 4144435F 		.ascii	"ADC_Stop\000"
 2347      53746F70 
 2347      00
 2348              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
