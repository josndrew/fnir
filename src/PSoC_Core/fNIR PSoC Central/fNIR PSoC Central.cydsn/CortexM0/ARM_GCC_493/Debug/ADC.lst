ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,8,4
  24              		.comm	ADC_countsPer10Volt,16,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 16
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	16
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 2


  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000000u, 0x000000
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 3


  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 4


  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 5


 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 173 0
  97 000e 654B     		ldr	r3, .L17
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 634B     		ldr	r3, .L17+4
 103 001a 0F22     		mov	r2, #15
 104 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 6


 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
 106 001e 634B     		ldr	r3, .L17+8
 107 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 6249     		ldr	r1, .L17+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 6249     		ldr	r1, .L17+16
 117              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 624B     		ldr	r3, .L17+20
 120 002e 624A     		ldr	r2, .L17+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 614B     		ldr	r3, .L17+24
 126 0038 614A     		ldr	r2, .L17+28
 127 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 614B     		ldr	r3, .L17+32
 130 003e 624A     		ldr	r2, .L17+36
 131 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 624B     		ldr	r3, .L17+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 614B     		ldr	r3, .L17+44
 138 004a 624A     		ldr	r2, .L17+48
 139 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 624B     		ldr	r3, .L17+52
 142 0050 604A     		ldr	r2, .L17+48
 143 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 614B     		ldr	r3, .L17+56
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 7


 146 0056 614A     		ldr	r2, .L17+56
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 152              		.loc 1 193 0 discriminator 4
 153 0062 5F4B     		ldr	r3, .L17+60
 154 0064 5E4A     		ldr	r2, .L17+60
 155 0066 1268     		ldr	r2, [r2]
 156 0068 8021     		mov	r1, #128
 157 006a 4902     		lsl	r1, r1, #9
 158 006c 0A43     		orr	r2, r1
 159 006e 1A60     		str	r2, [r3]
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 160              		.loc 1 197 0 discriminator 4
 161 0070 5C4B     		ldr	r3, .L17+64
 162 0072 0022     		mov	r2, #0
 163 0074 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 164              		.loc 1 198 0 discriminator 4
 165 0076 5C4B     		ldr	r3, .L17+68
 166 0078 0022     		mov	r2, #0
 167 007a 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 168              		.loc 1 199 0 discriminator 4
 169 007c 5B4B     		ldr	r3, .L17+72
 170 007e 0122     		mov	r2, #1
 171 0080 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 172              		.loc 1 206 0 discriminator 4
 173 0082 5B4B     		ldr	r3, .L17+76
 174 0084 1B68     		ldr	r3, [r3]
 175 0086 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 176              		.loc 1 207 0 discriminator 4
 177 0088 7B68     		ldr	r3, [r7, #4]
 178 008a 5A4A     		ldr	r2, .L17+80
 179 008c 1340     		and	r3, r2
 180 008e 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 8


 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 181              		.loc 1 220 0 discriminator 4
 182 0090 7B68     		ldr	r3, [r7, #4]
 183 0092 8022     		mov	r2, #128
 184 0094 9205     		lsl	r2, r2, #22
 185 0096 1343     		orr	r3, r2
 186 0098 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187              		.loc 1 221 0 discriminator 4
 188 009a 7B68     		ldr	r3, [r7, #4]
 189 009c 0122     		mov	r2, #1
 190 009e 9343     		bic	r3, r2
 191 00a0 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 192              		.loc 1 226 0 discriminator 4
 193 00a2 534B     		ldr	r3, .L17+76
 194 00a4 7A68     		ldr	r2, [r7, #4]
 195 00a6 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 196              		.loc 1 232 0 discriminator 4
 197 00a8 0023     		mov	r3, #0
 198 00aa FB60     		str	r3, [r7, #12]
 199 00ac 73E0     		b	.L8
 200              	.L16:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 201              		.loc 1 234 0
 202 00ae 524B     		ldr	r3, .L17+84
 203 00b0 FA68     		ldr	r2, [r7, #12]
 204 00b2 9200     		lsl	r2, r2, #2
 205 00b4 D258     		ldr	r2, [r2, r3]
 206 00b6 DC23     		mov	r3, #220
 207 00b8 9B01     		lsl	r3, r3, #6
 208 00ba 1340     		and	r3, r2
 209 00bc 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 210              		.loc 1 236 0
 211 00be 4F4A     		ldr	r2, .L17+88
 212 00c0 FB68     		ldr	r3, [r7, #12]
 213 00c2 D318     		add	r3, r2, r3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 9


 214 00c4 1B78     		ldrb	r3, [r3]
 215 00c6 1A1C     		mov	r2, r3
 216 00c8 7B68     		ldr	r3, [r7, #4]
 217 00ca 1343     		orr	r3, r2
 218 00cc 7B60     		str	r3, [r7, #4]
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 219              		.loc 1 253 0
 220 00ce FB68     		ldr	r3, [r7, #12]
 221 00d0 9B00     		lsl	r3, r3, #2
 222 00d2 4B4A     		ldr	r2, .L17+92
 223 00d4 9446     		mov	ip, r2
 224 00d6 6344     		add	r3, r3, ip
 225 00d8 7A68     		ldr	r2, [r7, #4]
 226 00da 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 227              		.loc 1 255 0
 228 00dc 464B     		ldr	r3, .L17+84
 229 00de FA68     		ldr	r2, [r7, #12]
 230 00e0 9200     		lsl	r2, r2, #2
 231 00e2 D358     		ldr	r3, [r2, r3]
 232 00e4 0122     		mov	r2, #1
 233 00e6 1340     		and	r3, r2
 234 00e8 09D0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 235              		.loc 1 257 0
 236 00ea 3E4B     		ldr	r3, .L17+64
 237 00ec 3D4A     		ldr	r2, .L17+64
 238 00ee 1268     		ldr	r2, [r2]
 239 00f0 F968     		ldr	r1, [r7, #12]
 240 00f2 0120     		mov	r0, #1
 241 00f4 8840     		lsl	r0, r0, r1
 242 00f6 011C     		mov	r1, r0
 243 00f8 89B2     		uxth	r1, r1
 244 00fa 0A43     		orr	r2, r1
 245 00fc 1A60     		str	r2, [r3]
 246              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 10


 247              		.loc 1 260 0
 248 00fe 3E4B     		ldr	r3, .L17+84
 249 0100 FA68     		ldr	r2, [r7, #12]
 250 0102 9200     		lsl	r2, r2, #2
 251 0104 D358     		ldr	r3, [r2, r3]
 252 0106 0222     		mov	r2, #2
 253 0108 1340     		and	r3, r2
 254 010a 09D0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 255              		.loc 1 262 0
 256 010c 364B     		ldr	r3, .L17+68
 257 010e 364A     		ldr	r2, .L17+68
 258 0110 1268     		ldr	r2, [r2]
 259 0112 F968     		ldr	r1, [r7, #12]
 260 0114 0120     		mov	r0, #1
 261 0116 8840     		lsl	r0, r0, r1
 262 0118 011C     		mov	r1, r0
 263 011a 89B2     		uxth	r1, r1
 264 011c 0A43     		orr	r2, r1
 265 011e 1A60     		str	r2, [r3]
 266              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 267              		.loc 1 282 0
 268 0120 354B     		ldr	r3, .L17+84
 269 0122 FA68     		ldr	r2, [r7, #12]
 270 0124 9200     		lsl	r2, r2, #2
 271 0126 D258     		ldr	r2, [r2, r3]
 272 0128 8023     		mov	r3, #128
 273 012a 9B00     		lsl	r3, r3, #2
 274 012c 1340     		and	r3, r2
 275 012e 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 276              		.loc 1 284 0
 277 0130 8023     		mov	r3, #128
 278 0132 5B00     		lsl	r3, r3, #1
 279 0134 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 11


 280 0136 02E0     		b	.L12
 281              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 282              		.loc 1 288 0
 283 0138 8023     		mov	r3, #128
 284 013a 5B01     		lsl	r3, r3, #5
 285 013c BB60     		str	r3, [r7, #8]
 286              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 287              		.loc 1 291 0
 288 013e 2E4B     		ldr	r3, .L17+84
 289 0140 FA68     		ldr	r2, [r7, #12]
 290 0142 9200     		lsl	r2, r2, #2
 291 0144 D258     		ldr	r2, [r2, r3]
 292 0146 8023     		mov	r3, #128
 293 0148 5B00     		lsl	r3, r3, #1
 294 014a 1340     		and	r3, r2
 295 014c 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 296              		.loc 1 298 0
 297 014e 2D4B     		ldr	r3, .L17+96
 298 0150 FA68     		ldr	r2, [r7, #12]
 299 0152 5200     		lsl	r2, r2, #1
 300 0154 0021     		mov	r1, #0
 301 0156 D152     		strh	r1, [r2, r3]
 302 0158 09E0     		b	.L14
 303              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 304              		.loc 1 305 0
 305 015a BB68     		ldr	r3, [r7, #8]
 306 015c 002B     		cmp	r3, #0
 307 015e 00DA     		bge	.L15
 308 0160 0133     		add	r3, r3, #1
 309              	.L15:
 310 0162 5B10     		asr	r3, r3, #1
 311 0164 99B2     		uxth	r1, r3
 312 0166 274B     		ldr	r3, .L17+96
 313 0168 FA68     		ldr	r2, [r7, #12]
 314 016a 5200     		lsl	r2, r2, #1
 315 016c D152     		strh	r1, [r2, r3]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 12


 316              	.L14:
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 317              		.loc 1 311 0 discriminator 2
 318 016e BB68     		ldr	r3, [r7, #8]
 319 0170 254A     		ldr	r2, .L17+100
 320 0172 5343     		mul	r3, r2
 321 0174 254A     		ldr	r2, .L17+104
 322 0176 9446     		mov	ip, r2
 323 0178 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 324              		.loc 1 312 0 discriminator 2
 325 017a 181C     		mov	r0, r3
 326 017c 2449     		ldr	r1, .L17+108
 327 017e FFF7FEFF 		bl	__aeabi_idiv
 328 0182 031C     		mov	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 329              		.loc 1 311 0 discriminator 2
 330 0184 9BB2     		uxth	r3, r3
 331 0186 19B2     		sxth	r1, r3
 332 0188 224B     		ldr	r3, .L17+112
 333 018a FA68     		ldr	r2, [r7, #12]
 334 018c 9200     		lsl	r2, r2, #2
 335 018e D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 336              		.loc 1 232 0 discriminator 2
 337 0190 FB68     		ldr	r3, [r7, #12]
 338 0192 0133     		add	r3, r3, #1
 339 0194 FB60     		str	r3, [r7, #12]
 340              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 341              		.loc 1 232 0 is_stmt 0 discriminator 1
 342 0196 FB68     		ldr	r3, [r7, #12]
 343 0198 032B     		cmp	r3, #3
 344 019a 88D9     		bls	.L16
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 345              		.loc 1 314 0 is_stmt 1
 346 019c BD46     		mov	sp, r7
 347 019e 04B0     		add	sp, sp, #16
 348              		@ sp needed
 349 01a0 80BD     		pop	{r7, pc}
 350              	.L18:
 351 01a2 C046     		.align	2
 352              	.L17:
 353 01a4 00000000 		.word	ADC_ISR
 354 01a8 20003A40 		.word	1077542944
 355 01ac 80033A40 		.word	1077543808
 356 01b0 70201013 		.word	319823984
 357 01b4 70200013 		.word	318775408
 358 01b8 00003A40 		.word	1077542912
 359 01bc 04003A40 		.word	1077542916
 360 01c0 C4000080 		.word	-2147483452
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 13


 361 01c4 18003A40 		.word	1077542936
 362 01c8 0000FF07 		.word	134152192
 363 01cc 1C003A40 		.word	1077542940
 364 01d0 10003A40 		.word	1077542928
 365 01d4 02000200 		.word	131074
 366 01d8 14003A40 		.word	1077542932
 367 01dc 00033A40 		.word	1077543680
 368 01e0 40033A40 		.word	1077543744
 369 01e4 28023A40 		.word	1077543464
 370 01e8 38023A40 		.word	1077543480
 371 01ec 18023A40 		.word	1077543448
 372 01f0 30003A40 		.word	1077542960
 373 01f4 FFFFFFDF 		.word	-536870913
 374 01f8 00000000 		.word	ADC_channelsConfig
 375 01fc 10000000 		.word	ADC_InputsPlacement.4788
 376 0200 80003A40 		.word	1077543040
 377 0204 00000000 		.word	ADC_offset
 378 0208 10270000 		.word	10000
 379 020c E40C0000 		.word	3300
 380 0210 C8190000 		.word	6600
 381 0214 00000000 		.word	ADC_countsPer10Volt
 382              		.cfi_endproc
 383              	.LFE3:
 384              		.size	ADC_Init, .-ADC_Init
 385              		.section	.text.ADC_Enable,"ax",%progbits
 386              		.align	2
 387              		.global	ADC_Enable
 388              		.code	16
 389              		.thumb_func
 390              		.type	ADC_Enable, %function
 391              	ADC_Enable:
 392              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 393              		.loc 1 331 0
 394              		.cfi_startproc
 395 0000 80B5     		push	{r7, lr}
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 14


 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 401              		.loc 1 332 0
 402 0004 0A4B     		ldr	r3, .L22
 403 0006 1B68     		ldr	r3, [r3]
 404 0008 002B     		cmp	r3, #0
 405 000a 0EDB     		blt	.L19
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 406              		.loc 1 336 0
 407 000c C046     		mov	r8, r8
 408              	.L21:
 409              		.loc 1 336 0 is_stmt 0 discriminator 1
 410 000e 094B     		ldr	r3, .L22+4
 411 0010 1B68     		ldr	r3, [r3]
 412 0012 002B     		cmp	r3, #0
 413 0014 FBDB     		blt	.L21
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 414              		.loc 1 342 0 is_stmt 1
 415 0016 064B     		ldr	r3, .L22
 416 0018 054A     		ldr	r2, .L22
 417 001a 1268     		ldr	r2, [r2]
 418 001c 8021     		mov	r1, #128
 419 001e 0906     		lsl	r1, r1, #24
 420 0020 0A43     		orr	r2, r1
 421 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 422              		.loc 1 345 0
 423 0024 0A20     		mov	r0, #10
 424 0026 FFF7FEFF 		bl	CyDelayUs
 425              	.L19:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 426              		.loc 1 347 0
 427 002a BD46     		mov	sp, r7
 428              		@ sp needed
 429 002c 80BD     		pop	{r7, pc}
 430              	.L23:
 431 002e C046     		.align	2
 432              	.L22:
 433 0030 00003A40 		.word	1077542912
 434 0034 08023A40 		.word	1077543432
 435              		.cfi_endproc
 436              	.LFE4:
 437              		.size	ADC_Enable, .-ADC_Enable
 438              		.section	.text.ADC_Stop,"ax",%progbits
 439              		.align	2
 440              		.global	ADC_Stop
 441              		.code	16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 15


 442              		.thumb_func
 443              		.type	ADC_Stop, %function
 444              	ADC_Stop:
 445              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 446              		.loc 1 366 0
 447              		.cfi_startproc
 448 0000 80B5     		push	{r7, lr}
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 454              		.loc 1 367 0
 455 0004 034B     		ldr	r3, .L25
 456 0006 034A     		ldr	r2, .L25
 457 0008 1268     		ldr	r2, [r2]
 458 000a 5200     		lsl	r2, r2, #1
 459 000c 5208     		lsr	r2, r2, #1
 460 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 461              		.loc 1 368 0
 462 0010 BD46     		mov	sp, r7
 463              		@ sp needed
 464 0012 80BD     		pop	{r7, pc}
 465              	.L26:
 466              		.align	2
 467              	.L25:
 468 0014 00003A40 		.word	1077542912
 469              		.cfi_endproc
 470              	.LFE5:
 471              		.size	ADC_Stop, .-ADC_Stop
 472              		.section	.text.ADC_StartConvert,"ax",%progbits
 473              		.align	2
 474              		.global	ADC_StartConvert
 475              		.code	16
 476              		.thumb_func
 477              		.type	ADC_StartConvert, %function
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 16


 478              	ADC_StartConvert:
 479              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 480              		.loc 1 392 0
 481              		.cfi_startproc
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 488              		.loc 1 394 0
 489 0004 044B     		ldr	r3, .L28
 490 0006 044A     		ldr	r2, .L28
 491 0008 1268     		ldr	r2, [r2]
 492 000a 8021     		mov	r1, #128
 493 000c 4902     		lsl	r1, r1, #9
 494 000e 0A43     		orr	r2, r1
 495 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 496              		.loc 1 399 0
 497 0012 BD46     		mov	sp, r7
 498              		@ sp needed
 499 0014 80BD     		pop	{r7, pc}
 500              	.L29:
 501 0016 C046     		.align	2
 502              	.L28:
 503 0018 04003A40 		.word	1077542916
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 17


 504              		.cfi_endproc
 505              	.LFE6:
 506              		.size	ADC_StartConvert, .-ADC_StartConvert
 507              		.section	.text.ADC_StopConvert,"ax",%progbits
 508              		.align	2
 509              		.global	ADC_StopConvert
 510              		.code	16
 511              		.thumb_func
 512              		.type	ADC_StopConvert, %function
 513              	ADC_StopConvert:
 514              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 515              		.loc 1 417 0
 516              		.cfi_startproc
 517 0000 80B5     		push	{r7, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 523              		.loc 1 419 0
 524 0004 034B     		ldr	r3, .L31
 525 0006 034A     		ldr	r2, .L31
 526 0008 1268     		ldr	r2, [r2]
 527 000a 0349     		ldr	r1, .L31+4
 528 000c 0A40     		and	r2, r1
 529 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 530              		.loc 1 421 0
 531 0010 BD46     		mov	sp, r7
 532              		@ sp needed
 533 0012 80BD     		pop	{r7, pc}
 534              	.L32:
 535              		.align	2
 536              	.L31:
 537 0014 04003A40 		.word	1077542916
 538 0018 FFFFFEFF 		.word	-65537
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 18


 539              		.cfi_endproc
 540              	.LFE7:
 541              		.size	ADC_StopConvert, .-ADC_StopConvert
 542              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 543              		.align	2
 544              		.global	ADC_IsEndConversion
 545              		.code	16
 546              		.thumb_func
 547              		.type	ADC_IsEndConversion, %function
 548              	ADC_IsEndConversion:
 549              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 550              		.loc 1 451 0
 551              		.cfi_startproc
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 84B0     		sub	sp, sp, #16
 557              		.cfi_def_cfa_offset 24
 558 0004 00AF     		add	r7, sp, #0
 559              		.cfi_def_cfa_register 7
 560 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 561              		.loc 1 452 0
 562 0008 0023     		mov	r3, #0
 563 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 19


 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 564              		.loc 1 454 0
 565 000c 7B68     		ldr	r3, [r7, #4]
 566 000e 0322     		mov	r2, #3
 567 0010 1340     		and	r3, r2
 568 0012 11D0     		beq	.L34
 569              	.L36:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 570              		.loc 1 458 0 discriminator 2
 571 0014 0B4B     		ldr	r3, .L38
 572 0016 1B68     		ldr	r3, [r3]
 573 0018 0122     		mov	r2, #1
 574 001a 1340     		and	r3, r2
 575 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 576              		.loc 1 459 0 discriminator 2
 577 001e FB68     		ldr	r3, [r7, #12]
 578 0020 002B     		cmp	r3, #0
 579 0022 03D1     		bne	.L35
 580              		.loc 1 459 0 is_stmt 0 discriminator 1
 581 0024 7B68     		ldr	r3, [r7, #4]
 582 0026 0222     		mov	r2, #2
 583 0028 1340     		and	r3, r2
 584 002a F3D1     		bne	.L36
 585              	.L35:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 586              		.loc 1 461 0 is_stmt 1
 587 002c FB68     		ldr	r3, [r7, #12]
 588 002e 002B     		cmp	r3, #0
 589 0030 02D0     		beq	.L34
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 590              		.loc 1 464 0
 591 0032 044B     		ldr	r3, .L38
 592 0034 0122     		mov	r2, #1
 593 0036 1A60     		str	r2, [r3]
 594              	.L34:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 20


 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 595              		.loc 1 485 0
 596 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 597              		.loc 1 486 0
 598 003a 181C     		mov	r0, r3
 599 003c BD46     		mov	sp, r7
 600 003e 04B0     		add	sp, sp, #16
 601              		@ sp needed
 602 0040 80BD     		pop	{r7, pc}
 603              	.L39:
 604 0042 C046     		.align	2
 605              	.L38:
 606 0044 10023A40 		.word	1077543440
 607              		.cfi_endproc
 608              	.LFE8:
 609              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 610              		.section	.text.ADC_GetResult16,"ax",%progbits
 611              		.align	2
 612              		.global	ADC_GetResult16
 613              		.code	16
 614              		.thumb_func
 615              		.type	ADC_GetResult16, %function
 616              	ADC_GetResult16:
 617              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 618              		.loc 1 505 0
 619              		.cfi_startproc
 620 0000 80B5     		push	{r7, lr}
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 84B0     		sub	sp, sp, #16
 625              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 21


 626 0004 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
 628 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 629              		.loc 1 509 0
 630 0008 7B68     		ldr	r3, [r7, #4]
 631 000a 032B     		cmp	r3, #3
 632 000c 02D9     		bls	.L41
 633              		.loc 1 509 0 is_stmt 0 discriminator 1
 634 000e 0020     		mov	r0, #0
 635 0010 FFF7FEFF 		bl	CyHalt
 636              	.L41:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 637              		.loc 1 511 0 is_stmt 1
 638 0014 7B68     		ldr	r3, [r7, #4]
 639 0016 032B     		cmp	r3, #3
 640 0018 09D8     		bhi	.L42
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 641              		.loc 1 513 0
 642 001a 7B68     		ldr	r3, [r7, #4]
 643 001c 9B00     		lsl	r3, r3, #2
 644 001e 084A     		ldr	r2, .L45
 645 0020 9446     		mov	ip, r2
 646 0022 6344     		add	r3, r3, ip
 647 0024 1B68     		ldr	r3, [r3]
 648 0026 1B04     		lsl	r3, r3, #16
 649 0028 1B0C     		lsr	r3, r3, #16
 650 002a FB60     		str	r3, [r7, #12]
 651 002c 01E0     		b	.L43
 652              	.L42:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 653              		.loc 1 521 0
 654 002e 0023     		mov	r3, #0
 655 0030 FB60     		str	r3, [r7, #12]
 656              	.L43:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 657              		.loc 1 525 0
 658 0032 FB68     		ldr	r3, [r7, #12]
 659 0034 9BB2     		uxth	r3, r3
 660 0036 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 661              		.loc 1 526 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 22


 662 0038 181C     		mov	r0, r3
 663 003a BD46     		mov	sp, r7
 664 003c 04B0     		add	sp, sp, #16
 665              		@ sp needed
 666 003e 80BD     		pop	{r7, pc}
 667              	.L46:
 668              		.align	2
 669              	.L45:
 670 0040 80013A40 		.word	1077543296
 671              		.cfi_endproc
 672              	.LFE9:
 673              		.size	ADC_GetResult16, .-ADC_GetResult16
 674              		.section	.text.ADC_SetChanMask,"ax",%progbits
 675              		.align	2
 676              		.global	ADC_SetChanMask
 677              		.code	16
 678              		.thumb_func
 679              		.type	ADC_SetChanMask, %function
 680              	ADC_SetChanMask:
 681              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 682              		.loc 1 550 0
 683              		.cfi_startproc
 684 0000 80B5     		push	{r7, lr}
 685              		.cfi_def_cfa_offset 8
 686              		.cfi_offset 7, -8
 687              		.cfi_offset 14, -4
 688 0002 82B0     		sub	sp, sp, #8
 689              		.cfi_def_cfa_offset 16
 690 0004 00AF     		add	r7, sp, #0
 691              		.cfi_def_cfa_register 7
 692 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 693              		.loc 1 551 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 23


 694 0008 034B     		ldr	r3, .L48
 695 000a 7A68     		ldr	r2, [r7, #4]
 696 000c 0F21     		mov	r1, #15
 697 000e 0A40     		and	r2, r1
 698 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 699              		.loc 1 552 0
 700 0012 BD46     		mov	sp, r7
 701 0014 02B0     		add	sp, sp, #8
 702              		@ sp needed
 703 0016 80BD     		pop	{r7, pc}
 704              	.L49:
 705              		.align	2
 706              	.L48:
 707 0018 20003A40 		.word	1077542944
 708              		.cfi_endproc
 709              	.LFE10:
 710              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 711              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 712              		.align	2
 713              		.global	ADC_SetLowLimit
 714              		.code	16
 715              		.thumb_func
 716              		.type	ADC_SetLowLimit, %function
 717              	ADC_SetLowLimit:
 718              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 24


 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 719              		.loc 1 594 0
 720              		.cfi_startproc
 721 0000 80B5     		push	{r7, lr}
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 7, -8
 724              		.cfi_offset 14, -4
 725 0002 82B0     		sub	sp, sp, #8
 726              		.cfi_def_cfa_offset 16
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_def_cfa_register 7
 729 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 730              		.loc 1 595 0
 731 0008 084B     		ldr	r3, .L51
 732 000a 084A     		ldr	r2, .L51
 733 000c 1268     		ldr	r2, [r2]
 734 000e 120C     		lsr	r2, r2, #16
 735 0010 1204     		lsl	r2, r2, #16
 736 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 737              		.loc 1 596 0
 738 0014 054B     		ldr	r3, .L51
 739 0016 054A     		ldr	r2, .L51
 740 0018 1168     		ldr	r1, [r2]
 741 001a 7A68     		ldr	r2, [r7, #4]
 742 001c 1204     		lsl	r2, r2, #16
 743 001e 120C     		lsr	r2, r2, #16
 744 0020 0A43     		orr	r2, r1
 745 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 746              		.loc 1 597 0
 747 0024 BD46     		mov	sp, r7
 748 0026 02B0     		add	sp, sp, #8
 749              		@ sp needed
 750 0028 80BD     		pop	{r7, pc}
 751              	.L52:
 752 002a C046     		.align	2
 753              	.L51:
 754 002c 18003A40 		.word	1077542936
 755              		.cfi_endproc
 756              	.LFE11:
 757              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 758              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 759              		.align	2
 760              		.global	ADC_SetHighLimit
 761              		.code	16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 25


 762              		.thumb_func
 763              		.type	ADC_SetHighLimit, %function
 764              	ADC_SetHighLimit:
 765              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 766              		.loc 1 615 0
 767              		.cfi_startproc
 768 0000 80B5     		push	{r7, lr}
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 777              		.loc 1 616 0
 778 0008 074B     		ldr	r3, .L54
 779 000a 074A     		ldr	r2, .L54
 780 000c 1268     		ldr	r2, [r2]
 781 000e 1204     		lsl	r2, r2, #16
 782 0010 120C     		lsr	r2, r2, #16
 783 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 784              		.loc 1 617 0
 785 0014 044B     		ldr	r3, .L54
 786 0016 044A     		ldr	r2, .L54
 787 0018 1168     		ldr	r1, [r2]
 788 001a 7A68     		ldr	r2, [r7, #4]
 789 001c 1204     		lsl	r2, r2, #16
 790 001e 0A43     		orr	r2, r1
 791 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 792              		.loc 1 618 0
 793 0022 BD46     		mov	sp, r7
 794 0024 02B0     		add	sp, sp, #8
 795              		@ sp needed
 796 0026 80BD     		pop	{r7, pc}
 797              	.L55:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 26


 798              		.align	2
 799              	.L54:
 800 0028 18003A40 		.word	1077542936
 801              		.cfi_endproc
 802              	.LFE12:
 803              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 804              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 805              		.align	2
 806              		.global	ADC_SetLimitMask
 807              		.code	16
 808              		.thumb_func
 809              		.type	ADC_SetLimitMask, %function
 810              	ADC_SetLimitMask:
 811              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 812              		.loc 1 639 0
 813              		.cfi_startproc
 814 0000 80B5     		push	{r7, lr}
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 82B0     		sub	sp, sp, #8
 819              		.cfi_def_cfa_offset 16
 820 0004 00AF     		add	r7, sp, #0
 821              		.cfi_def_cfa_register 7
 822 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 823              		.loc 1 640 0
 824 0008 034B     		ldr	r3, .L57
 825 000a 7A68     		ldr	r2, [r7, #4]
 826 000c 0F21     		mov	r1, #15
 827 000e 0A40     		and	r2, r1
 828 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 829              		.loc 1 641 0
 830 0012 BD46     		mov	sp, r7
 831 0014 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 27


 832              		@ sp needed
 833 0016 80BD     		pop	{r7, pc}
 834              	.L58:
 835              		.align	2
 836              	.L57:
 837 0018 38023A40 		.word	1077543480
 838              		.cfi_endproc
 839              	.LFE13:
 840              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 841              		.section	.text.ADC_SetSatMask,"ax",%progbits
 842              		.align	2
 843              		.global	ADC_SetSatMask
 844              		.code	16
 845              		.thumb_func
 846              		.type	ADC_SetSatMask, %function
 847              	ADC_SetSatMask:
 848              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 849              		.loc 1 662 0
 850              		.cfi_startproc
 851 0000 80B5     		push	{r7, lr}
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 7, -8
 854              		.cfi_offset 14, -4
 855 0002 82B0     		sub	sp, sp, #8
 856              		.cfi_def_cfa_offset 16
 857 0004 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 859 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 860              		.loc 1 663 0
 861 0008 034B     		ldr	r3, .L60
 862 000a 7A68     		ldr	r2, [r7, #4]
 863 000c 0F21     		mov	r1, #15
 864 000e 0A40     		and	r2, r1
 865 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 28


 866              		.loc 1 664 0
 867 0012 BD46     		mov	sp, r7
 868 0014 02B0     		add	sp, sp, #8
 869              		@ sp needed
 870 0016 80BD     		pop	{r7, pc}
 871              	.L61:
 872              		.align	2
 873              	.L60:
 874 0018 28023A40 		.word	1077543464
 875              		.cfi_endproc
 876              	.LFE14:
 877              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 878              		.section	.text.ADC_SetOffset,"ax",%progbits
 879              		.align	2
 880              		.global	ADC_SetOffset
 881              		.code	16
 882              		.thumb_func
 883              		.type	ADC_SetOffset, %function
 884              	ADC_SetOffset:
 885              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 886              		.loc 1 690 0
 887              		.cfi_startproc
 888 0000 80B5     		push	{r7, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 82B0     		sub	sp, sp, #8
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 29


 897 0008 0A1C     		mov	r2, r1
 898 000a BB1C     		add	r3, r7, #2
 899 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 900              		.loc 1 692 0
 901 000e 7B68     		ldr	r3, [r7, #4]
 902 0010 032B     		cmp	r3, #3
 903 0012 02D9     		bls	.L63
 904              		.loc 1 692 0 is_stmt 0 discriminator 1
 905 0014 0020     		mov	r0, #0
 906 0016 FFF7FEFF 		bl	CyHalt
 907              	.L63:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 908              		.loc 1 694 0 is_stmt 1
 909 001a 044B     		ldr	r3, .L64
 910 001c 7A68     		ldr	r2, [r7, #4]
 911 001e 5200     		lsl	r2, r2, #1
 912 0020 B91C     		add	r1, r7, #2
 913 0022 0988     		ldrh	r1, [r1]
 914 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 915              		.loc 1 695 0
 916 0026 BD46     		mov	sp, r7
 917 0028 02B0     		add	sp, sp, #8
 918              		@ sp needed
 919 002a 80BD     		pop	{r7, pc}
 920              	.L65:
 921              		.align	2
 922              	.L64:
 923 002c 00000000 		.word	ADC_offset
 924              		.cfi_endproc
 925              	.LFE15:
 926              		.size	ADC_SetOffset, .-ADC_SetOffset
 927              		.section	.text.ADC_SetGain,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_SetGain
 930              		.code	16
 931              		.thumb_func
 932              		.type	ADC_SetGain, %function
 933              	ADC_SetGain:
 934              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 30


 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 935              		.loc 1 724 0
 936              		.cfi_startproc
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 82B0     		sub	sp, sp, #8
 942              		.cfi_def_cfa_offset 16
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 7860     		str	r0, [r7, #4]
 946 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 947              		.loc 1 726 0
 948 000a 7B68     		ldr	r3, [r7, #4]
 949 000c 032B     		cmp	r3, #3
 950 000e 02D9     		bls	.L67
 951              		.loc 1 726 0 is_stmt 0 discriminator 1
 952 0010 0020     		mov	r0, #0
 953 0012 FFF7FEFF 		bl	CyHalt
 954              	.L67:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 955              		.loc 1 728 0 is_stmt 1
 956 0016 044B     		ldr	r3, .L68
 957 0018 7A68     		ldr	r2, [r7, #4]
 958 001a 9200     		lsl	r2, r2, #2
 959 001c 3968     		ldr	r1, [r7]
 960 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 961              		.loc 1 729 0
 962 0020 BD46     		mov	sp, r7
 963 0022 02B0     		add	sp, sp, #8
 964              		@ sp needed
 965 0024 80BD     		pop	{r7, pc}
 966              	.L69:
 967 0026 C046     		.align	2
 968              	.L68:
 969 0028 00000000 		.word	ADC_countsPer10Volt
 970              		.cfi_endproc
 971              	.LFE16:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 31


 972              		.size	ADC_SetGain, .-ADC_SetGain
 973              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 974              		.align	2
 975              		.global	ADC_CountsTo_mVolts
 976              		.code	16
 977              		.thumb_func
 978              		.type	ADC_CountsTo_mVolts, %function
 979              	ADC_CountsTo_mVolts:
 980              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 981              		.loc 1 757 0
 982              		.cfi_startproc
 983 0000 80B5     		push	{r7, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 0002 84B0     		sub	sp, sp, #16
 988              		.cfi_def_cfa_offset 24
 989 0004 00AF     		add	r7, sp, #0
 990              		.cfi_def_cfa_register 7
 991 0006 7860     		str	r0, [r7, #4]
 992 0008 0A1C     		mov	r2, r1
 993 000a BB1C     		add	r3, r7, #2
 994 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 995              		.loc 1 761 0
 996 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 32


 997 0010 032B     		cmp	r3, #3
 998 0012 02D9     		bls	.L71
 999              		.loc 1 761 0 is_stmt 0 discriminator 1
 1000 0014 0020     		mov	r0, #0
 1001 0016 FFF7FEFF 		bl	CyHalt
 1002              	.L71:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1003              		.loc 1 772 0 is_stmt 1
 1004 001a 1F4B     		ldr	r3, .L77
 1005 001c 7A68     		ldr	r2, [r7, #4]
 1006 001e 5200     		lsl	r2, r2, #1
 1007 0020 D35A     		ldrh	r3, [r2, r3]
 1008 0022 99B2     		uxth	r1, r3
 1009 0024 BB1C     		add	r3, r7, #2
 1010 0026 1A88     		ldrh	r2, [r3]
 1011 0028 8BB2     		uxth	r3, r1
 1012 002a D31A     		sub	r3, r2, r3
 1013 002c 9AB2     		uxth	r2, r3
 1014 002e BB1C     		add	r3, r7, #2
 1015 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1016              		.loc 1 774 0
 1017 0032 BB1C     		add	r3, r7, #2
 1018 0034 0022     		mov	r2, #0
 1019 0036 9B5E     		ldrsh	r3, [r3, r2]
 1020 0038 184A     		ldr	r2, .L77+4
 1021 003a 5A43     		mul	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1022              		.loc 1 775 0
 1023 003c BB1C     		add	r3, r7, #2
 1024 003e 0021     		mov	r1, #0
 1025 0040 5B5E     		ldrsh	r3, [r3, r1]
 1026 0042 002B     		cmp	r3, #0
 1027 0044 08DD     		ble	.L72
 1028              		.loc 1 775 0 is_stmt 0 discriminator 1
 1029 0046 164B     		ldr	r3, .L77+8
 1030 0048 7968     		ldr	r1, [r7, #4]
 1031 004a 8900     		lsl	r1, r1, #2
 1032 004c CB58     		ldr	r3, [r1, r3]
 1033 004e 002B     		cmp	r3, #0
 1034 0050 00DA     		bge	.L73
 1035 0052 0133     		add	r3, r3, #1
 1036              	.L73:
 1037 0054 5B10     		asr	r3, r3, #1
 1038 0056 08E0     		b	.L74
 1039              	.L72:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 33


 1040              		.loc 1 775 0 discriminator 2
 1041 0058 114B     		ldr	r3, .L77+8
 1042 005a 7968     		ldr	r1, [r7, #4]
 1043 005c 8900     		lsl	r1, r1, #2
 1044 005e CB58     		ldr	r3, [r1, r3]
 1045 0060 002B     		cmp	r3, #0
 1046 0062 00DA     		bge	.L75
 1047 0064 0133     		add	r3, r3, #1
 1048              	.L75:
 1049 0066 5B10     		asr	r3, r3, #1
 1050 0068 5B42     		neg	r3, r3
 1051              	.L74:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1052              		.loc 1 774 0 is_stmt 1
 1053 006a D118     		add	r1, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1054              		.loc 1 776 0
 1055 006c 0C4B     		ldr	r3, .L77+8
 1056 006e 7A68     		ldr	r2, [r7, #4]
 1057 0070 9200     		lsl	r2, r2, #2
 1058 0072 D358     		ldr	r3, [r2, r3]
 1059 0074 081C     		mov	r0, r1
 1060 0076 191C     		mov	r1, r3
 1061 0078 FFF7FEFF 		bl	__aeabi_idiv
 1062 007c 031C     		mov	r3, r0
 1063 007e 1A1C     		mov	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1064              		.loc 1 774 0
 1065 0080 0E23     		mov	r3, #14
 1066 0082 FB18     		add	r3, r7, r3
 1067 0084 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1068              		.loc 1 778 0
 1069 0086 0E23     		mov	r3, #14
 1070 0088 FB18     		add	r3, r7, r3
 1071 008a 1B88     		ldrh	r3, [r3]
 1072 008c 1BB2     		sxth	r3, r3
 779:Generated_Source\PSoC4/ADC.c ****     }
 1073              		.loc 1 779 0
 1074 008e 181C     		mov	r0, r3
 1075 0090 BD46     		mov	sp, r7
 1076 0092 04B0     		add	sp, sp, #16
 1077              		@ sp needed
 1078 0094 80BD     		pop	{r7, pc}
 1079              	.L78:
 1080 0096 C046     		.align	2
 1081              	.L77:
 1082 0098 00000000 		.word	ADC_offset
 1083 009c 10270000 		.word	10000
 1084 00a0 00000000 		.word	ADC_countsPer10Volt
 1085              		.cfi_endproc
 1086              	.LFE17:
 1087              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1088              		.global	__aeabi_lmul
 1089              		.global	__aeabi_ldivmod
 1090              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 34


 1091              		.align	2
 1092              		.global	ADC_CountsTo_uVolts
 1093              		.code	16
 1094              		.thumb_func
 1095              		.type	ADC_CountsTo_uVolts, %function
 1096              	ADC_CountsTo_uVolts:
 1097              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1098              		.loc 1 811 0
 1099              		.cfi_startproc
 1100 0000 B0B5     		push	{r4, r5, r7, lr}
 1101              		.cfi_def_cfa_offset 16
 1102              		.cfi_offset 4, -16
 1103              		.cfi_offset 5, -12
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 1106 0002 86B0     		sub	sp, sp, #24
 1107              		.cfi_def_cfa_offset 40
 1108 0004 00AF     		add	r7, sp, #0
 1109              		.cfi_def_cfa_register 7
 1110 0006 F860     		str	r0, [r7, #12]
 1111 0008 0A1C     		mov	r2, r1
 1112 000a 0A23     		mov	r3, #10
 1113 000c FB18     		add	r3, r7, r3
 1114 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 35


 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1115              		.loc 1 815 0
 1116 0010 FB68     		ldr	r3, [r7, #12]
 1117 0012 032B     		cmp	r3, #3
 1118 0014 02D9     		bls	.L80
 1119              		.loc 1 815 0 is_stmt 0 discriminator 1
 1120 0016 0020     		mov	r0, #0
 1121 0018 FFF7FEFF 		bl	CyHalt
 1122              	.L80:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1123              		.loc 1 826 0 is_stmt 1
 1124 001c 194B     		ldr	r3, .L82
 1125 001e FA68     		ldr	r2, [r7, #12]
 1126 0020 5200     		lsl	r2, r2, #1
 1127 0022 D35A     		ldrh	r3, [r2, r3]
 1128 0024 99B2     		uxth	r1, r3
 1129 0026 0A23     		mov	r3, #10
 1130 0028 FB18     		add	r3, r7, r3
 1131 002a 1A88     		ldrh	r2, [r3]
 1132 002c 8BB2     		uxth	r3, r1
 1133 002e D31A     		sub	r3, r2, r3
 1134 0030 9AB2     		uxth	r2, r3
 1135 0032 0A23     		mov	r3, #10
 1136 0034 FB18     		add	r3, r7, r3
 1137 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1138              		.loc 1 828 0
 1139 0038 0A23     		mov	r3, #10
 1140 003a FB18     		add	r3, r7, r3
 1141 003c 1B88     		ldrh	r3, [r3]
 1142 003e 1BB2     		sxth	r3, r3
 1143 0040 3B60     		str	r3, [r7]
 1144 0042 DB17     		asr	r3, r3, #31
 1145 0044 7B60     		str	r3, [r7, #4]
 1146 0046 3868     		ldr	r0, [r7]
 1147 0048 7968     		ldr	r1, [r7, #4]
 1148 004a 0F4A     		ldr	r2, .L82+4
 1149 004c 0023     		mov	r3, #0
 1150 004e FFF7FEFF 		bl	__aeabi_lmul
 1151 0052 021C     		mov	r2, r0
 1152 0054 0B1C     		mov	r3, r1
 1153 0056 101C     		mov	r0, r2
 1154 0058 191C     		mov	r1, r3
 1155 005a 0C4B     		ldr	r3, .L82+8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 36


 1156 005c FA68     		ldr	r2, [r7, #12]
 1157 005e 9200     		lsl	r2, r2, #2
 1158 0060 D358     		ldr	r3, [r2, r3]
 1159 0062 1C1C     		mov	r4, r3
 1160 0064 DB17     		asr	r3, r3, #31
 1161 0066 1D1C     		mov	r5, r3
 1162 0068 221C     		mov	r2, r4
 1163 006a 2B1C     		mov	r3, r5
 1164 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1165 0070 031C     		mov	r3, r0
 1166 0072 0C1C     		mov	r4, r1
 1167 0074 3B61     		str	r3, [r7, #16]
 1168 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1169              		.loc 1 830 0
 1170 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1171              		.loc 1 831 0
 1172 007a 181C     		mov	r0, r3
 1173 007c BD46     		mov	sp, r7
 1174 007e 06B0     		add	sp, sp, #24
 1175              		@ sp needed
 1176 0080 B0BD     		pop	{r4, r5, r7, pc}
 1177              	.L83:
 1178 0082 C046     		.align	2
 1179              	.L82:
 1180 0084 00000000 		.word	ADC_offset
 1181 0088 80969800 		.word	10000000
 1182 008c 00000000 		.word	ADC_countsPer10Volt
 1183              		.cfi_endproc
 1184              	.LFE18:
 1185              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1186              		.global	__aeabi_i2f
 1187              		.global	__aeabi_fmul
 1188              		.global	__aeabi_fdiv
 1189              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1190              		.align	2
 1191              		.global	ADC_CountsTo_Volts
 1192              		.code	16
 1193              		.thumb_func
 1194              		.type	ADC_CountsTo_Volts, %function
 1195              	ADC_CountsTo_Volts:
 1196              	.LFB19:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 37


 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1197              		.loc 1 856 0
 1198              		.cfi_startproc
 1199 0000 90B5     		push	{r4, r7, lr}
 1200              		.cfi_def_cfa_offset 12
 1201              		.cfi_offset 4, -12
 1202              		.cfi_offset 7, -8
 1203              		.cfi_offset 14, -4
 1204 0002 85B0     		sub	sp, sp, #20
 1205              		.cfi_def_cfa_offset 32
 1206 0004 00AF     		add	r7, sp, #0
 1207              		.cfi_def_cfa_register 7
 1208 0006 7860     		str	r0, [r7, #4]
 1209 0008 0A1C     		mov	r2, r1
 1210 000a BB1C     		add	r3, r7, #2
 1211 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1212              		.loc 1 860 0
 1213 000e 7B68     		ldr	r3, [r7, #4]
 1214 0010 032B     		cmp	r3, #3
 1215 0012 02D9     		bls	.L85
 1216              		.loc 1 860 0 is_stmt 0 discriminator 1
 1217 0014 0020     		mov	r0, #0
 1218 0016 FFF7FEFF 		bl	CyHalt
 1219              	.L85:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1220              		.loc 1 871 0 is_stmt 1
 1221 001a 164B     		ldr	r3, .L87
 1222 001c 7A68     		ldr	r2, [r7, #4]
 1223 001e 5200     		lsl	r2, r2, #1
 1224 0020 D35A     		ldrh	r3, [r2, r3]
 1225 0022 99B2     		uxth	r1, r3
 1226 0024 BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 38


 1227 0026 1A88     		ldrh	r2, [r3]
 1228 0028 8BB2     		uxth	r3, r1
 1229 002a D31A     		sub	r3, r2, r3
 1230 002c 9AB2     		uxth	r2, r3
 1231 002e BB1C     		add	r3, r7, #2
 1232 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1233              		.loc 1 873 0
 1234 0032 BB1C     		add	r3, r7, #2
 1235 0034 0022     		mov	r2, #0
 1236 0036 9B5E     		ldrsh	r3, [r3, r2]
 1237 0038 181C     		mov	r0, r3
 1238 003a FFF7FEFF 		bl	__aeabi_i2f
 1239 003e 031C     		add	r3, r0, #0
 1240 0040 181C     		add	r0, r3, #0
 1241 0042 0D49     		ldr	r1, .L87+4
 1242 0044 FFF7FEFF 		bl	__aeabi_fmul
 1243 0048 031C     		add	r3, r0, #0
 1244 004a 1C1C     		add	r4, r3, #0
 1245 004c 0B4B     		ldr	r3, .L87+8
 1246 004e 7A68     		ldr	r2, [r7, #4]
 1247 0050 9200     		lsl	r2, r2, #2
 1248 0052 D358     		ldr	r3, [r2, r3]
 1249 0054 181C     		mov	r0, r3
 1250 0056 FFF7FEFF 		bl	__aeabi_i2f
 1251 005a 031C     		add	r3, r0, #0
 1252 005c 201C     		add	r0, r4, #0
 1253 005e 191C     		add	r1, r3, #0
 1254 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1255 0064 031C     		add	r3, r0, #0
 1256 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1257              		.loc 1 875 0
 1258 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1259              		.loc 1 876 0
 1260 006a 181C     		add	r0, r3, #0
 1261 006c BD46     		mov	sp, r7
 1262 006e 05B0     		add	sp, sp, #20
 1263              		@ sp needed
 1264 0070 90BD     		pop	{r4, r7, pc}
 1265              	.L88:
 1266 0072 C046     		.align	2
 1267              	.L87:
 1268 0074 00000000 		.word	ADC_offset
 1269 0078 00002041 		.word	1092616192
 1270 007c 00000000 		.word	ADC_countsPer10Volt
 1271              		.cfi_endproc
 1272              	.LFE19:
 1273              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1274              		.section	.rodata
 1275              		.align	2
 1276              		.type	ADC_InputsPlacement.4788, %object
 1277              		.size	ADC_InputsPlacement.4788, 4
 1278              	ADC_InputsPlacement.4788:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 39


 1279 0010 02       		.byte	2
 1280 0011 03       		.byte	3
 1281 0012 06       		.byte	6
 1282 0013 07       		.byte	7
 1283              		.text
 1284              	.Letext0:
 1285              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1286              		.section	.debug_info,"",%progbits
 1287              	.Ldebug_info0:
 1288 0000 9D040000 		.4byte	0x49d
 1289 0004 0400     		.2byte	0x4
 1290 0006 00000000 		.4byte	.Ldebug_abbrev0
 1291 000a 04       		.byte	0x4
 1292 000b 01       		.uleb128 0x1
 1293 000c 1F030000 		.4byte	.LASF60
 1294 0010 01       		.byte	0x1
 1295 0011 43020000 		.4byte	.LASF61
 1296 0015 07000000 		.4byte	.LASF62
 1297 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1298 001d 00000000 		.4byte	0
 1299 0021 00000000 		.4byte	.Ldebug_line0
 1300 0025 02       		.uleb128 0x2
 1301 0026 01       		.byte	0x1
 1302 0027 06       		.byte	0x6
 1303 0028 E7000000 		.4byte	.LASF0
 1304 002c 02       		.uleb128 0x2
 1305 002d 01       		.byte	0x1
 1306 002e 08       		.byte	0x8
 1307 002f A0020000 		.4byte	.LASF1
 1308 0033 02       		.uleb128 0x2
 1309 0034 02       		.byte	0x2
 1310 0035 05       		.byte	0x5
 1311 0036 B9020000 		.4byte	.LASF2
 1312 003a 02       		.uleb128 0x2
 1313 003b 02       		.byte	0x2
 1314 003c 07       		.byte	0x7
 1315 003d BE010000 		.4byte	.LASF3
 1316 0041 02       		.uleb128 0x2
 1317 0042 04       		.byte	0x4
 1318 0043 05       		.byte	0x5
 1319 0044 0A010000 		.4byte	.LASF4
 1320 0048 02       		.uleb128 0x2
 1321 0049 04       		.byte	0x4
 1322 004a 07       		.byte	0x7
 1323 004b 8D010000 		.4byte	.LASF5
 1324 004f 02       		.uleb128 0x2
 1325 0050 08       		.byte	0x8
 1326 0051 05       		.byte	0x5
 1327 0052 D9000000 		.4byte	.LASF6
 1328 0056 02       		.uleb128 0x2
 1329 0057 08       		.byte	0x8
 1330 0058 07       		.byte	0x7
 1331 0059 9D000000 		.4byte	.LASF7
 1332 005d 03       		.uleb128 0x3
 1333 005e 04       		.byte	0x4
 1334 005f 05       		.byte	0x5
 1335 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 40


 1336 0064 02       		.uleb128 0x2
 1337 0065 04       		.byte	0x4
 1338 0066 07       		.byte	0x7
 1339 0067 79010000 		.4byte	.LASF8
 1340 006b 04       		.uleb128 0x4
 1341 006c 3B010000 		.4byte	.LASF9
 1342 0070 02       		.byte	0x2
 1343 0071 B901     		.2byte	0x1b9
 1344 0073 2C000000 		.4byte	0x2c
 1345 0077 04       		.uleb128 0x4
 1346 0078 00000000 		.4byte	.LASF10
 1347 007c 02       		.byte	0x2
 1348 007d BA01     		.2byte	0x1ba
 1349 007f 3A000000 		.4byte	0x3a
 1350 0083 04       		.uleb128 0x4
 1351 0084 48010000 		.4byte	.LASF11
 1352 0088 02       		.byte	0x2
 1353 0089 BB01     		.2byte	0x1bb
 1354 008b 48000000 		.4byte	0x48
 1355 008f 04       		.uleb128 0x4
 1356 0090 0B030000 		.4byte	.LASF12
 1357 0094 02       		.byte	0x2
 1358 0095 BD01     		.2byte	0x1bd
 1359 0097 33000000 		.4byte	0x33
 1360 009b 04       		.uleb128 0x4
 1361 009c FA000000 		.4byte	.LASF13
 1362 00a0 02       		.byte	0x2
 1363 00a1 BE01     		.2byte	0x1be
 1364 00a3 41000000 		.4byte	0x41
 1365 00a7 04       		.uleb128 0x4
 1366 00a8 EE010000 		.4byte	.LASF14
 1367 00ac 02       		.byte	0x2
 1368 00ad BF01     		.2byte	0x1bf
 1369 00af B3000000 		.4byte	0xb3
 1370 00b3 02       		.uleb128 0x2
 1371 00b4 04       		.byte	0x4
 1372 00b5 04       		.byte	0x4
 1373 00b6 6C020000 		.4byte	.LASF15
 1374 00ba 02       		.uleb128 0x2
 1375 00bb 08       		.byte	0x8
 1376 00bc 04       		.byte	0x4
 1377 00bd 41010000 		.4byte	.LASF16
 1378 00c1 04       		.uleb128 0x4
 1379 00c2 2D020000 		.4byte	.LASF17
 1380 00c6 02       		.byte	0x2
 1381 00c7 C401     		.2byte	0x1c4
 1382 00c9 4F000000 		.4byte	0x4f
 1383 00cd 02       		.uleb128 0x2
 1384 00ce 01       		.byte	0x1
 1385 00cf 08       		.byte	0x8
 1386 00d0 D7020000 		.4byte	.LASF18
 1387 00d4 04       		.uleb128 0x4
 1388 00d5 E8010000 		.4byte	.LASF19
 1389 00d9 02       		.byte	0x2
 1390 00da 6502     		.2byte	0x265
 1391 00dc E0000000 		.4byte	0xe0
 1392 00e0 05       		.uleb128 0x5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 41


 1393 00e1 83000000 		.4byte	0x83
 1394 00e5 02       		.uleb128 0x2
 1395 00e6 04       		.byte	0x4
 1396 00e7 07       		.byte	0x7
 1397 00e8 F6010000 		.4byte	.LASF20
 1398 00ec 06       		.uleb128 0x6
 1399 00ed 00010000 		.4byte	.LASF25
 1400 00f1 01       		.byte	0x1
 1401 00f2 3F       		.byte	0x3f
 1402 00f3 00000000 		.4byte	.LFB2
 1403 00f7 24000000 		.4byte	.LFE2-.LFB2
 1404 00fb 01       		.uleb128 0x1
 1405 00fc 9C       		.byte	0x9c
 1406 00fd 07       		.uleb128 0x7
 1407 00fe 94000000 		.4byte	.LASF36
 1408 0102 01       		.byte	0x1
 1409 0103 5E       		.byte	0x5e
 1410 0104 00000000 		.4byte	.LFB3
 1411 0108 18020000 		.4byte	.LFE3-.LFB3
 1412 010c 01       		.uleb128 0x1
 1413 010d 9C       		.byte	0x9c
 1414 010e 4E010000 		.4byte	0x14e
 1415 0112 08       		.uleb128 0x8
 1416 0113 CC020000 		.4byte	.LASF21
 1417 0117 01       		.byte	0x1
 1418 0118 60       		.byte	0x60
 1419 0119 83000000 		.4byte	0x83
 1420 011d 02       		.uleb128 0x2
 1421 011e 91       		.byte	0x91
 1422 011f 74       		.sleb128 -12
 1423 0120 08       		.uleb128 0x8
 1424 0121 B4010000 		.4byte	.LASF22
 1425 0125 01       		.byte	0x1
 1426 0126 61       		.byte	0x61
 1427 0127 83000000 		.4byte	0x83
 1428 012b 02       		.uleb128 0x2
 1429 012c 91       		.byte	0x91
 1430 012d 6C       		.sleb128 -20
 1431 012e 08       		.uleb128 0x8
 1432 012f 7A000000 		.4byte	.LASF23
 1433 0133 01       		.byte	0x1
 1434 0134 62       		.byte	0x62
 1435 0135 9B000000 		.4byte	0x9b
 1436 0139 02       		.uleb128 0x2
 1437 013a 91       		.byte	0x91
 1438 013b 70       		.sleb128 -16
 1439 013c 08       		.uleb128 0x8
 1440 013d B4000000 		.4byte	.LASF24
 1441 0141 01       		.byte	0x1
 1442 0142 65       		.byte	0x65
 1443 0143 5E010000 		.4byte	0x15e
 1444 0147 05       		.uleb128 0x5
 1445 0148 03       		.byte	0x3
 1446 0149 10000000 		.4byte	ADC_InputsPlacement.4788
 1447 014d 00       		.byte	0
 1448 014e 09       		.uleb128 0x9
 1449 014f 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 42


 1450 0153 5E010000 		.4byte	0x15e
 1451 0157 0A       		.uleb128 0xa
 1452 0158 E5000000 		.4byte	0xe5
 1453 015c 03       		.byte	0x3
 1454 015d 00       		.byte	0
 1455 015e 0B       		.uleb128 0xb
 1456 015f 4E010000 		.4byte	0x14e
 1457 0163 0C       		.uleb128 0xc
 1458 0164 00030000 		.4byte	.LASF26
 1459 0168 01       		.byte	0x1
 1460 0169 4A01     		.2byte	0x14a
 1461 016b 00000000 		.4byte	.LFB4
 1462 016f 38000000 		.4byte	.LFE4-.LFB4
 1463 0173 01       		.uleb128 0x1
 1464 0174 9C       		.byte	0x9c
 1465 0175 0D       		.uleb128 0xd
 1466 0176 C3020000 		.4byte	.LASF27
 1467 017a 01       		.byte	0x1
 1468 017b 6D01     		.2byte	0x16d
 1469 017d 00000000 		.4byte	.LFB5
 1470 0181 18000000 		.4byte	.LFE5-.LFB5
 1471 0185 01       		.uleb128 0x1
 1472 0186 9C       		.byte	0x9c
 1473 0187 0D       		.uleb128 0xd
 1474 0188 C8000000 		.4byte	.LASF28
 1475 018c 01       		.byte	0x1
 1476 018d 8701     		.2byte	0x187
 1477 018f 00000000 		.4byte	.LFB6
 1478 0193 1C000000 		.4byte	.LFE6-.LFB6
 1479 0197 01       		.uleb128 0x1
 1480 0198 9C       		.byte	0x9c
 1481 0199 0D       		.uleb128 0xd
 1482 019a D1010000 		.4byte	.LASF29
 1483 019e 01       		.byte	0x1
 1484 019f A001     		.2byte	0x1a0
 1485 01a1 00000000 		.4byte	.LFB7
 1486 01a5 1C000000 		.4byte	.LFE7-.LFB7
 1487 01a9 01       		.uleb128 0x1
 1488 01aa 9C       		.byte	0x9c
 1489 01ab 0E       		.uleb128 0xe
 1490 01ac 19020000 		.4byte	.LASF31
 1491 01b0 01       		.byte	0x1
 1492 01b1 C201     		.2byte	0x1c2
 1493 01b3 83000000 		.4byte	0x83
 1494 01b7 00000000 		.4byte	.LFB8
 1495 01bb 48000000 		.4byte	.LFE8-.LFB8
 1496 01bf 01       		.uleb128 0x1
 1497 01c0 9C       		.byte	0x9c
 1498 01c1 E4010000 		.4byte	0x1e4
 1499 01c5 0F       		.uleb128 0xf
 1500 01c6 60010000 		.4byte	.LASF33
 1501 01ca 01       		.byte	0x1
 1502 01cb C201     		.2byte	0x1c2
 1503 01cd 83000000 		.4byte	0x83
 1504 01d1 02       		.uleb128 0x2
 1505 01d2 91       		.byte	0x91
 1506 01d3 6C       		.sleb128 -20
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 43


 1507 01d4 10       		.uleb128 0x10
 1508 01d5 F3000000 		.4byte	.LASF30
 1509 01d9 01       		.byte	0x1
 1510 01da C401     		.2byte	0x1c4
 1511 01dc 83000000 		.4byte	0x83
 1512 01e0 02       		.uleb128 0x2
 1513 01e1 91       		.byte	0x91
 1514 01e2 74       		.sleb128 -12
 1515 01e3 00       		.byte	0
 1516 01e4 11       		.uleb128 0x11
 1517 01e5 B4030000 		.4byte	.LASF32
 1518 01e9 01       		.byte	0x1
 1519 01ea F801     		.2byte	0x1f8
 1520 01ec 8F000000 		.4byte	0x8f
 1521 01f0 00000000 		.4byte	.LFB9
 1522 01f4 44000000 		.4byte	.LFE9-.LFB9
 1523 01f8 01       		.uleb128 0x1
 1524 01f9 9C       		.byte	0x9c
 1525 01fa 1D020000 		.4byte	0x21d
 1526 01fe 0F       		.uleb128 0xf
 1527 01ff D2020000 		.4byte	.LASF34
 1528 0203 01       		.byte	0x1
 1529 0204 F801     		.2byte	0x1f8
 1530 0206 83000000 		.4byte	0x83
 1531 020a 02       		.uleb128 0x2
 1532 020b 91       		.byte	0x91
 1533 020c 6C       		.sleb128 -20
 1534 020d 10       		.uleb128 0x10
 1535 020e AD030000 		.4byte	.LASF35
 1536 0212 01       		.byte	0x1
 1537 0213 FA01     		.2byte	0x1fa
 1538 0215 83000000 		.4byte	0x83
 1539 0219 02       		.uleb128 0x2
 1540 021a 91       		.byte	0x91
 1541 021b 74       		.sleb128 -12
 1542 021c 00       		.byte	0
 1543 021d 12       		.uleb128 0x12
 1544 021e 33020000 		.4byte	.LASF37
 1545 0222 01       		.byte	0x1
 1546 0223 2502     		.2byte	0x225
 1547 0225 00000000 		.4byte	.LFB10
 1548 0229 1C000000 		.4byte	.LFE10-.LFB10
 1549 022d 01       		.uleb128 0x1
 1550 022e 9C       		.byte	0x9c
 1551 022f 43020000 		.4byte	0x243
 1552 0233 0F       		.uleb128 0xf
 1553 0234 4F010000 		.4byte	.LASF38
 1554 0238 01       		.byte	0x1
 1555 0239 2502     		.2byte	0x225
 1556 023b 83000000 		.4byte	0x83
 1557 023f 02       		.uleb128 0x2
 1558 0240 91       		.byte	0x91
 1559 0241 74       		.sleb128 -12
 1560 0242 00       		.byte	0
 1561 0243 12       		.uleb128 0x12
 1562 0244 90020000 		.4byte	.LASF39
 1563 0248 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 44


 1564 0249 5102     		.2byte	0x251
 1565 024b 00000000 		.4byte	.LFB11
 1566 024f 30000000 		.4byte	.LFE11-.LFB11
 1567 0253 01       		.uleb128 0x1
 1568 0254 9C       		.byte	0x9c
 1569 0255 69020000 		.4byte	0x269
 1570 0259 0F       		.uleb128 0xf
 1571 025a FF010000 		.4byte	.LASF40
 1572 025e 01       		.byte	0x1
 1573 025f 5102     		.2byte	0x251
 1574 0261 83000000 		.4byte	0x83
 1575 0265 02       		.uleb128 0x2
 1576 0266 91       		.byte	0x91
 1577 0267 74       		.sleb128 -12
 1578 0268 00       		.byte	0
 1579 0269 12       		.uleb128 0x12
 1580 026a 08020000 		.4byte	.LASF41
 1581 026e 01       		.byte	0x1
 1582 026f 6602     		.2byte	0x266
 1583 0271 00000000 		.4byte	.LFB12
 1584 0275 2C000000 		.4byte	.LFE12-.LFB12
 1585 0279 01       		.uleb128 0x1
 1586 027a 9C       		.byte	0x9c
 1587 027b 8F020000 		.4byte	0x28f
 1588 027f 0F       		.uleb128 0xf
 1589 0280 72020000 		.4byte	.LASF42
 1590 0284 01       		.byte	0x1
 1591 0285 6602     		.2byte	0x266
 1592 0287 83000000 		.4byte	0x83
 1593 028b 02       		.uleb128 0x2
 1594 028c 91       		.byte	0x91
 1595 028d 74       		.sleb128 -12
 1596 028e 00       		.byte	0
 1597 028f 12       		.uleb128 0x12
 1598 0290 68010000 		.4byte	.LASF43
 1599 0294 01       		.byte	0x1
 1600 0295 7E02     		.2byte	0x27e
 1601 0297 00000000 		.4byte	.LFB13
 1602 029b 1C000000 		.4byte	.LFE13-.LFB13
 1603 029f 01       		.uleb128 0x1
 1604 02a0 9C       		.byte	0x9c
 1605 02a1 B5020000 		.4byte	0x2b5
 1606 02a5 0F       		.uleb128 0xf
 1607 02a6 4F010000 		.4byte	.LASF38
 1608 02aa 01       		.byte	0x1
 1609 02ab 7E02     		.2byte	0x27e
 1610 02ad 83000000 		.4byte	0x83
 1611 02b1 02       		.uleb128 0x2
 1612 02b2 91       		.byte	0x91
 1613 02b3 74       		.sleb128 -12
 1614 02b4 00       		.byte	0
 1615 02b5 12       		.uleb128 0x12
 1616 02b6 9F010000 		.4byte	.LASF44
 1617 02ba 01       		.byte	0x1
 1618 02bb 9502     		.2byte	0x295
 1619 02bd 00000000 		.4byte	.LFB14
 1620 02c1 1C000000 		.4byte	.LFE14-.LFB14
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 45


 1621 02c5 01       		.uleb128 0x1
 1622 02c6 9C       		.byte	0x9c
 1623 02c7 DB020000 		.4byte	0x2db
 1624 02cb 0F       		.uleb128 0xf
 1625 02cc 4F010000 		.4byte	.LASF38
 1626 02d0 01       		.byte	0x1
 1627 02d1 9502     		.2byte	0x295
 1628 02d3 83000000 		.4byte	0x83
 1629 02d7 02       		.uleb128 0x2
 1630 02d8 91       		.byte	0x91
 1631 02d9 74       		.sleb128 -12
 1632 02da 00       		.byte	0
 1633 02db 13       		.uleb128 0x13
 1634 02dc 11030000 		.4byte	.LASF45
 1635 02e0 01       		.byte	0x1
 1636 02e1 B102     		.2byte	0x2b1
 1637 02e3 00000000 		.4byte	.LFB15
 1638 02e7 30000000 		.4byte	.LFE15-.LFB15
 1639 02eb 01       		.uleb128 0x1
 1640 02ec 9C       		.byte	0x9c
 1641 02ed 10030000 		.4byte	0x310
 1642 02f1 0F       		.uleb128 0xf
 1643 02f2 D2020000 		.4byte	.LASF34
 1644 02f6 01       		.byte	0x1
 1645 02f7 B102     		.2byte	0x2b1
 1646 02f9 83000000 		.4byte	0x83
 1647 02fd 02       		.uleb128 0x2
 1648 02fe 91       		.byte	0x91
 1649 02ff 74       		.sleb128 -12
 1650 0300 0F       		.uleb128 0xf
 1651 0301 EF020000 		.4byte	.LASF46
 1652 0305 01       		.byte	0x1
 1653 0306 B102     		.2byte	0x2b1
 1654 0308 8F000000 		.4byte	0x8f
 1655 030c 02       		.uleb128 0x2
 1656 030d 91       		.byte	0x91
 1657 030e 72       		.sleb128 -14
 1658 030f 00       		.byte	0
 1659 0310 13       		.uleb128 0x13
 1660 0311 60020000 		.4byte	.LASF47
 1661 0315 01       		.byte	0x1
 1662 0316 D302     		.2byte	0x2d3
 1663 0318 00000000 		.4byte	.LFB16
 1664 031c 2C000000 		.4byte	.LFE16-.LFB16
 1665 0320 01       		.uleb128 0x1
 1666 0321 9C       		.byte	0x9c
 1667 0322 45030000 		.4byte	0x345
 1668 0326 0F       		.uleb128 0xf
 1669 0327 D2020000 		.4byte	.LASF34
 1670 032b 01       		.byte	0x1
 1671 032c D302     		.2byte	0x2d3
 1672 032e 83000000 		.4byte	0x83
 1673 0332 02       		.uleb128 0x2
 1674 0333 91       		.byte	0x91
 1675 0334 74       		.sleb128 -12
 1676 0335 0F       		.uleb128 0xf
 1677 0336 72000000 		.4byte	.LASF48
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 46


 1678 033a 01       		.byte	0x1
 1679 033b D302     		.2byte	0x2d3
 1680 033d 9B000000 		.4byte	0x9b
 1681 0341 02       		.uleb128 0x2
 1682 0342 91       		.byte	0x91
 1683 0343 70       		.sleb128 -16
 1684 0344 00       		.byte	0
 1685 0345 11       		.uleb128 0x11
 1686 0346 7C020000 		.4byte	.LASF49
 1687 034a 01       		.byte	0x1
 1688 034b F402     		.2byte	0x2f4
 1689 034d 8F000000 		.4byte	0x8f
 1690 0351 00000000 		.4byte	.LFB17
 1691 0355 A4000000 		.4byte	.LFE17-.LFB17
 1692 0359 01       		.uleb128 0x1
 1693 035a 9C       		.byte	0x9c
 1694 035b 8D030000 		.4byte	0x38d
 1695 035f 0F       		.uleb128 0xf
 1696 0360 D2020000 		.4byte	.LASF34
 1697 0364 01       		.byte	0x1
 1698 0365 F402     		.2byte	0x2f4
 1699 0367 83000000 		.4byte	0x83
 1700 036b 02       		.uleb128 0x2
 1701 036c 91       		.byte	0x91
 1702 036d 6C       		.sleb128 -20
 1703 036e 0F       		.uleb128 0xf
 1704 036f F6020000 		.4byte	.LASF50
 1705 0373 01       		.byte	0x1
 1706 0374 F402     		.2byte	0x2f4
 1707 0376 8F000000 		.4byte	0x8f
 1708 037a 02       		.uleb128 0x2
 1709 037b 91       		.byte	0x91
 1710 037c 6A       		.sleb128 -22
 1711 037d 10       		.uleb128 0x10
 1712 037e E1010000 		.4byte	.LASF51
 1713 0382 01       		.byte	0x1
 1714 0383 F602     		.2byte	0x2f6
 1715 0385 8F000000 		.4byte	0x8f
 1716 0389 02       		.uleb128 0x2
 1717 038a 91       		.byte	0x91
 1718 038b 76       		.sleb128 -10
 1719 038c 00       		.byte	0
 1720 038d 11       		.uleb128 0x11
 1721 038e 13010000 		.4byte	.LASF52
 1722 0392 01       		.byte	0x1
 1723 0393 2A03     		.2byte	0x32a
 1724 0395 9B000000 		.4byte	0x9b
 1725 0399 00000000 		.4byte	.LFB18
 1726 039d 90000000 		.4byte	.LFE18-.LFB18
 1727 03a1 01       		.uleb128 0x1
 1728 03a2 9C       		.byte	0x9c
 1729 03a3 D5030000 		.4byte	0x3d5
 1730 03a7 0F       		.uleb128 0xf
 1731 03a8 D2020000 		.4byte	.LASF34
 1732 03ac 01       		.byte	0x1
 1733 03ad 2A03     		.2byte	0x32a
 1734 03af 83000000 		.4byte	0x83
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 47


 1735 03b3 02       		.uleb128 0x2
 1736 03b4 91       		.byte	0x91
 1737 03b5 64       		.sleb128 -28
 1738 03b6 0F       		.uleb128 0xf
 1739 03b7 F6020000 		.4byte	.LASF50
 1740 03bb 01       		.byte	0x1
 1741 03bc 2A03     		.2byte	0x32a
 1742 03be 8F000000 		.4byte	0x8f
 1743 03c2 02       		.uleb128 0x2
 1744 03c3 91       		.byte	0x91
 1745 03c4 62       		.sleb128 -30
 1746 03c5 10       		.uleb128 0x10
 1747 03c6 86010000 		.4byte	.LASF53
 1748 03ca 01       		.byte	0x1
 1749 03cb 2C03     		.2byte	0x32c
 1750 03cd C1000000 		.4byte	0xc1
 1751 03d1 02       		.uleb128 0x2
 1752 03d2 91       		.byte	0x91
 1753 03d3 68       		.sleb128 -24
 1754 03d4 00       		.byte	0
 1755 03d5 11       		.uleb128 0x11
 1756 03d6 81000000 		.4byte	.LASF54
 1757 03da 01       		.byte	0x1
 1758 03db 5703     		.2byte	0x357
 1759 03dd A7000000 		.4byte	0xa7
 1760 03e1 00000000 		.4byte	.LFB19
 1761 03e5 80000000 		.4byte	.LFE19-.LFB19
 1762 03e9 01       		.uleb128 0x1
 1763 03ea 9C       		.byte	0x9c
 1764 03eb 1D040000 		.4byte	0x41d
 1765 03ef 0F       		.uleb128 0xf
 1766 03f0 D2020000 		.4byte	.LASF34
 1767 03f4 01       		.byte	0x1
 1768 03f5 5703     		.2byte	0x357
 1769 03f7 83000000 		.4byte	0x83
 1770 03fb 02       		.uleb128 0x2
 1771 03fc 91       		.byte	0x91
 1772 03fd 64       		.sleb128 -28
 1773 03fe 0F       		.uleb128 0xf
 1774 03ff F6020000 		.4byte	.LASF50
 1775 0403 01       		.byte	0x1
 1776 0404 5703     		.2byte	0x357
 1777 0406 8F000000 		.4byte	0x8f
 1778 040a 02       		.uleb128 0x2
 1779 040b 91       		.byte	0x91
 1780 040c 62       		.sleb128 -30
 1781 040d 10       		.uleb128 0x10
 1782 040e AE010000 		.4byte	.LASF55
 1783 0412 01       		.byte	0x1
 1784 0413 5903     		.2byte	0x359
 1785 0415 A7000000 		.4byte	0xa7
 1786 0419 02       		.uleb128 0x2
 1787 041a 91       		.byte	0x91
 1788 041b 6C       		.sleb128 -20
 1789 041c 00       		.byte	0
 1790 041d 09       		.uleb128 0x9
 1791 041e 83000000 		.4byte	0x83
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 48


 1792 0422 2D040000 		.4byte	0x42d
 1793 0426 0A       		.uleb128 0xa
 1794 0427 E5000000 		.4byte	0xe5
 1795 042b 03       		.byte	0x3
 1796 042c 00       		.byte	0
 1797 042d 08       		.uleb128 0x8
 1798 042e DC020000 		.4byte	.LASF56
 1799 0432 01       		.byte	0x1
 1800 0433 21       		.byte	0x21
 1801 0434 3E040000 		.4byte	0x43e
 1802 0438 05       		.uleb128 0x5
 1803 0439 03       		.byte	0x3
 1804 043a 00000000 		.4byte	ADC_channelsConfig
 1805 043e 0B       		.uleb128 0xb
 1806 043f 1D040000 		.4byte	0x41d
 1807 0443 14       		.uleb128 0x14
 1808 0444 54010000 		.4byte	.LASF57
 1809 0448 01       		.byte	0x1
 1810 0449 18       		.byte	0x18
 1811 044a 6B000000 		.4byte	0x6b
 1812 044e 05       		.uleb128 0x5
 1813 044f 03       		.byte	0x3
 1814 0450 00000000 		.4byte	ADC_initVar
 1815 0454 09       		.uleb128 0x9
 1816 0455 8F000000 		.4byte	0x8f
 1817 0459 64040000 		.4byte	0x464
 1818 045d 0A       		.uleb128 0xa
 1819 045e E5000000 		.4byte	0xe5
 1820 0462 03       		.byte	0x3
 1821 0463 00       		.byte	0
 1822 0464 14       		.uleb128 0x14
 1823 0465 AE020000 		.4byte	.LASF58
 1824 0469 01       		.byte	0x1
 1825 046a 19       		.byte	0x19
 1826 046b 75040000 		.4byte	0x475
 1827 046f 05       		.uleb128 0x5
 1828 0470 03       		.byte	0x3
 1829 0471 00000000 		.4byte	ADC_offset
 1830 0475 05       		.uleb128 0x5
 1831 0476 54040000 		.4byte	0x454
 1832 047a 09       		.uleb128 0x9
 1833 047b 9B000000 		.4byte	0x9b
 1834 047f 8A040000 		.4byte	0x48a
 1835 0483 0A       		.uleb128 0xa
 1836 0484 E5000000 		.4byte	0xe5
 1837 0488 03       		.byte	0x3
 1838 0489 00       		.byte	0
 1839 048a 14       		.uleb128 0x14
 1840 048b 27010000 		.4byte	.LASF59
 1841 048f 01       		.byte	0x1
 1842 0490 1A       		.byte	0x1a
 1843 0491 9B040000 		.4byte	0x49b
 1844 0495 05       		.uleb128 0x5
 1845 0496 03       		.byte	0x3
 1846 0497 00000000 		.4byte	ADC_countsPer10Volt
 1847 049b 05       		.uleb128 0x5
 1848 049c 7A040000 		.4byte	0x47a
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 49


 1849 04a0 00       		.byte	0
 1850              		.section	.debug_abbrev,"",%progbits
 1851              	.Ldebug_abbrev0:
 1852 0000 01       		.uleb128 0x1
 1853 0001 11       		.uleb128 0x11
 1854 0002 01       		.byte	0x1
 1855 0003 25       		.uleb128 0x25
 1856 0004 0E       		.uleb128 0xe
 1857 0005 13       		.uleb128 0x13
 1858 0006 0B       		.uleb128 0xb
 1859 0007 03       		.uleb128 0x3
 1860 0008 0E       		.uleb128 0xe
 1861 0009 1B       		.uleb128 0x1b
 1862 000a 0E       		.uleb128 0xe
 1863 000b 55       		.uleb128 0x55
 1864 000c 17       		.uleb128 0x17
 1865 000d 11       		.uleb128 0x11
 1866 000e 01       		.uleb128 0x1
 1867 000f 10       		.uleb128 0x10
 1868 0010 17       		.uleb128 0x17
 1869 0011 00       		.byte	0
 1870 0012 00       		.byte	0
 1871 0013 02       		.uleb128 0x2
 1872 0014 24       		.uleb128 0x24
 1873 0015 00       		.byte	0
 1874 0016 0B       		.uleb128 0xb
 1875 0017 0B       		.uleb128 0xb
 1876 0018 3E       		.uleb128 0x3e
 1877 0019 0B       		.uleb128 0xb
 1878 001a 03       		.uleb128 0x3
 1879 001b 0E       		.uleb128 0xe
 1880 001c 00       		.byte	0
 1881 001d 00       		.byte	0
 1882 001e 03       		.uleb128 0x3
 1883 001f 24       		.uleb128 0x24
 1884 0020 00       		.byte	0
 1885 0021 0B       		.uleb128 0xb
 1886 0022 0B       		.uleb128 0xb
 1887 0023 3E       		.uleb128 0x3e
 1888 0024 0B       		.uleb128 0xb
 1889 0025 03       		.uleb128 0x3
 1890 0026 08       		.uleb128 0x8
 1891 0027 00       		.byte	0
 1892 0028 00       		.byte	0
 1893 0029 04       		.uleb128 0x4
 1894 002a 16       		.uleb128 0x16
 1895 002b 00       		.byte	0
 1896 002c 03       		.uleb128 0x3
 1897 002d 0E       		.uleb128 0xe
 1898 002e 3A       		.uleb128 0x3a
 1899 002f 0B       		.uleb128 0xb
 1900 0030 3B       		.uleb128 0x3b
 1901 0031 05       		.uleb128 0x5
 1902 0032 49       		.uleb128 0x49
 1903 0033 13       		.uleb128 0x13
 1904 0034 00       		.byte	0
 1905 0035 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 50


 1906 0036 05       		.uleb128 0x5
 1907 0037 35       		.uleb128 0x35
 1908 0038 00       		.byte	0
 1909 0039 49       		.uleb128 0x49
 1910 003a 13       		.uleb128 0x13
 1911 003b 00       		.byte	0
 1912 003c 00       		.byte	0
 1913 003d 06       		.uleb128 0x6
 1914 003e 2E       		.uleb128 0x2e
 1915 003f 00       		.byte	0
 1916 0040 3F       		.uleb128 0x3f
 1917 0041 19       		.uleb128 0x19
 1918 0042 03       		.uleb128 0x3
 1919 0043 0E       		.uleb128 0xe
 1920 0044 3A       		.uleb128 0x3a
 1921 0045 0B       		.uleb128 0xb
 1922 0046 3B       		.uleb128 0x3b
 1923 0047 0B       		.uleb128 0xb
 1924 0048 27       		.uleb128 0x27
 1925 0049 19       		.uleb128 0x19
 1926 004a 11       		.uleb128 0x11
 1927 004b 01       		.uleb128 0x1
 1928 004c 12       		.uleb128 0x12
 1929 004d 06       		.uleb128 0x6
 1930 004e 40       		.uleb128 0x40
 1931 004f 18       		.uleb128 0x18
 1932 0050 9642     		.uleb128 0x2116
 1933 0052 19       		.uleb128 0x19
 1934 0053 00       		.byte	0
 1935 0054 00       		.byte	0
 1936 0055 07       		.uleb128 0x7
 1937 0056 2E       		.uleb128 0x2e
 1938 0057 01       		.byte	0x1
 1939 0058 3F       		.uleb128 0x3f
 1940 0059 19       		.uleb128 0x19
 1941 005a 03       		.uleb128 0x3
 1942 005b 0E       		.uleb128 0xe
 1943 005c 3A       		.uleb128 0x3a
 1944 005d 0B       		.uleb128 0xb
 1945 005e 3B       		.uleb128 0x3b
 1946 005f 0B       		.uleb128 0xb
 1947 0060 27       		.uleb128 0x27
 1948 0061 19       		.uleb128 0x19
 1949 0062 11       		.uleb128 0x11
 1950 0063 01       		.uleb128 0x1
 1951 0064 12       		.uleb128 0x12
 1952 0065 06       		.uleb128 0x6
 1953 0066 40       		.uleb128 0x40
 1954 0067 18       		.uleb128 0x18
 1955 0068 9642     		.uleb128 0x2116
 1956 006a 19       		.uleb128 0x19
 1957 006b 01       		.uleb128 0x1
 1958 006c 13       		.uleb128 0x13
 1959 006d 00       		.byte	0
 1960 006e 00       		.byte	0
 1961 006f 08       		.uleb128 0x8
 1962 0070 34       		.uleb128 0x34
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 51


 1963 0071 00       		.byte	0
 1964 0072 03       		.uleb128 0x3
 1965 0073 0E       		.uleb128 0xe
 1966 0074 3A       		.uleb128 0x3a
 1967 0075 0B       		.uleb128 0xb
 1968 0076 3B       		.uleb128 0x3b
 1969 0077 0B       		.uleb128 0xb
 1970 0078 49       		.uleb128 0x49
 1971 0079 13       		.uleb128 0x13
 1972 007a 02       		.uleb128 0x2
 1973 007b 18       		.uleb128 0x18
 1974 007c 00       		.byte	0
 1975 007d 00       		.byte	0
 1976 007e 09       		.uleb128 0x9
 1977 007f 01       		.uleb128 0x1
 1978 0080 01       		.byte	0x1
 1979 0081 49       		.uleb128 0x49
 1980 0082 13       		.uleb128 0x13
 1981 0083 01       		.uleb128 0x1
 1982 0084 13       		.uleb128 0x13
 1983 0085 00       		.byte	0
 1984 0086 00       		.byte	0
 1985 0087 0A       		.uleb128 0xa
 1986 0088 21       		.uleb128 0x21
 1987 0089 00       		.byte	0
 1988 008a 49       		.uleb128 0x49
 1989 008b 13       		.uleb128 0x13
 1990 008c 2F       		.uleb128 0x2f
 1991 008d 0B       		.uleb128 0xb
 1992 008e 00       		.byte	0
 1993 008f 00       		.byte	0
 1994 0090 0B       		.uleb128 0xb
 1995 0091 26       		.uleb128 0x26
 1996 0092 00       		.byte	0
 1997 0093 49       		.uleb128 0x49
 1998 0094 13       		.uleb128 0x13
 1999 0095 00       		.byte	0
 2000 0096 00       		.byte	0
 2001 0097 0C       		.uleb128 0xc
 2002 0098 2E       		.uleb128 0x2e
 2003 0099 00       		.byte	0
 2004 009a 3F       		.uleb128 0x3f
 2005 009b 19       		.uleb128 0x19
 2006 009c 03       		.uleb128 0x3
 2007 009d 0E       		.uleb128 0xe
 2008 009e 3A       		.uleb128 0x3a
 2009 009f 0B       		.uleb128 0xb
 2010 00a0 3B       		.uleb128 0x3b
 2011 00a1 05       		.uleb128 0x5
 2012 00a2 27       		.uleb128 0x27
 2013 00a3 19       		.uleb128 0x19
 2014 00a4 11       		.uleb128 0x11
 2015 00a5 01       		.uleb128 0x1
 2016 00a6 12       		.uleb128 0x12
 2017 00a7 06       		.uleb128 0x6
 2018 00a8 40       		.uleb128 0x40
 2019 00a9 18       		.uleb128 0x18
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 52


 2020 00aa 9642     		.uleb128 0x2116
 2021 00ac 19       		.uleb128 0x19
 2022 00ad 00       		.byte	0
 2023 00ae 00       		.byte	0
 2024 00af 0D       		.uleb128 0xd
 2025 00b0 2E       		.uleb128 0x2e
 2026 00b1 00       		.byte	0
 2027 00b2 3F       		.uleb128 0x3f
 2028 00b3 19       		.uleb128 0x19
 2029 00b4 03       		.uleb128 0x3
 2030 00b5 0E       		.uleb128 0xe
 2031 00b6 3A       		.uleb128 0x3a
 2032 00b7 0B       		.uleb128 0xb
 2033 00b8 3B       		.uleb128 0x3b
 2034 00b9 05       		.uleb128 0x5
 2035 00ba 27       		.uleb128 0x27
 2036 00bb 19       		.uleb128 0x19
 2037 00bc 11       		.uleb128 0x11
 2038 00bd 01       		.uleb128 0x1
 2039 00be 12       		.uleb128 0x12
 2040 00bf 06       		.uleb128 0x6
 2041 00c0 40       		.uleb128 0x40
 2042 00c1 18       		.uleb128 0x18
 2043 00c2 9742     		.uleb128 0x2117
 2044 00c4 19       		.uleb128 0x19
 2045 00c5 00       		.byte	0
 2046 00c6 00       		.byte	0
 2047 00c7 0E       		.uleb128 0xe
 2048 00c8 2E       		.uleb128 0x2e
 2049 00c9 01       		.byte	0x1
 2050 00ca 3F       		.uleb128 0x3f
 2051 00cb 19       		.uleb128 0x19
 2052 00cc 03       		.uleb128 0x3
 2053 00cd 0E       		.uleb128 0xe
 2054 00ce 3A       		.uleb128 0x3a
 2055 00cf 0B       		.uleb128 0xb
 2056 00d0 3B       		.uleb128 0x3b
 2057 00d1 05       		.uleb128 0x5
 2058 00d2 27       		.uleb128 0x27
 2059 00d3 19       		.uleb128 0x19
 2060 00d4 49       		.uleb128 0x49
 2061 00d5 13       		.uleb128 0x13
 2062 00d6 11       		.uleb128 0x11
 2063 00d7 01       		.uleb128 0x1
 2064 00d8 12       		.uleb128 0x12
 2065 00d9 06       		.uleb128 0x6
 2066 00da 40       		.uleb128 0x40
 2067 00db 18       		.uleb128 0x18
 2068 00dc 9742     		.uleb128 0x2117
 2069 00de 19       		.uleb128 0x19
 2070 00df 01       		.uleb128 0x1
 2071 00e0 13       		.uleb128 0x13
 2072 00e1 00       		.byte	0
 2073 00e2 00       		.byte	0
 2074 00e3 0F       		.uleb128 0xf
 2075 00e4 05       		.uleb128 0x5
 2076 00e5 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 53


 2077 00e6 03       		.uleb128 0x3
 2078 00e7 0E       		.uleb128 0xe
 2079 00e8 3A       		.uleb128 0x3a
 2080 00e9 0B       		.uleb128 0xb
 2081 00ea 3B       		.uleb128 0x3b
 2082 00eb 05       		.uleb128 0x5
 2083 00ec 49       		.uleb128 0x49
 2084 00ed 13       		.uleb128 0x13
 2085 00ee 02       		.uleb128 0x2
 2086 00ef 18       		.uleb128 0x18
 2087 00f0 00       		.byte	0
 2088 00f1 00       		.byte	0
 2089 00f2 10       		.uleb128 0x10
 2090 00f3 34       		.uleb128 0x34
 2091 00f4 00       		.byte	0
 2092 00f5 03       		.uleb128 0x3
 2093 00f6 0E       		.uleb128 0xe
 2094 00f7 3A       		.uleb128 0x3a
 2095 00f8 0B       		.uleb128 0xb
 2096 00f9 3B       		.uleb128 0x3b
 2097 00fa 05       		.uleb128 0x5
 2098 00fb 49       		.uleb128 0x49
 2099 00fc 13       		.uleb128 0x13
 2100 00fd 02       		.uleb128 0x2
 2101 00fe 18       		.uleb128 0x18
 2102 00ff 00       		.byte	0
 2103 0100 00       		.byte	0
 2104 0101 11       		.uleb128 0x11
 2105 0102 2E       		.uleb128 0x2e
 2106 0103 01       		.byte	0x1
 2107 0104 3F       		.uleb128 0x3f
 2108 0105 19       		.uleb128 0x19
 2109 0106 03       		.uleb128 0x3
 2110 0107 0E       		.uleb128 0xe
 2111 0108 3A       		.uleb128 0x3a
 2112 0109 0B       		.uleb128 0xb
 2113 010a 3B       		.uleb128 0x3b
 2114 010b 05       		.uleb128 0x5
 2115 010c 27       		.uleb128 0x27
 2116 010d 19       		.uleb128 0x19
 2117 010e 49       		.uleb128 0x49
 2118 010f 13       		.uleb128 0x13
 2119 0110 11       		.uleb128 0x11
 2120 0111 01       		.uleb128 0x1
 2121 0112 12       		.uleb128 0x12
 2122 0113 06       		.uleb128 0x6
 2123 0114 40       		.uleb128 0x40
 2124 0115 18       		.uleb128 0x18
 2125 0116 9642     		.uleb128 0x2116
 2126 0118 19       		.uleb128 0x19
 2127 0119 01       		.uleb128 0x1
 2128 011a 13       		.uleb128 0x13
 2129 011b 00       		.byte	0
 2130 011c 00       		.byte	0
 2131 011d 12       		.uleb128 0x12
 2132 011e 2E       		.uleb128 0x2e
 2133 011f 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 54


 2134 0120 3F       		.uleb128 0x3f
 2135 0121 19       		.uleb128 0x19
 2136 0122 03       		.uleb128 0x3
 2137 0123 0E       		.uleb128 0xe
 2138 0124 3A       		.uleb128 0x3a
 2139 0125 0B       		.uleb128 0xb
 2140 0126 3B       		.uleb128 0x3b
 2141 0127 05       		.uleb128 0x5
 2142 0128 27       		.uleb128 0x27
 2143 0129 19       		.uleb128 0x19
 2144 012a 11       		.uleb128 0x11
 2145 012b 01       		.uleb128 0x1
 2146 012c 12       		.uleb128 0x12
 2147 012d 06       		.uleb128 0x6
 2148 012e 40       		.uleb128 0x40
 2149 012f 18       		.uleb128 0x18
 2150 0130 9742     		.uleb128 0x2117
 2151 0132 19       		.uleb128 0x19
 2152 0133 01       		.uleb128 0x1
 2153 0134 13       		.uleb128 0x13
 2154 0135 00       		.byte	0
 2155 0136 00       		.byte	0
 2156 0137 13       		.uleb128 0x13
 2157 0138 2E       		.uleb128 0x2e
 2158 0139 01       		.byte	0x1
 2159 013a 3F       		.uleb128 0x3f
 2160 013b 19       		.uleb128 0x19
 2161 013c 03       		.uleb128 0x3
 2162 013d 0E       		.uleb128 0xe
 2163 013e 3A       		.uleb128 0x3a
 2164 013f 0B       		.uleb128 0xb
 2165 0140 3B       		.uleb128 0x3b
 2166 0141 05       		.uleb128 0x5
 2167 0142 27       		.uleb128 0x27
 2168 0143 19       		.uleb128 0x19
 2169 0144 11       		.uleb128 0x11
 2170 0145 01       		.uleb128 0x1
 2171 0146 12       		.uleb128 0x12
 2172 0147 06       		.uleb128 0x6
 2173 0148 40       		.uleb128 0x40
 2174 0149 18       		.uleb128 0x18
 2175 014a 9642     		.uleb128 0x2116
 2176 014c 19       		.uleb128 0x19
 2177 014d 01       		.uleb128 0x1
 2178 014e 13       		.uleb128 0x13
 2179 014f 00       		.byte	0
 2180 0150 00       		.byte	0
 2181 0151 14       		.uleb128 0x14
 2182 0152 34       		.uleb128 0x34
 2183 0153 00       		.byte	0
 2184 0154 03       		.uleb128 0x3
 2185 0155 0E       		.uleb128 0xe
 2186 0156 3A       		.uleb128 0x3a
 2187 0157 0B       		.uleb128 0xb
 2188 0158 3B       		.uleb128 0x3b
 2189 0159 0B       		.uleb128 0xb
 2190 015a 49       		.uleb128 0x49
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 55


 2191 015b 13       		.uleb128 0x13
 2192 015c 3F       		.uleb128 0x3f
 2193 015d 19       		.uleb128 0x19
 2194 015e 02       		.uleb128 0x2
 2195 015f 18       		.uleb128 0x18
 2196 0160 00       		.byte	0
 2197 0161 00       		.byte	0
 2198 0162 00       		.byte	0
 2199              		.section	.debug_aranges,"",%progbits
 2200 0000 A4000000 		.4byte	0xa4
 2201 0004 0200     		.2byte	0x2
 2202 0006 00000000 		.4byte	.Ldebug_info0
 2203 000a 04       		.byte	0x4
 2204 000b 00       		.byte	0
 2205 000c 0000     		.2byte	0
 2206 000e 0000     		.2byte	0
 2207 0010 00000000 		.4byte	.LFB2
 2208 0014 24000000 		.4byte	.LFE2-.LFB2
 2209 0018 00000000 		.4byte	.LFB3
 2210 001c 18020000 		.4byte	.LFE3-.LFB3
 2211 0020 00000000 		.4byte	.LFB4
 2212 0024 38000000 		.4byte	.LFE4-.LFB4
 2213 0028 00000000 		.4byte	.LFB5
 2214 002c 18000000 		.4byte	.LFE5-.LFB5
 2215 0030 00000000 		.4byte	.LFB6
 2216 0034 1C000000 		.4byte	.LFE6-.LFB6
 2217 0038 00000000 		.4byte	.LFB7
 2218 003c 1C000000 		.4byte	.LFE7-.LFB7
 2219 0040 00000000 		.4byte	.LFB8
 2220 0044 48000000 		.4byte	.LFE8-.LFB8
 2221 0048 00000000 		.4byte	.LFB9
 2222 004c 44000000 		.4byte	.LFE9-.LFB9
 2223 0050 00000000 		.4byte	.LFB10
 2224 0054 1C000000 		.4byte	.LFE10-.LFB10
 2225 0058 00000000 		.4byte	.LFB11
 2226 005c 30000000 		.4byte	.LFE11-.LFB11
 2227 0060 00000000 		.4byte	.LFB12
 2228 0064 2C000000 		.4byte	.LFE12-.LFB12
 2229 0068 00000000 		.4byte	.LFB13
 2230 006c 1C000000 		.4byte	.LFE13-.LFB13
 2231 0070 00000000 		.4byte	.LFB14
 2232 0074 1C000000 		.4byte	.LFE14-.LFB14
 2233 0078 00000000 		.4byte	.LFB15
 2234 007c 30000000 		.4byte	.LFE15-.LFB15
 2235 0080 00000000 		.4byte	.LFB16
 2236 0084 2C000000 		.4byte	.LFE16-.LFB16
 2237 0088 00000000 		.4byte	.LFB17
 2238 008c A4000000 		.4byte	.LFE17-.LFB17
 2239 0090 00000000 		.4byte	.LFB18
 2240 0094 90000000 		.4byte	.LFE18-.LFB18
 2241 0098 00000000 		.4byte	.LFB19
 2242 009c 80000000 		.4byte	.LFE19-.LFB19
 2243 00a0 00000000 		.4byte	0
 2244 00a4 00000000 		.4byte	0
 2245              		.section	.debug_ranges,"",%progbits
 2246              	.Ldebug_ranges0:
 2247 0000 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 56


 2248 0004 24000000 		.4byte	.LFE2
 2249 0008 00000000 		.4byte	.LFB3
 2250 000c 18020000 		.4byte	.LFE3
 2251 0010 00000000 		.4byte	.LFB4
 2252 0014 38000000 		.4byte	.LFE4
 2253 0018 00000000 		.4byte	.LFB5
 2254 001c 18000000 		.4byte	.LFE5
 2255 0020 00000000 		.4byte	.LFB6
 2256 0024 1C000000 		.4byte	.LFE6
 2257 0028 00000000 		.4byte	.LFB7
 2258 002c 1C000000 		.4byte	.LFE7
 2259 0030 00000000 		.4byte	.LFB8
 2260 0034 48000000 		.4byte	.LFE8
 2261 0038 00000000 		.4byte	.LFB9
 2262 003c 44000000 		.4byte	.LFE9
 2263 0040 00000000 		.4byte	.LFB10
 2264 0044 1C000000 		.4byte	.LFE10
 2265 0048 00000000 		.4byte	.LFB11
 2266 004c 30000000 		.4byte	.LFE11
 2267 0050 00000000 		.4byte	.LFB12
 2268 0054 2C000000 		.4byte	.LFE12
 2269 0058 00000000 		.4byte	.LFB13
 2270 005c 1C000000 		.4byte	.LFE13
 2271 0060 00000000 		.4byte	.LFB14
 2272 0064 1C000000 		.4byte	.LFE14
 2273 0068 00000000 		.4byte	.LFB15
 2274 006c 30000000 		.4byte	.LFE15
 2275 0070 00000000 		.4byte	.LFB16
 2276 0074 2C000000 		.4byte	.LFE16
 2277 0078 00000000 		.4byte	.LFB17
 2278 007c A4000000 		.4byte	.LFE17
 2279 0080 00000000 		.4byte	.LFB18
 2280 0084 90000000 		.4byte	.LFE18
 2281 0088 00000000 		.4byte	.LFB19
 2282 008c 80000000 		.4byte	.LFE19
 2283 0090 00000000 		.4byte	0
 2284 0094 00000000 		.4byte	0
 2285              		.section	.debug_line,"",%progbits
 2286              	.Ldebug_line0:
 2287 0000 9C020000 		.section	.debug_str,"MS",%progbits,1
 2287      02004000 
 2287      00000201 
 2287      FB0E0D00 
 2287      01010101 
 2288              	.LASF10:
 2289 0000 75696E74 		.ascii	"uint16\000"
 2289      313600
 2290              	.LASF62:
 2291 0007 433A5C55 		.ascii	"C:\\Users\\Andrew Joseph\\Desktop\\Senior Design\\t"
 2291      73657273 
 2291      5C416E64 
 2291      72657720 
 2291      4A6F7365 
 2292 0035 72756E6B 		.ascii	"runk\\src\\PSoC_Core\\fNIR PSoC Central\\fNIR PSoC "
 2292      5C737263 
 2292      5C50536F 
 2292      435F436F 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 57


 2292      72655C66 
 2293 0064 43656E74 		.ascii	"Central.cydsn\000"
 2293      72616C2E 
 2293      63796473 
 2293      6E00
 2294              	.LASF48:
 2295 0072 61646347 		.ascii	"adcGain\000"
 2295      61696E00 
 2296              	.LASF23:
 2297 007a 636F756E 		.ascii	"counts\000"
 2297      747300
 2298              	.LASF54:
 2299 0081 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2299      436F756E 
 2299      7473546F 
 2299      5F566F6C 
 2299      747300
 2300              	.LASF36:
 2301 0094 4144435F 		.ascii	"ADC_Init\000"
 2301      496E6974 
 2301      00
 2302              	.LASF7:
 2303 009d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2303      206C6F6E 
 2303      6720756E 
 2303      7369676E 
 2303      65642069 
 2304              	.LASF24:
 2305 00b4 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2305      496E7075 
 2305      7473506C 
 2305      6163656D 
 2305      656E7400 
 2306              	.LASF28:
 2307 00c8 4144435F 		.ascii	"ADC_StartConvert\000"
 2307      53746172 
 2307      74436F6E 
 2307      76657274 
 2307      00
 2308              	.LASF6:
 2309 00d9 6C6F6E67 		.ascii	"long long int\000"
 2309      206C6F6E 
 2309      6720696E 
 2309      7400
 2310              	.LASF0:
 2311 00e7 7369676E 		.ascii	"signed char\000"
 2311      65642063 
 2311      68617200 
 2312              	.LASF30:
 2313 00f3 73746174 		.ascii	"status\000"
 2313      757300
 2314              	.LASF13:
 2315 00fa 696E7433 		.ascii	"int32\000"
 2315      3200
 2316              	.LASF25:
 2317 0100 4144435F 		.ascii	"ADC_Start\000"
 2317      53746172 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 58


 2317      7400
 2318              	.LASF4:
 2319 010a 6C6F6E67 		.ascii	"long int\000"
 2319      20696E74 
 2319      00
 2320              	.LASF52:
 2321 0113 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2321      436F756E 
 2321      7473546F 
 2321      5F75566F 
 2321      6C747300 
 2322              	.LASF59:
 2323 0127 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2323      636F756E 
 2323      74735065 
 2323      72313056 
 2323      6F6C7400 
 2324              	.LASF9:
 2325 013b 75696E74 		.ascii	"uint8\000"
 2325      3800
 2326              	.LASF16:
 2327 0141 646F7562 		.ascii	"double\000"
 2327      6C6500
 2328              	.LASF11:
 2329 0148 75696E74 		.ascii	"uint32\000"
 2329      333200
 2330              	.LASF38:
 2331 014f 6D61736B 		.ascii	"mask\000"
 2331      00
 2332              	.LASF57:
 2333 0154 4144435F 		.ascii	"ADC_initVar\000"
 2333      696E6974 
 2333      56617200 
 2334              	.LASF33:
 2335 0160 7265744D 		.ascii	"retMode\000"
 2335      6F646500 
 2336              	.LASF43:
 2337 0168 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2337      5365744C 
 2337      696D6974 
 2337      4D61736B 
 2337      00
 2338              	.LASF8:
 2339 0179 756E7369 		.ascii	"unsigned int\000"
 2339      676E6564 
 2339      20696E74 
 2339      00
 2340              	.LASF53:
 2341 0186 75566F6C 		.ascii	"uVolts\000"
 2341      747300
 2342              	.LASF5:
 2343 018d 6C6F6E67 		.ascii	"long unsigned int\000"
 2343      20756E73 
 2343      69676E65 
 2343      6420696E 
 2343      7400
 2344              	.LASF44:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 59


 2345 019f 4144435F 		.ascii	"ADC_SetSatMask\000"
 2345      53657453 
 2345      61744D61 
 2345      736B00
 2346              	.LASF55:
 2347 01ae 766F6C74 		.ascii	"volts\000"
 2347      7300
 2348              	.LASF22:
 2349 01b4 746D7052 		.ascii	"tmpRegVal\000"
 2349      65675661 
 2349      6C00
 2350              	.LASF3:
 2351 01be 73686F72 		.ascii	"short unsigned int\000"
 2351      7420756E 
 2351      7369676E 
 2351      65642069 
 2351      6E7400
 2352              	.LASF29:
 2353 01d1 4144435F 		.ascii	"ADC_StopConvert\000"
 2353      53746F70 
 2353      436F6E76 
 2353      65727400 
 2354              	.LASF51:
 2355 01e1 6D566F6C 		.ascii	"mVolts\000"
 2355      747300
 2356              	.LASF19:
 2357 01e8 72656733 		.ascii	"reg32\000"
 2357      3200
 2358              	.LASF14:
 2359 01ee 666C6F61 		.ascii	"float32\000"
 2359      74333200 
 2360              	.LASF20:
 2361 01f6 73697A65 		.ascii	"sizetype\000"
 2361      74797065 
 2361      00
 2362              	.LASF40:
 2363 01ff 6C6F774C 		.ascii	"lowLimit\000"
 2363      696D6974 
 2363      00
 2364              	.LASF41:
 2365 0208 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2365      53657448 
 2365      6967684C 
 2365      696D6974 
 2365      00
 2366              	.LASF31:
 2367 0219 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2367      4973456E 
 2367      64436F6E 
 2367      76657273 
 2367      696F6E00 
 2368              	.LASF17:
 2369 022d 696E7436 		.ascii	"int64\000"
 2369      3400
 2370              	.LASF37:
 2371 0233 4144435F 		.ascii	"ADC_SetChanMask\000"
 2371      53657443 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 60


 2371      68616E4D 
 2371      61736B00 
 2372              	.LASF61:
 2373 0243 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2373      72617465 
 2373      645F536F 
 2373      75726365 
 2373      5C50536F 
 2374              	.LASF47:
 2375 0260 4144435F 		.ascii	"ADC_SetGain\000"
 2375      53657447 
 2375      61696E00 
 2376              	.LASF15:
 2377 026c 666C6F61 		.ascii	"float\000"
 2377      7400
 2378              	.LASF42:
 2379 0272 68696768 		.ascii	"highLimit\000"
 2379      4C696D69 
 2379      7400
 2380              	.LASF49:
 2381 027c 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2381      436F756E 
 2381      7473546F 
 2381      5F6D566F 
 2381      6C747300 
 2382              	.LASF39:
 2383 0290 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2383      5365744C 
 2383      6F774C69 
 2383      6D697400 
 2384              	.LASF1:
 2385 02a0 756E7369 		.ascii	"unsigned char\000"
 2385      676E6564 
 2385      20636861 
 2385      7200
 2386              	.LASF58:
 2387 02ae 4144435F 		.ascii	"ADC_offset\000"
 2387      6F666673 
 2387      657400
 2388              	.LASF2:
 2389 02b9 73686F72 		.ascii	"short int\000"
 2389      7420696E 
 2389      7400
 2390              	.LASF27:
 2391 02c3 4144435F 		.ascii	"ADC_Stop\000"
 2391      53746F70 
 2391      00
 2392              	.LASF21:
 2393 02cc 63684E75 		.ascii	"chNum\000"
 2393      6D00
 2394              	.LASF34:
 2395 02d2 6368616E 		.ascii	"chan\000"
 2395      00
 2396              	.LASF18:
 2397 02d7 63686172 		.ascii	"char\000"
 2397      00
 2398              	.LASF56:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\ccT4HNze.s 			page 61


 2399 02dc 4144435F 		.ascii	"ADC_channelsConfig\000"
 2399      6368616E 
 2399      6E656C73 
 2399      436F6E66 
 2399      696700
 2400              	.LASF46:
 2401 02ef 6F666673 		.ascii	"offset\000"
 2401      657400
 2402              	.LASF50:
 2403 02f6 61646343 		.ascii	"adcCounts\000"
 2403      6F756E74 
 2403      7300
 2404              	.LASF26:
 2405 0300 4144435F 		.ascii	"ADC_Enable\000"
 2405      456E6162 
 2405      6C6500
 2406              	.LASF12:
 2407 030b 696E7431 		.ascii	"int16\000"
 2407      3600
 2408              	.LASF45:
 2409 0311 4144435F 		.ascii	"ADC_SetOffset\000"
 2409      5365744F 
 2409      66667365 
 2409      7400
 2410              	.LASF60:
 2411 031f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2411      4320342E 
 2411      392E3320 
 2411      32303135 
 2411      30333033 
 2412 0352 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2412      20726576 
 2412      6973696F 
 2412      6E203232 
 2412      31323230 
 2413 0385 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2413      66756E63 
 2413      74696F6E 
 2413      2D736563 
 2413      74696F6E 
 2414              	.LASF35:
 2415 03ad 72657375 		.ascii	"result\000"
 2415      6C7400
 2416              	.LASF32:
 2417 03b4 4144435F 		.ascii	"ADC_GetResult16\000"
 2417      47657452 
 2417      6573756C 
 2417      74313600 
 2418              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
