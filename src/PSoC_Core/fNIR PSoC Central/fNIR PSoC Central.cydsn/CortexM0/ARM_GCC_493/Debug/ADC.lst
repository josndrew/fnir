ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,8,4
  24              		.comm	ADC_countsPer10Volt,16,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 16
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32 0008 00040000 		.word	1024
  33 000c 00040000 		.word	1024
  34              		.section	.text.ADC_Start,"ax",%progbits
  35              		.align	2
  36              		.global	ADC_Start
  37              		.code	16
  38              		.thumb_func
  39              		.type	ADC_Start, %function
  40              	ADC_Start:
  41              	.LFB2:
  42              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 2


  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u, 0x00000400u, 0x000004
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  43              		.loc 1 64 0
  44              		.cfi_startproc
  45 0000 80B5     		push	{r7, lr}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 3


  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  51              		.loc 1 66 0
  52 0004 064B     		ldr	r3, .L3
  53 0006 1B78     		ldrb	r3, [r3]
  54 0008 002B     		cmp	r3, #0
  55 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  56              		.loc 1 68 0
  57 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  58              		.loc 1 69 0
  59 0010 034B     		ldr	r3, .L3
  60 0012 0122     		mov	r2, #1
  61 0014 1A70     		strb	r2, [r3]
  62              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  63              		.loc 1 71 0
  64 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  65              		.loc 1 72 0
  66 001a BD46     		mov	sp, r7
  67              		@ sp needed
  68 001c 80BD     		pop	{r7, pc}
  69              	.L4:
  70 001e C046     		.align	2
  71              	.L3:
  72 0020 00000000 		.word	ADC_initVar
  73              		.cfi_endproc
  74              	.LFE2:
  75              		.size	ADC_Start, .-ADC_Start
  76              		.global	__aeabi_idiv
  77              		.section	.text.ADC_Init,"ax",%progbits
  78              		.align	2
  79              		.global	ADC_Init
  80              		.code	16
  81              		.thumb_func
  82              		.type	ADC_Init, %function
  83              	ADC_Init:
  84              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 4


  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  85              		.loc 1 95 0
  86              		.cfi_startproc
  87 0000 80B5     		push	{r7, lr}
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 84B0     		sub	sp, sp, #16
  92              		.cfi_def_cfa_offset 24
  93 0004 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 5


 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  95              		.loc 1 172 0
  96 0006 0F20     		mov	r0, #15
  97 0008 0321     		mov	r1, #3
  98 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  99              		.loc 1 173 0
 100 000e 624B     		ldr	r3, .L16
 101 0010 0F20     		mov	r0, #15
 102 0012 191C     		mov	r1, r3
 103 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 104              		.loc 1 177 0
 105 0018 604B     		ldr	r3, .L16+4
 106 001a 0F22     		mov	r2, #15
 107 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 6


 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 108              		.loc 1 180 0
 109 001e 604B     		ldr	r3, .L16+8
 110 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0
 112 0022 002B     		cmp	r3, #0
 113 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 178 0 is_stmt 0 discriminator 1
 115 0026 5F49     		ldr	r1, .L16+12
 116 0028 00E0     		b	.L7
 117              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 2
 119 002a 5F49     		ldr	r1, .L16+16
 120              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 178 0 discriminator 4
 122 002c 5F4B     		ldr	r3, .L16+20
 123 002e 5F4A     		ldr	r2, .L16+20
 124 0030 1268     		ldr	r2, [r2]
 125 0032 0A43     		orr	r2, r1
 126 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 127              		.loc 1 182 0 is_stmt 1 discriminator 4
 128 0036 5E4B     		ldr	r3, .L16+24
 129 0038 5E4A     		ldr	r2, .L16+28
 130 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 131              		.loc 1 183 0 discriminator 4
 132 003c 5E4B     		ldr	r3, .L16+32
 133 003e 5F4A     		ldr	r2, .L16+36
 134 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 135              		.loc 1 184 0 discriminator 4
 136 0042 5F4B     		ldr	r3, .L16+40
 137 0044 0022     		mov	r2, #0
 138 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 139              		.loc 1 185 0 discriminator 4
 140 0048 5E4B     		ldr	r3, .L16+44
 141 004a 5F4A     		ldr	r2, .L16+48
 142 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 143              		.loc 1 186 0 discriminator 4
 144 004e 5F4B     		ldr	r3, .L16+52
 145 0050 5D4A     		ldr	r2, .L16+48
 146 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 147              		.loc 1 190 0 discriminator 4
 148 0054 5E4B     		ldr	r3, .L16+56
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 7


 149 0056 5E4A     		ldr	r2, .L16+56
 150 0058 1268     		ldr	r2, [r2]
 151 005a 8021     		mov	r1, #128
 152 005c 4902     		lsl	r1, r1, #9
 153 005e 0A43     		orr	r2, r1
 154 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 155              		.loc 1 193 0 discriminator 4
 156 0062 5C4B     		ldr	r3, .L16+60
 157 0064 5B4A     		ldr	r2, .L16+60
 158 0066 1268     		ldr	r2, [r2]
 159 0068 8021     		mov	r1, #128
 160 006a 4902     		lsl	r1, r1, #9
 161 006c 0A43     		orr	r2, r1
 162 006e 1A60     		str	r2, [r3]
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 163              		.loc 1 197 0 discriminator 4
 164 0070 594B     		ldr	r3, .L16+64
 165 0072 0022     		mov	r2, #0
 166 0074 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 167              		.loc 1 198 0 discriminator 4
 168 0076 594B     		ldr	r3, .L16+68
 169 0078 0022     		mov	r2, #0
 170 007a 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 171              		.loc 1 199 0 discriminator 4
 172 007c 584B     		ldr	r3, .L16+72
 173 007e 0122     		mov	r2, #1
 174 0080 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 175              		.loc 1 206 0 discriminator 4
 176 0082 584B     		ldr	r3, .L16+76
 177 0084 1B68     		ldr	r3, [r3]
 178 0086 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 179              		.loc 1 207 0 discriminator 4
 180 0088 7B68     		ldr	r3, [r7, #4]
 181 008a 574A     		ldr	r2, .L16+80
 182 008c 1340     		and	r3, r2
 183 008e 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 8


 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 184              		.loc 1 220 0 discriminator 4
 185 0090 7B68     		ldr	r3, [r7, #4]
 186 0092 8022     		mov	r2, #128
 187 0094 9205     		lsl	r2, r2, #22
 188 0096 1343     		orr	r3, r2
 189 0098 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 190              		.loc 1 221 0 discriminator 4
 191 009a 7B68     		ldr	r3, [r7, #4]
 192 009c 0122     		mov	r2, #1
 193 009e 9343     		bic	r3, r2
 194 00a0 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 195              		.loc 1 226 0 discriminator 4
 196 00a2 504B     		ldr	r3, .L16+76
 197 00a4 7A68     		ldr	r2, [r7, #4]
 198 00a6 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 199              		.loc 1 232 0 discriminator 4
 200 00a8 0023     		mov	r3, #0
 201 00aa FB60     		str	r3, [r7, #12]
 202 00ac 6EE0     		b	.L8
 203              	.L15:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 204              		.loc 1 234 0
 205 00ae 4F4B     		ldr	r3, .L16+84
 206 00b0 FA68     		ldr	r2, [r7, #12]
 207 00b2 9200     		lsl	r2, r2, #2
 208 00b4 D258     		ldr	r2, [r2, r3]
 209 00b6 DC23     		mov	r3, #220
 210 00b8 9B01     		lsl	r3, r3, #6
 211 00ba 1340     		and	r3, r2
 212 00bc 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 213              		.loc 1 236 0
 214 00be 4C4A     		ldr	r2, .L16+88
 215 00c0 FB68     		ldr	r3, [r7, #12]
 216 00c2 D318     		add	r3, r2, r3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 9


 217 00c4 1B78     		ldrb	r3, [r3]
 218 00c6 1A1C     		mov	r2, r3
 219 00c8 7B68     		ldr	r3, [r7, #4]
 220 00ca 1343     		orr	r3, r2
 221 00cc 7B60     		str	r3, [r7, #4]
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 222              		.loc 1 253 0
 223 00ce FB68     		ldr	r3, [r7, #12]
 224 00d0 9B00     		lsl	r3, r3, #2
 225 00d2 484A     		ldr	r2, .L16+92
 226 00d4 9446     		mov	ip, r2
 227 00d6 6344     		add	r3, r3, ip
 228 00d8 7A68     		ldr	r2, [r7, #4]
 229 00da 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 230              		.loc 1 255 0
 231 00dc 434B     		ldr	r3, .L16+84
 232 00de FA68     		ldr	r2, [r7, #12]
 233 00e0 9200     		lsl	r2, r2, #2
 234 00e2 D358     		ldr	r3, [r2, r3]
 235 00e4 0122     		mov	r2, #1
 236 00e6 1340     		and	r3, r2
 237 00e8 09D0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 238              		.loc 1 257 0
 239 00ea 3B4B     		ldr	r3, .L16+64
 240 00ec 3A4A     		ldr	r2, .L16+64
 241 00ee 1268     		ldr	r2, [r2]
 242 00f0 F968     		ldr	r1, [r7, #12]
 243 00f2 0120     		mov	r0, #1
 244 00f4 8840     		lsl	r0, r0, r1
 245 00f6 011C     		mov	r1, r0
 246 00f8 89B2     		uxth	r1, r1
 247 00fa 0A43     		orr	r2, r1
 248 00fc 1A60     		str	r2, [r3]
 249              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 10


 250              		.loc 1 260 0
 251 00fe 3B4B     		ldr	r3, .L16+84
 252 0100 FA68     		ldr	r2, [r7, #12]
 253 0102 9200     		lsl	r2, r2, #2
 254 0104 D358     		ldr	r3, [r2, r3]
 255 0106 0222     		mov	r2, #2
 256 0108 1340     		and	r3, r2
 257 010a 09D0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258              		.loc 1 262 0
 259 010c 334B     		ldr	r3, .L16+68
 260 010e 334A     		ldr	r2, .L16+68
 261 0110 1268     		ldr	r2, [r2]
 262 0112 F968     		ldr	r1, [r7, #12]
 263 0114 0120     		mov	r0, #1
 264 0116 8840     		lsl	r0, r0, r1
 265 0118 011C     		mov	r1, r0
 266 011a 89B2     		uxth	r1, r1
 267 011c 0A43     		orr	r2, r1
 268 011e 1A60     		str	r2, [r3]
 269              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 270              		.loc 1 282 0
 271 0120 324B     		ldr	r3, .L16+84
 272 0122 FA68     		ldr	r2, [r7, #12]
 273 0124 9200     		lsl	r2, r2, #2
 274 0126 D258     		ldr	r2, [r2, r3]
 275 0128 8023     		mov	r3, #128
 276 012a 9B00     		lsl	r3, r3, #2
 277 012c 1340     		and	r3, r2
 278 012e 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 279              		.loc 1 284 0
 280 0130 8023     		mov	r3, #128
 281 0132 5B00     		lsl	r3, r3, #1
 282 0134 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 11


 283 0136 02E0     		b	.L12
 284              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 285              		.loc 1 288 0
 286 0138 8023     		mov	r3, #128
 287 013a 5B01     		lsl	r3, r3, #5
 288 013c BB60     		str	r3, [r7, #8]
 289              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 290              		.loc 1 291 0
 291 013e 2B4B     		ldr	r3, .L16+84
 292 0140 FA68     		ldr	r2, [r7, #12]
 293 0142 9200     		lsl	r2, r2, #2
 294 0144 D258     		ldr	r2, [r2, r3]
 295 0146 8023     		mov	r3, #128
 296 0148 5B00     		lsl	r3, r3, #1
 297 014a 1340     		and	r3, r2
 298 014c 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 299              		.loc 1 298 0
 300 014e 2A4B     		ldr	r3, .L16+96
 301 0150 FA68     		ldr	r2, [r7, #12]
 302 0152 5200     		lsl	r2, r2, #1
 303 0154 0021     		mov	r1, #0
 304 0156 D152     		strh	r1, [r2, r3]
 305 0158 04E0     		b	.L14
 306              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 307              		.loc 1 307 0
 308 015a 274B     		ldr	r3, .L16+96
 309 015c FA68     		ldr	r2, [r7, #12]
 310 015e 5200     		lsl	r2, r2, #1
 311 0160 0021     		mov	r1, #0
 312 0162 D152     		strh	r1, [r2, r3]
 313              	.L14:
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 12


 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 314              		.loc 1 311 0 discriminator 2
 315 0164 BB68     		ldr	r3, [r7, #8]
 316 0166 254A     		ldr	r2, .L16+100
 317 0168 5343     		mul	r3, r2
 318 016a 254A     		ldr	r2, .L16+104
 319 016c 9446     		mov	ip, r2
 320 016e 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 321              		.loc 1 312 0 discriminator 2
 322 0170 181C     		mov	r0, r3
 323 0172 2449     		ldr	r1, .L16+108
 324 0174 FFF7FEFF 		bl	__aeabi_idiv
 325 0178 031C     		mov	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 326              		.loc 1 311 0 discriminator 2
 327 017a 9BB2     		uxth	r3, r3
 328 017c 19B2     		sxth	r1, r3
 329 017e 224B     		ldr	r3, .L16+112
 330 0180 FA68     		ldr	r2, [r7, #12]
 331 0182 9200     		lsl	r2, r2, #2
 332 0184 D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 333              		.loc 1 232 0 discriminator 2
 334 0186 FB68     		ldr	r3, [r7, #12]
 335 0188 0133     		add	r3, r3, #1
 336 018a FB60     		str	r3, [r7, #12]
 337              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 338              		.loc 1 232 0 is_stmt 0 discriminator 1
 339 018c FB68     		ldr	r3, [r7, #12]
 340 018e 032B     		cmp	r3, #3
 341 0190 8DD9     		bls	.L15
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 342              		.loc 1 314 0 is_stmt 1
 343 0192 BD46     		mov	sp, r7
 344 0194 04B0     		add	sp, sp, #16
 345              		@ sp needed
 346 0196 80BD     		pop	{r7, pc}
 347              	.L17:
 348              		.align	2
 349              	.L16:
 350 0198 00000000 		.word	ADC_ISR
 351 019c 20003A40 		.word	1077542944
 352 01a0 80033A40 		.word	1077543808
 353 01a4 70201010 		.word	269492336
 354 01a8 70200010 		.word	268443760
 355 01ac 00003A40 		.word	1077542912
 356 01b0 04003A40 		.word	1077542916
 357 01b4 CC000080 		.word	-2147483444
 358 01b8 18003A40 		.word	1077542936
 359 01bc 0000FF07 		.word	134152192
 360 01c0 1C003A40 		.word	1077542940
 361 01c4 10003A40 		.word	1077542928
 362 01c8 02000200 		.word	131074
 363 01cc 14003A40 		.word	1077542932
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 13


 364 01d0 00033A40 		.word	1077543680
 365 01d4 40033A40 		.word	1077543744
 366 01d8 28023A40 		.word	1077543464
 367 01dc 38023A40 		.word	1077543480
 368 01e0 18023A40 		.word	1077543448
 369 01e4 30003A40 		.word	1077542960
 370 01e8 FFFFFFDF 		.word	-536870913
 371 01ec 00000000 		.word	ADC_channelsConfig
 372 01f0 10000000 		.word	ADC_InputsPlacement.4788
 373 01f4 80003A40 		.word	1077543040
 374 01f8 00000000 		.word	ADC_offset
 375 01fc 10270000 		.word	10000
 376 0200 E40C0000 		.word	3300
 377 0204 C8190000 		.word	6600
 378 0208 00000000 		.word	ADC_countsPer10Volt
 379              		.cfi_endproc
 380              	.LFE3:
 381              		.size	ADC_Init, .-ADC_Init
 382              		.section	.text.ADC_Enable,"ax",%progbits
 383              		.align	2
 384              		.global	ADC_Enable
 385              		.code	16
 386              		.thumb_func
 387              		.type	ADC_Enable, %function
 388              	ADC_Enable:
 389              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 390              		.loc 1 331 0
 391              		.cfi_startproc
 392 0000 80B5     		push	{r7, lr}
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 396 0002 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 398              		.loc 1 332 0
 399 0004 0A4B     		ldr	r3, .L21
 400 0006 1B68     		ldr	r3, [r3]
 401 0008 002B     		cmp	r3, #0
 402 000a 0EDB     		blt	.L18
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 14


 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 403              		.loc 1 336 0
 404 000c C046     		mov	r8, r8
 405              	.L20:
 406              		.loc 1 336 0 is_stmt 0 discriminator 1
 407 000e 094B     		ldr	r3, .L21+4
 408 0010 1B68     		ldr	r3, [r3]
 409 0012 002B     		cmp	r3, #0
 410 0014 FBDB     		blt	.L20
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 411              		.loc 1 342 0 is_stmt 1
 412 0016 064B     		ldr	r3, .L21
 413 0018 054A     		ldr	r2, .L21
 414 001a 1268     		ldr	r2, [r2]
 415 001c 8021     		mov	r1, #128
 416 001e 0906     		lsl	r1, r1, #24
 417 0020 0A43     		orr	r2, r1
 418 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 419              		.loc 1 345 0
 420 0024 0A20     		mov	r0, #10
 421 0026 FFF7FEFF 		bl	CyDelayUs
 422              	.L18:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 423              		.loc 1 347 0
 424 002a BD46     		mov	sp, r7
 425              		@ sp needed
 426 002c 80BD     		pop	{r7, pc}
 427              	.L22:
 428 002e C046     		.align	2
 429              	.L21:
 430 0030 00003A40 		.word	1077542912
 431 0034 08023A40 		.word	1077543432
 432              		.cfi_endproc
 433              	.LFE4:
 434              		.size	ADC_Enable, .-ADC_Enable
 435              		.section	.text.ADC_Stop,"ax",%progbits
 436              		.align	2
 437              		.global	ADC_Stop
 438              		.code	16
 439              		.thumb_func
 440              		.type	ADC_Stop, %function
 441              	ADC_Stop:
 442              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 15


 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 443              		.loc 1 366 0
 444              		.cfi_startproc
 445 0000 80B5     		push	{r7, lr}
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 00AF     		add	r7, sp, #0
 450              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 451              		.loc 1 367 0
 452 0004 034B     		ldr	r3, .L24
 453 0006 034A     		ldr	r2, .L24
 454 0008 1268     		ldr	r2, [r2]
 455 000a 5200     		lsl	r2, r2, #1
 456 000c 5208     		lsr	r2, r2, #1
 457 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 458              		.loc 1 368 0
 459 0010 BD46     		mov	sp, r7
 460              		@ sp needed
 461 0012 80BD     		pop	{r7, pc}
 462              	.L25:
 463              		.align	2
 464              	.L24:
 465 0014 00003A40 		.word	1077542912
 466              		.cfi_endproc
 467              	.LFE5:
 468              		.size	ADC_Stop, .-ADC_Stop
 469              		.section	.text.ADC_StartConvert,"ax",%progbits
 470              		.align	2
 471              		.global	ADC_StartConvert
 472              		.code	16
 473              		.thumb_func
 474              		.type	ADC_StartConvert, %function
 475              	ADC_StartConvert:
 476              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 16


 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 477              		.loc 1 392 0
 478              		.cfi_startproc
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 00AF     		add	r7, sp, #0
 484              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 485              		.loc 1 394 0
 486 0004 044B     		ldr	r3, .L27
 487 0006 044A     		ldr	r2, .L27
 488 0008 1268     		ldr	r2, [r2]
 489 000a 8021     		mov	r1, #128
 490 000c 4902     		lsl	r1, r1, #9
 491 000e 0A43     		orr	r2, r1
 492 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 493              		.loc 1 399 0
 494 0012 BD46     		mov	sp, r7
 495              		@ sp needed
 496 0014 80BD     		pop	{r7, pc}
 497              	.L28:
 498 0016 C046     		.align	2
 499              	.L27:
 500 0018 04003A40 		.word	1077542916
 501              		.cfi_endproc
 502              	.LFE6:
 503              		.size	ADC_StartConvert, .-ADC_StartConvert
 504              		.section	.text.ADC_StopConvert,"ax",%progbits
 505              		.align	2
 506              		.global	ADC_StopConvert
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 17


 507              		.code	16
 508              		.thumb_func
 509              		.type	ADC_StopConvert, %function
 510              	ADC_StopConvert:
 511              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 512              		.loc 1 417 0
 513              		.cfi_startproc
 514 0000 80B5     		push	{r7, lr}
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 7, -8
 517              		.cfi_offset 14, -4
 518 0002 00AF     		add	r7, sp, #0
 519              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 520              		.loc 1 419 0
 521 0004 034B     		ldr	r3, .L30
 522 0006 034A     		ldr	r2, .L30
 523 0008 1268     		ldr	r2, [r2]
 524 000a 0349     		ldr	r1, .L30+4
 525 000c 0A40     		and	r2, r1
 526 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 527              		.loc 1 421 0
 528 0010 BD46     		mov	sp, r7
 529              		@ sp needed
 530 0012 80BD     		pop	{r7, pc}
 531              	.L31:
 532              		.align	2
 533              	.L30:
 534 0014 04003A40 		.word	1077542916
 535 0018 FFFFFEFF 		.word	-65537
 536              		.cfi_endproc
 537              	.LFE7:
 538              		.size	ADC_StopConvert, .-ADC_StopConvert
 539              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 540              		.align	2
 541              		.global	ADC_IsEndConversion
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 18


 542              		.code	16
 543              		.thumb_func
 544              		.type	ADC_IsEndConversion, %function
 545              	ADC_IsEndConversion:
 546              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 547              		.loc 1 451 0
 548              		.cfi_startproc
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 84B0     		sub	sp, sp, #16
 554              		.cfi_def_cfa_offset 24
 555 0004 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
 557 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 558              		.loc 1 452 0
 559 0008 0023     		mov	r3, #0
 560 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 561              		.loc 1 454 0
 562 000c 7B68     		ldr	r3, [r7, #4]
 563 000e 0322     		mov	r2, #3
 564 0010 1340     		and	r3, r2
 565 0012 11D0     		beq	.L33
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 19


 566              	.L35:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 567              		.loc 1 458 0 discriminator 2
 568 0014 0B4B     		ldr	r3, .L37
 569 0016 1B68     		ldr	r3, [r3]
 570 0018 0122     		mov	r2, #1
 571 001a 1340     		and	r3, r2
 572 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 573              		.loc 1 459 0 discriminator 2
 574 001e FB68     		ldr	r3, [r7, #12]
 575 0020 002B     		cmp	r3, #0
 576 0022 03D1     		bne	.L34
 577              		.loc 1 459 0 is_stmt 0 discriminator 1
 578 0024 7B68     		ldr	r3, [r7, #4]
 579 0026 0222     		mov	r2, #2
 580 0028 1340     		and	r3, r2
 581 002a F3D1     		bne	.L35
 582              	.L34:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 583              		.loc 1 461 0 is_stmt 1
 584 002c FB68     		ldr	r3, [r7, #12]
 585 002e 002B     		cmp	r3, #0
 586 0030 02D0     		beq	.L33
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 587              		.loc 1 464 0
 588 0032 044B     		ldr	r3, .L37
 589 0034 0122     		mov	r2, #1
 590 0036 1A60     		str	r2, [r3]
 591              	.L33:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 20


 592              		.loc 1 485 0
 593 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 594              		.loc 1 486 0
 595 003a 181C     		mov	r0, r3
 596 003c BD46     		mov	sp, r7
 597 003e 04B0     		add	sp, sp, #16
 598              		@ sp needed
 599 0040 80BD     		pop	{r7, pc}
 600              	.L38:
 601 0042 C046     		.align	2
 602              	.L37:
 603 0044 10023A40 		.word	1077543440
 604              		.cfi_endproc
 605              	.LFE8:
 606              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 607              		.section	.text.ADC_GetResult16,"ax",%progbits
 608              		.align	2
 609              		.global	ADC_GetResult16
 610              		.code	16
 611              		.thumb_func
 612              		.type	ADC_GetResult16, %function
 613              	ADC_GetResult16:
 614              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 615              		.loc 1 505 0
 616              		.cfi_startproc
 617 0000 80B5     		push	{r7, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0002 84B0     		sub	sp, sp, #16
 622              		.cfi_def_cfa_offset 24
 623 0004 00AF     		add	r7, sp, #0
 624              		.cfi_def_cfa_register 7
 625 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 21


 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 626              		.loc 1 509 0
 627 0008 7B68     		ldr	r3, [r7, #4]
 628 000a 032B     		cmp	r3, #3
 629 000c 02D9     		bls	.L40
 630              		.loc 1 509 0 is_stmt 0 discriminator 1
 631 000e 0020     		mov	r0, #0
 632 0010 FFF7FEFF 		bl	CyHalt
 633              	.L40:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 634              		.loc 1 511 0 is_stmt 1
 635 0014 7B68     		ldr	r3, [r7, #4]
 636 0016 032B     		cmp	r3, #3
 637 0018 09D8     		bhi	.L41
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 638              		.loc 1 513 0
 639 001a 7B68     		ldr	r3, [r7, #4]
 640 001c 9B00     		lsl	r3, r3, #2
 641 001e 084A     		ldr	r2, .L44
 642 0020 9446     		mov	ip, r2
 643 0022 6344     		add	r3, r3, ip
 644 0024 1B68     		ldr	r3, [r3]
 645 0026 1B04     		lsl	r3, r3, #16
 646 0028 1B0C     		lsr	r3, r3, #16
 647 002a FB60     		str	r3, [r7, #12]
 648 002c 01E0     		b	.L42
 649              	.L41:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 650              		.loc 1 521 0
 651 002e 0023     		mov	r3, #0
 652 0030 FB60     		str	r3, [r7, #12]
 653              	.L42:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 654              		.loc 1 525 0
 655 0032 FB68     		ldr	r3, [r7, #12]
 656 0034 9BB2     		uxth	r3, r3
 657 0036 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 658              		.loc 1 526 0
 659 0038 181C     		mov	r0, r3
 660 003a BD46     		mov	sp, r7
 661 003c 04B0     		add	sp, sp, #16
 662              		@ sp needed
 663 003e 80BD     		pop	{r7, pc}
 664              	.L45:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 22


 665              		.align	2
 666              	.L44:
 667 0040 80013A40 		.word	1077543296
 668              		.cfi_endproc
 669              	.LFE9:
 670              		.size	ADC_GetResult16, .-ADC_GetResult16
 671              		.section	.text.ADC_SetChanMask,"ax",%progbits
 672              		.align	2
 673              		.global	ADC_SetChanMask
 674              		.code	16
 675              		.thumb_func
 676              		.type	ADC_SetChanMask, %function
 677              	ADC_SetChanMask:
 678              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 679              		.loc 1 550 0
 680              		.cfi_startproc
 681 0000 80B5     		push	{r7, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 82B0     		sub	sp, sp, #8
 686              		.cfi_def_cfa_offset 16
 687 0004 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 689 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 690              		.loc 1 551 0
 691 0008 034B     		ldr	r3, .L47
 692 000a 7A68     		ldr	r2, [r7, #4]
 693 000c 0F21     		mov	r1, #15
 694 000e 0A40     		and	r2, r1
 695 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 23


 696              		.loc 1 552 0
 697 0012 BD46     		mov	sp, r7
 698 0014 02B0     		add	sp, sp, #8
 699              		@ sp needed
 700 0016 80BD     		pop	{r7, pc}
 701              	.L48:
 702              		.align	2
 703              	.L47:
 704 0018 20003A40 		.word	1077542944
 705              		.cfi_endproc
 706              	.LFE10:
 707              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 708              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 709              		.align	2
 710              		.global	ADC_SetLowLimit
 711              		.code	16
 712              		.thumb_func
 713              		.type	ADC_SetLowLimit, %function
 714              	ADC_SetLowLimit:
 715              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 24


 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 716              		.loc 1 594 0
 717              		.cfi_startproc
 718 0000 80B5     		push	{r7, lr}
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 7, -8
 721              		.cfi_offset 14, -4
 722 0002 82B0     		sub	sp, sp, #8
 723              		.cfi_def_cfa_offset 16
 724 0004 00AF     		add	r7, sp, #0
 725              		.cfi_def_cfa_register 7
 726 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 727              		.loc 1 595 0
 728 0008 084B     		ldr	r3, .L50
 729 000a 084A     		ldr	r2, .L50
 730 000c 1268     		ldr	r2, [r2]
 731 000e 120C     		lsr	r2, r2, #16
 732 0010 1204     		lsl	r2, r2, #16
 733 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 734              		.loc 1 596 0
 735 0014 054B     		ldr	r3, .L50
 736 0016 054A     		ldr	r2, .L50
 737 0018 1168     		ldr	r1, [r2]
 738 001a 7A68     		ldr	r2, [r7, #4]
 739 001c 1204     		lsl	r2, r2, #16
 740 001e 120C     		lsr	r2, r2, #16
 741 0020 0A43     		orr	r2, r1
 742 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 743              		.loc 1 597 0
 744 0024 BD46     		mov	sp, r7
 745 0026 02B0     		add	sp, sp, #8
 746              		@ sp needed
 747 0028 80BD     		pop	{r7, pc}
 748              	.L51:
 749 002a C046     		.align	2
 750              	.L50:
 751 002c 18003A40 		.word	1077542936
 752              		.cfi_endproc
 753              	.LFE11:
 754              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 755              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 756              		.align	2
 757              		.global	ADC_SetHighLimit
 758              		.code	16
 759              		.thumb_func
 760              		.type	ADC_SetHighLimit, %function
 761              	ADC_SetHighLimit:
 762              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 25


 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 763              		.loc 1 615 0
 764              		.cfi_startproc
 765 0000 80B5     		push	{r7, lr}
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 7, -8
 768              		.cfi_offset 14, -4
 769 0002 82B0     		sub	sp, sp, #8
 770              		.cfi_def_cfa_offset 16
 771 0004 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 773 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 774              		.loc 1 616 0
 775 0008 074B     		ldr	r3, .L53
 776 000a 074A     		ldr	r2, .L53
 777 000c 1268     		ldr	r2, [r2]
 778 000e 1204     		lsl	r2, r2, #16
 779 0010 120C     		lsr	r2, r2, #16
 780 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 781              		.loc 1 617 0
 782 0014 044B     		ldr	r3, .L53
 783 0016 044A     		ldr	r2, .L53
 784 0018 1168     		ldr	r1, [r2]
 785 001a 7A68     		ldr	r2, [r7, #4]
 786 001c 1204     		lsl	r2, r2, #16
 787 001e 0A43     		orr	r2, r1
 788 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 789              		.loc 1 618 0
 790 0022 BD46     		mov	sp, r7
 791 0024 02B0     		add	sp, sp, #8
 792              		@ sp needed
 793 0026 80BD     		pop	{r7, pc}
 794              	.L54:
 795              		.align	2
 796              	.L53:
 797 0028 18003A40 		.word	1077542936
 798              		.cfi_endproc
 799              	.LFE12:
 800              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 26


 801              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 802              		.align	2
 803              		.global	ADC_SetLimitMask
 804              		.code	16
 805              		.thumb_func
 806              		.type	ADC_SetLimitMask, %function
 807              	ADC_SetLimitMask:
 808              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 809              		.loc 1 639 0
 810              		.cfi_startproc
 811 0000 80B5     		push	{r7, lr}
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 82B0     		sub	sp, sp, #8
 816              		.cfi_def_cfa_offset 16
 817 0004 00AF     		add	r7, sp, #0
 818              		.cfi_def_cfa_register 7
 819 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 820              		.loc 1 640 0
 821 0008 034B     		ldr	r3, .L56
 822 000a 7A68     		ldr	r2, [r7, #4]
 823 000c 0F21     		mov	r1, #15
 824 000e 0A40     		and	r2, r1
 825 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 826              		.loc 1 641 0
 827 0012 BD46     		mov	sp, r7
 828 0014 02B0     		add	sp, sp, #8
 829              		@ sp needed
 830 0016 80BD     		pop	{r7, pc}
 831              	.L57:
 832              		.align	2
 833              	.L56:
 834 0018 38023A40 		.word	1077543480
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 27


 835              		.cfi_endproc
 836              	.LFE13:
 837              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 838              		.section	.text.ADC_SetSatMask,"ax",%progbits
 839              		.align	2
 840              		.global	ADC_SetSatMask
 841              		.code	16
 842              		.thumb_func
 843              		.type	ADC_SetSatMask, %function
 844              	ADC_SetSatMask:
 845              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 846              		.loc 1 662 0
 847              		.cfi_startproc
 848 0000 80B5     		push	{r7, lr}
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 82B0     		sub	sp, sp, #8
 853              		.cfi_def_cfa_offset 16
 854 0004 00AF     		add	r7, sp, #0
 855              		.cfi_def_cfa_register 7
 856 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 857              		.loc 1 663 0
 858 0008 034B     		ldr	r3, .L59
 859 000a 7A68     		ldr	r2, [r7, #4]
 860 000c 0F21     		mov	r1, #15
 861 000e 0A40     		and	r2, r1
 862 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 863              		.loc 1 664 0
 864 0012 BD46     		mov	sp, r7
 865 0014 02B0     		add	sp, sp, #8
 866              		@ sp needed
 867 0016 80BD     		pop	{r7, pc}
 868              	.L60:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 28


 869              		.align	2
 870              	.L59:
 871 0018 28023A40 		.word	1077543464
 872              		.cfi_endproc
 873              	.LFE14:
 874              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 875              		.section	.text.ADC_SetOffset,"ax",%progbits
 876              		.align	2
 877              		.global	ADC_SetOffset
 878              		.code	16
 879              		.thumb_func
 880              		.type	ADC_SetOffset, %function
 881              	ADC_SetOffset:
 882              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 883              		.loc 1 690 0
 884              		.cfi_startproc
 885 0000 80B5     		push	{r7, lr}
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 7, -8
 888              		.cfi_offset 14, -4
 889 0002 82B0     		sub	sp, sp, #8
 890              		.cfi_def_cfa_offset 16
 891 0004 00AF     		add	r7, sp, #0
 892              		.cfi_def_cfa_register 7
 893 0006 7860     		str	r0, [r7, #4]
 894 0008 0A1C     		mov	r2, r1
 895 000a BB1C     		add	r3, r7, #2
 896 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 897              		.loc 1 692 0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 29


 898 000e 7B68     		ldr	r3, [r7, #4]
 899 0010 032B     		cmp	r3, #3
 900 0012 02D9     		bls	.L62
 901              		.loc 1 692 0 is_stmt 0 discriminator 1
 902 0014 0020     		mov	r0, #0
 903 0016 FFF7FEFF 		bl	CyHalt
 904              	.L62:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 905              		.loc 1 694 0 is_stmt 1
 906 001a 044B     		ldr	r3, .L63
 907 001c 7A68     		ldr	r2, [r7, #4]
 908 001e 5200     		lsl	r2, r2, #1
 909 0020 B91C     		add	r1, r7, #2
 910 0022 0988     		ldrh	r1, [r1]
 911 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 912              		.loc 1 695 0
 913 0026 BD46     		mov	sp, r7
 914 0028 02B0     		add	sp, sp, #8
 915              		@ sp needed
 916 002a 80BD     		pop	{r7, pc}
 917              	.L64:
 918              		.align	2
 919              	.L63:
 920 002c 00000000 		.word	ADC_offset
 921              		.cfi_endproc
 922              	.LFE15:
 923              		.size	ADC_SetOffset, .-ADC_SetOffset
 924              		.section	.text.ADC_SetGain,"ax",%progbits
 925              		.align	2
 926              		.global	ADC_SetGain
 927              		.code	16
 928              		.thumb_func
 929              		.type	ADC_SetGain, %function
 930              	ADC_SetGain:
 931              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 30


 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 932              		.loc 1 724 0
 933              		.cfi_startproc
 934 0000 80B5     		push	{r7, lr}
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 0002 82B0     		sub	sp, sp, #8
 939              		.cfi_def_cfa_offset 16
 940 0004 00AF     		add	r7, sp, #0
 941              		.cfi_def_cfa_register 7
 942 0006 7860     		str	r0, [r7, #4]
 943 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 944              		.loc 1 726 0
 945 000a 7B68     		ldr	r3, [r7, #4]
 946 000c 032B     		cmp	r3, #3
 947 000e 02D9     		bls	.L66
 948              		.loc 1 726 0 is_stmt 0 discriminator 1
 949 0010 0020     		mov	r0, #0
 950 0012 FFF7FEFF 		bl	CyHalt
 951              	.L66:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 952              		.loc 1 728 0 is_stmt 1
 953 0016 044B     		ldr	r3, .L67
 954 0018 7A68     		ldr	r2, [r7, #4]
 955 001a 9200     		lsl	r2, r2, #2
 956 001c 3968     		ldr	r1, [r7]
 957 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 958              		.loc 1 729 0
 959 0020 BD46     		mov	sp, r7
 960 0022 02B0     		add	sp, sp, #8
 961              		@ sp needed
 962 0024 80BD     		pop	{r7, pc}
 963              	.L68:
 964 0026 C046     		.align	2
 965              	.L67:
 966 0028 00000000 		.word	ADC_countsPer10Volt
 967              		.cfi_endproc
 968              	.LFE16:
 969              		.size	ADC_SetGain, .-ADC_SetGain
 970              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 971              		.align	2
 972              		.global	ADC_CountsTo_mVolts
 973              		.code	16
 974              		.thumb_func
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 31


 975              		.type	ADC_CountsTo_mVolts, %function
 976              	ADC_CountsTo_mVolts:
 977              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 978              		.loc 1 757 0
 979              		.cfi_startproc
 980 0000 80B5     		push	{r7, lr}
 981              		.cfi_def_cfa_offset 8
 982              		.cfi_offset 7, -8
 983              		.cfi_offset 14, -4
 984 0002 84B0     		sub	sp, sp, #16
 985              		.cfi_def_cfa_offset 24
 986 0004 00AF     		add	r7, sp, #0
 987              		.cfi_def_cfa_register 7
 988 0006 7860     		str	r0, [r7, #4]
 989 0008 0A1C     		mov	r2, r1
 990 000a BB1C     		add	r3, r7, #2
 991 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 992              		.loc 1 761 0
 993 000e 7B68     		ldr	r3, [r7, #4]
 994 0010 032B     		cmp	r3, #3
 995 0012 02D9     		bls	.L70
 996              		.loc 1 761 0 is_stmt 0 discriminator 1
 997 0014 0020     		mov	r0, #0
 998 0016 FFF7FEFF 		bl	CyHalt
 999              	.L70:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 32


 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1000              		.loc 1 772 0 is_stmt 1
 1001 001a 1F4B     		ldr	r3, .L76
 1002 001c 7A68     		ldr	r2, [r7, #4]
 1003 001e 5200     		lsl	r2, r2, #1
 1004 0020 D35A     		ldrh	r3, [r2, r3]
 1005 0022 99B2     		uxth	r1, r3
 1006 0024 BB1C     		add	r3, r7, #2
 1007 0026 1A88     		ldrh	r2, [r3]
 1008 0028 8BB2     		uxth	r3, r1
 1009 002a D31A     		sub	r3, r2, r3
 1010 002c 9AB2     		uxth	r2, r3
 1011 002e BB1C     		add	r3, r7, #2
 1012 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1013              		.loc 1 774 0
 1014 0032 BB1C     		add	r3, r7, #2
 1015 0034 0022     		mov	r2, #0
 1016 0036 9B5E     		ldrsh	r3, [r3, r2]
 1017 0038 184A     		ldr	r2, .L76+4
 1018 003a 5A43     		mul	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1019              		.loc 1 775 0
 1020 003c BB1C     		add	r3, r7, #2
 1021 003e 0021     		mov	r1, #0
 1022 0040 5B5E     		ldrsh	r3, [r3, r1]
 1023 0042 002B     		cmp	r3, #0
 1024 0044 08DD     		ble	.L71
 1025              		.loc 1 775 0 is_stmt 0 discriminator 1
 1026 0046 164B     		ldr	r3, .L76+8
 1027 0048 7968     		ldr	r1, [r7, #4]
 1028 004a 8900     		lsl	r1, r1, #2
 1029 004c CB58     		ldr	r3, [r1, r3]
 1030 004e 002B     		cmp	r3, #0
 1031 0050 00DA     		bge	.L72
 1032 0052 0133     		add	r3, r3, #1
 1033              	.L72:
 1034 0054 5B10     		asr	r3, r3, #1
 1035 0056 08E0     		b	.L73
 1036              	.L71:
 1037              		.loc 1 775 0 discriminator 2
 1038 0058 114B     		ldr	r3, .L76+8
 1039 005a 7968     		ldr	r1, [r7, #4]
 1040 005c 8900     		lsl	r1, r1, #2
 1041 005e CB58     		ldr	r3, [r1, r3]
 1042 0060 002B     		cmp	r3, #0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 33


 1043 0062 00DA     		bge	.L74
 1044 0064 0133     		add	r3, r3, #1
 1045              	.L74:
 1046 0066 5B10     		asr	r3, r3, #1
 1047 0068 5B42     		neg	r3, r3
 1048              	.L73:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1049              		.loc 1 774 0 is_stmt 1
 1050 006a D118     		add	r1, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1051              		.loc 1 776 0
 1052 006c 0C4B     		ldr	r3, .L76+8
 1053 006e 7A68     		ldr	r2, [r7, #4]
 1054 0070 9200     		lsl	r2, r2, #2
 1055 0072 D358     		ldr	r3, [r2, r3]
 1056 0074 081C     		mov	r0, r1
 1057 0076 191C     		mov	r1, r3
 1058 0078 FFF7FEFF 		bl	__aeabi_idiv
 1059 007c 031C     		mov	r3, r0
 1060 007e 1A1C     		mov	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1061              		.loc 1 774 0
 1062 0080 0E23     		mov	r3, #14
 1063 0082 FB18     		add	r3, r7, r3
 1064 0084 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1065              		.loc 1 778 0
 1066 0086 0E23     		mov	r3, #14
 1067 0088 FB18     		add	r3, r7, r3
 1068 008a 1B88     		ldrh	r3, [r3]
 1069 008c 1BB2     		sxth	r3, r3
 779:Generated_Source\PSoC4/ADC.c ****     }
 1070              		.loc 1 779 0
 1071 008e 181C     		mov	r0, r3
 1072 0090 BD46     		mov	sp, r7
 1073 0092 04B0     		add	sp, sp, #16
 1074              		@ sp needed
 1075 0094 80BD     		pop	{r7, pc}
 1076              	.L77:
 1077 0096 C046     		.align	2
 1078              	.L76:
 1079 0098 00000000 		.word	ADC_offset
 1080 009c 10270000 		.word	10000
 1081 00a0 00000000 		.word	ADC_countsPer10Volt
 1082              		.cfi_endproc
 1083              	.LFE17:
 1084              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1085              		.global	__aeabi_lmul
 1086              		.global	__aeabi_ldivmod
 1087              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1088              		.align	2
 1089              		.global	ADC_CountsTo_uVolts
 1090              		.code	16
 1091              		.thumb_func
 1092              		.type	ADC_CountsTo_uVolts, %function
 1093              	ADC_CountsTo_uVolts:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 34


 1094              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1095              		.loc 1 811 0
 1096              		.cfi_startproc
 1097 0000 B0B5     		push	{r4, r5, r7, lr}
 1098              		.cfi_def_cfa_offset 16
 1099              		.cfi_offset 4, -16
 1100              		.cfi_offset 5, -12
 1101              		.cfi_offset 7, -8
 1102              		.cfi_offset 14, -4
 1103 0002 86B0     		sub	sp, sp, #24
 1104              		.cfi_def_cfa_offset 40
 1105 0004 00AF     		add	r7, sp, #0
 1106              		.cfi_def_cfa_register 7
 1107 0006 F860     		str	r0, [r7, #12]
 1108 0008 0A1C     		mov	r2, r1
 1109 000a 0A23     		mov	r3, #10
 1110 000c FB18     		add	r3, r7, r3
 1111 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1112              		.loc 1 815 0
 1113 0010 FB68     		ldr	r3, [r7, #12]
 1114 0012 032B     		cmp	r3, #3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 35


 1115 0014 02D9     		bls	.L79
 1116              		.loc 1 815 0 is_stmt 0 discriminator 1
 1117 0016 0020     		mov	r0, #0
 1118 0018 FFF7FEFF 		bl	CyHalt
 1119              	.L79:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1120              		.loc 1 826 0 is_stmt 1
 1121 001c 194B     		ldr	r3, .L81
 1122 001e FA68     		ldr	r2, [r7, #12]
 1123 0020 5200     		lsl	r2, r2, #1
 1124 0022 D35A     		ldrh	r3, [r2, r3]
 1125 0024 99B2     		uxth	r1, r3
 1126 0026 0A23     		mov	r3, #10
 1127 0028 FB18     		add	r3, r7, r3
 1128 002a 1A88     		ldrh	r2, [r3]
 1129 002c 8BB2     		uxth	r3, r1
 1130 002e D31A     		sub	r3, r2, r3
 1131 0030 9AB2     		uxth	r2, r3
 1132 0032 0A23     		mov	r3, #10
 1133 0034 FB18     		add	r3, r7, r3
 1134 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1135              		.loc 1 828 0
 1136 0038 0A23     		mov	r3, #10
 1137 003a FB18     		add	r3, r7, r3
 1138 003c 1B88     		ldrh	r3, [r3]
 1139 003e 1BB2     		sxth	r3, r3
 1140 0040 3B60     		str	r3, [r7]
 1141 0042 DB17     		asr	r3, r3, #31
 1142 0044 7B60     		str	r3, [r7, #4]
 1143 0046 3868     		ldr	r0, [r7]
 1144 0048 7968     		ldr	r1, [r7, #4]
 1145 004a 0F4A     		ldr	r2, .L81+4
 1146 004c 0023     		mov	r3, #0
 1147 004e FFF7FEFF 		bl	__aeabi_lmul
 1148 0052 021C     		mov	r2, r0
 1149 0054 0B1C     		mov	r3, r1
 1150 0056 101C     		mov	r0, r2
 1151 0058 191C     		mov	r1, r3
 1152 005a 0C4B     		ldr	r3, .L81+8
 1153 005c FA68     		ldr	r2, [r7, #12]
 1154 005e 9200     		lsl	r2, r2, #2
 1155 0060 D358     		ldr	r3, [r2, r3]
 1156 0062 1C1C     		mov	r4, r3
 1157 0064 DB17     		asr	r3, r3, #31
 1158 0066 1D1C     		mov	r5, r3
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 36


 1159 0068 221C     		mov	r2, r4
 1160 006a 2B1C     		mov	r3, r5
 1161 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1162 0070 031C     		mov	r3, r0
 1163 0072 0C1C     		mov	r4, r1
 1164 0074 3B61     		str	r3, [r7, #16]
 1165 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1166              		.loc 1 830 0
 1167 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1168              		.loc 1 831 0
 1169 007a 181C     		mov	r0, r3
 1170 007c BD46     		mov	sp, r7
 1171 007e 06B0     		add	sp, sp, #24
 1172              		@ sp needed
 1173 0080 B0BD     		pop	{r4, r5, r7, pc}
 1174              	.L82:
 1175 0082 C046     		.align	2
 1176              	.L81:
 1177 0084 00000000 		.word	ADC_offset
 1178 0088 80969800 		.word	10000000
 1179 008c 00000000 		.word	ADC_countsPer10Volt
 1180              		.cfi_endproc
 1181              	.LFE18:
 1182              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1183              		.global	__aeabi_i2f
 1184              		.global	__aeabi_fmul
 1185              		.global	__aeabi_fdiv
 1186              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1187              		.align	2
 1188              		.global	ADC_CountsTo_Volts
 1189              		.code	16
 1190              		.thumb_func
 1191              		.type	ADC_CountsTo_Volts, %function
 1192              	ADC_CountsTo_Volts:
 1193              	.LFB19:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 37


 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1194              		.loc 1 856 0
 1195              		.cfi_startproc
 1196 0000 90B5     		push	{r4, r7, lr}
 1197              		.cfi_def_cfa_offset 12
 1198              		.cfi_offset 4, -12
 1199              		.cfi_offset 7, -8
 1200              		.cfi_offset 14, -4
 1201 0002 85B0     		sub	sp, sp, #20
 1202              		.cfi_def_cfa_offset 32
 1203 0004 00AF     		add	r7, sp, #0
 1204              		.cfi_def_cfa_register 7
 1205 0006 7860     		str	r0, [r7, #4]
 1206 0008 0A1C     		mov	r2, r1
 1207 000a BB1C     		add	r3, r7, #2
 1208 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1209              		.loc 1 860 0
 1210 000e 7B68     		ldr	r3, [r7, #4]
 1211 0010 032B     		cmp	r3, #3
 1212 0012 02D9     		bls	.L84
 1213              		.loc 1 860 0 is_stmt 0 discriminator 1
 1214 0014 0020     		mov	r0, #0
 1215 0016 FFF7FEFF 		bl	CyHalt
 1216              	.L84:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1217              		.loc 1 871 0 is_stmt 1
 1218 001a 164B     		ldr	r3, .L86
 1219 001c 7A68     		ldr	r2, [r7, #4]
 1220 001e 5200     		lsl	r2, r2, #1
 1221 0020 D35A     		ldrh	r3, [r2, r3]
 1222 0022 99B2     		uxth	r1, r3
 1223 0024 BB1C     		add	r3, r7, #2
 1224 0026 1A88     		ldrh	r2, [r3]
 1225 0028 8BB2     		uxth	r3, r1
 1226 002a D31A     		sub	r3, r2, r3
 1227 002c 9AB2     		uxth	r2, r3
 1228 002e BB1C     		add	r3, r7, #2
 1229 0030 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 38


 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1230              		.loc 1 873 0
 1231 0032 BB1C     		add	r3, r7, #2
 1232 0034 0022     		mov	r2, #0
 1233 0036 9B5E     		ldrsh	r3, [r3, r2]
 1234 0038 181C     		mov	r0, r3
 1235 003a FFF7FEFF 		bl	__aeabi_i2f
 1236 003e 031C     		add	r3, r0, #0
 1237 0040 181C     		add	r0, r3, #0
 1238 0042 0D49     		ldr	r1, .L86+4
 1239 0044 FFF7FEFF 		bl	__aeabi_fmul
 1240 0048 031C     		add	r3, r0, #0
 1241 004a 1C1C     		add	r4, r3, #0
 1242 004c 0B4B     		ldr	r3, .L86+8
 1243 004e 7A68     		ldr	r2, [r7, #4]
 1244 0050 9200     		lsl	r2, r2, #2
 1245 0052 D358     		ldr	r3, [r2, r3]
 1246 0054 181C     		mov	r0, r3
 1247 0056 FFF7FEFF 		bl	__aeabi_i2f
 1248 005a 031C     		add	r3, r0, #0
 1249 005c 201C     		add	r0, r4, #0
 1250 005e 191C     		add	r1, r3, #0
 1251 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1252 0064 031C     		add	r3, r0, #0
 1253 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1254              		.loc 1 875 0
 1255 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1256              		.loc 1 876 0
 1257 006a 181C     		add	r0, r3, #0
 1258 006c BD46     		mov	sp, r7
 1259 006e 05B0     		add	sp, sp, #20
 1260              		@ sp needed
 1261 0070 90BD     		pop	{r4, r7, pc}
 1262              	.L87:
 1263 0072 C046     		.align	2
 1264              	.L86:
 1265 0074 00000000 		.word	ADC_offset
 1266 0078 00002041 		.word	1092616192
 1267 007c 00000000 		.word	ADC_countsPer10Volt
 1268              		.cfi_endproc
 1269              	.LFE19:
 1270              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1271              		.section	.rodata
 1272              		.align	2
 1273              		.type	ADC_InputsPlacement.4788, %object
 1274              		.size	ADC_InputsPlacement.4788, 4
 1275              	ADC_InputsPlacement.4788:
 1276 0010 02       		.byte	2
 1277 0011 03       		.byte	3
 1278 0012 06       		.byte	6
 1279 0013 07       		.byte	7
 1280              		.text
 1281              	.Letext0:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 39


 1282              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1283              		.section	.debug_info,"",%progbits
 1284              	.Ldebug_info0:
 1285 0000 9D040000 		.4byte	0x49d
 1286 0004 0400     		.2byte	0x4
 1287 0006 00000000 		.4byte	.Ldebug_abbrev0
 1288 000a 04       		.byte	0x4
 1289 000b 01       		.uleb128 0x1
 1290 000c 1F030000 		.4byte	.LASF60
 1291 0010 01       		.byte	0x1
 1292 0011 43020000 		.4byte	.LASF61
 1293 0015 07000000 		.4byte	.LASF62
 1294 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1295 001d 00000000 		.4byte	0
 1296 0021 00000000 		.4byte	.Ldebug_line0
 1297 0025 02       		.uleb128 0x2
 1298 0026 01       		.byte	0x1
 1299 0027 06       		.byte	0x6
 1300 0028 E7000000 		.4byte	.LASF0
 1301 002c 02       		.uleb128 0x2
 1302 002d 01       		.byte	0x1
 1303 002e 08       		.byte	0x8
 1304 002f A0020000 		.4byte	.LASF1
 1305 0033 02       		.uleb128 0x2
 1306 0034 02       		.byte	0x2
 1307 0035 05       		.byte	0x5
 1308 0036 B9020000 		.4byte	.LASF2
 1309 003a 02       		.uleb128 0x2
 1310 003b 02       		.byte	0x2
 1311 003c 07       		.byte	0x7
 1312 003d BE010000 		.4byte	.LASF3
 1313 0041 02       		.uleb128 0x2
 1314 0042 04       		.byte	0x4
 1315 0043 05       		.byte	0x5
 1316 0044 0A010000 		.4byte	.LASF4
 1317 0048 02       		.uleb128 0x2
 1318 0049 04       		.byte	0x4
 1319 004a 07       		.byte	0x7
 1320 004b 8D010000 		.4byte	.LASF5
 1321 004f 02       		.uleb128 0x2
 1322 0050 08       		.byte	0x8
 1323 0051 05       		.byte	0x5
 1324 0052 D9000000 		.4byte	.LASF6
 1325 0056 02       		.uleb128 0x2
 1326 0057 08       		.byte	0x8
 1327 0058 07       		.byte	0x7
 1328 0059 9D000000 		.4byte	.LASF7
 1329 005d 03       		.uleb128 0x3
 1330 005e 04       		.byte	0x4
 1331 005f 05       		.byte	0x5
 1332 0060 696E7400 		.ascii	"int\000"
 1333 0064 02       		.uleb128 0x2
 1334 0065 04       		.byte	0x4
 1335 0066 07       		.byte	0x7
 1336 0067 79010000 		.4byte	.LASF8
 1337 006b 04       		.uleb128 0x4
 1338 006c 3B010000 		.4byte	.LASF9
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 40


 1339 0070 02       		.byte	0x2
 1340 0071 B901     		.2byte	0x1b9
 1341 0073 2C000000 		.4byte	0x2c
 1342 0077 04       		.uleb128 0x4
 1343 0078 00000000 		.4byte	.LASF10
 1344 007c 02       		.byte	0x2
 1345 007d BA01     		.2byte	0x1ba
 1346 007f 3A000000 		.4byte	0x3a
 1347 0083 04       		.uleb128 0x4
 1348 0084 48010000 		.4byte	.LASF11
 1349 0088 02       		.byte	0x2
 1350 0089 BB01     		.2byte	0x1bb
 1351 008b 48000000 		.4byte	0x48
 1352 008f 04       		.uleb128 0x4
 1353 0090 0B030000 		.4byte	.LASF12
 1354 0094 02       		.byte	0x2
 1355 0095 BD01     		.2byte	0x1bd
 1356 0097 33000000 		.4byte	0x33
 1357 009b 04       		.uleb128 0x4
 1358 009c FA000000 		.4byte	.LASF13
 1359 00a0 02       		.byte	0x2
 1360 00a1 BE01     		.2byte	0x1be
 1361 00a3 41000000 		.4byte	0x41
 1362 00a7 04       		.uleb128 0x4
 1363 00a8 EE010000 		.4byte	.LASF14
 1364 00ac 02       		.byte	0x2
 1365 00ad BF01     		.2byte	0x1bf
 1366 00af B3000000 		.4byte	0xb3
 1367 00b3 02       		.uleb128 0x2
 1368 00b4 04       		.byte	0x4
 1369 00b5 04       		.byte	0x4
 1370 00b6 6C020000 		.4byte	.LASF15
 1371 00ba 02       		.uleb128 0x2
 1372 00bb 08       		.byte	0x8
 1373 00bc 04       		.byte	0x4
 1374 00bd 41010000 		.4byte	.LASF16
 1375 00c1 04       		.uleb128 0x4
 1376 00c2 2D020000 		.4byte	.LASF17
 1377 00c6 02       		.byte	0x2
 1378 00c7 C401     		.2byte	0x1c4
 1379 00c9 4F000000 		.4byte	0x4f
 1380 00cd 02       		.uleb128 0x2
 1381 00ce 01       		.byte	0x1
 1382 00cf 08       		.byte	0x8
 1383 00d0 D7020000 		.4byte	.LASF18
 1384 00d4 04       		.uleb128 0x4
 1385 00d5 E8010000 		.4byte	.LASF19
 1386 00d9 02       		.byte	0x2
 1387 00da 6502     		.2byte	0x265
 1388 00dc E0000000 		.4byte	0xe0
 1389 00e0 05       		.uleb128 0x5
 1390 00e1 83000000 		.4byte	0x83
 1391 00e5 02       		.uleb128 0x2
 1392 00e6 04       		.byte	0x4
 1393 00e7 07       		.byte	0x7
 1394 00e8 F6010000 		.4byte	.LASF20
 1395 00ec 06       		.uleb128 0x6
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 41


 1396 00ed 00010000 		.4byte	.LASF25
 1397 00f1 01       		.byte	0x1
 1398 00f2 3F       		.byte	0x3f
 1399 00f3 00000000 		.4byte	.LFB2
 1400 00f7 24000000 		.4byte	.LFE2-.LFB2
 1401 00fb 01       		.uleb128 0x1
 1402 00fc 9C       		.byte	0x9c
 1403 00fd 07       		.uleb128 0x7
 1404 00fe 94000000 		.4byte	.LASF36
 1405 0102 01       		.byte	0x1
 1406 0103 5E       		.byte	0x5e
 1407 0104 00000000 		.4byte	.LFB3
 1408 0108 0C020000 		.4byte	.LFE3-.LFB3
 1409 010c 01       		.uleb128 0x1
 1410 010d 9C       		.byte	0x9c
 1411 010e 4E010000 		.4byte	0x14e
 1412 0112 08       		.uleb128 0x8
 1413 0113 CC020000 		.4byte	.LASF21
 1414 0117 01       		.byte	0x1
 1415 0118 60       		.byte	0x60
 1416 0119 83000000 		.4byte	0x83
 1417 011d 02       		.uleb128 0x2
 1418 011e 91       		.byte	0x91
 1419 011f 74       		.sleb128 -12
 1420 0120 08       		.uleb128 0x8
 1421 0121 B4010000 		.4byte	.LASF22
 1422 0125 01       		.byte	0x1
 1423 0126 61       		.byte	0x61
 1424 0127 83000000 		.4byte	0x83
 1425 012b 02       		.uleb128 0x2
 1426 012c 91       		.byte	0x91
 1427 012d 6C       		.sleb128 -20
 1428 012e 08       		.uleb128 0x8
 1429 012f 7A000000 		.4byte	.LASF23
 1430 0133 01       		.byte	0x1
 1431 0134 62       		.byte	0x62
 1432 0135 9B000000 		.4byte	0x9b
 1433 0139 02       		.uleb128 0x2
 1434 013a 91       		.byte	0x91
 1435 013b 70       		.sleb128 -16
 1436 013c 08       		.uleb128 0x8
 1437 013d B4000000 		.4byte	.LASF24
 1438 0141 01       		.byte	0x1
 1439 0142 65       		.byte	0x65
 1440 0143 5E010000 		.4byte	0x15e
 1441 0147 05       		.uleb128 0x5
 1442 0148 03       		.byte	0x3
 1443 0149 10000000 		.4byte	ADC_InputsPlacement.4788
 1444 014d 00       		.byte	0
 1445 014e 09       		.uleb128 0x9
 1446 014f 6B000000 		.4byte	0x6b
 1447 0153 5E010000 		.4byte	0x15e
 1448 0157 0A       		.uleb128 0xa
 1449 0158 E5000000 		.4byte	0xe5
 1450 015c 03       		.byte	0x3
 1451 015d 00       		.byte	0
 1452 015e 0B       		.uleb128 0xb
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 42


 1453 015f 4E010000 		.4byte	0x14e
 1454 0163 0C       		.uleb128 0xc
 1455 0164 00030000 		.4byte	.LASF26
 1456 0168 01       		.byte	0x1
 1457 0169 4A01     		.2byte	0x14a
 1458 016b 00000000 		.4byte	.LFB4
 1459 016f 38000000 		.4byte	.LFE4-.LFB4
 1460 0173 01       		.uleb128 0x1
 1461 0174 9C       		.byte	0x9c
 1462 0175 0D       		.uleb128 0xd
 1463 0176 C3020000 		.4byte	.LASF27
 1464 017a 01       		.byte	0x1
 1465 017b 6D01     		.2byte	0x16d
 1466 017d 00000000 		.4byte	.LFB5
 1467 0181 18000000 		.4byte	.LFE5-.LFB5
 1468 0185 01       		.uleb128 0x1
 1469 0186 9C       		.byte	0x9c
 1470 0187 0D       		.uleb128 0xd
 1471 0188 C8000000 		.4byte	.LASF28
 1472 018c 01       		.byte	0x1
 1473 018d 8701     		.2byte	0x187
 1474 018f 00000000 		.4byte	.LFB6
 1475 0193 1C000000 		.4byte	.LFE6-.LFB6
 1476 0197 01       		.uleb128 0x1
 1477 0198 9C       		.byte	0x9c
 1478 0199 0D       		.uleb128 0xd
 1479 019a D1010000 		.4byte	.LASF29
 1480 019e 01       		.byte	0x1
 1481 019f A001     		.2byte	0x1a0
 1482 01a1 00000000 		.4byte	.LFB7
 1483 01a5 1C000000 		.4byte	.LFE7-.LFB7
 1484 01a9 01       		.uleb128 0x1
 1485 01aa 9C       		.byte	0x9c
 1486 01ab 0E       		.uleb128 0xe
 1487 01ac 19020000 		.4byte	.LASF31
 1488 01b0 01       		.byte	0x1
 1489 01b1 C201     		.2byte	0x1c2
 1490 01b3 83000000 		.4byte	0x83
 1491 01b7 00000000 		.4byte	.LFB8
 1492 01bb 48000000 		.4byte	.LFE8-.LFB8
 1493 01bf 01       		.uleb128 0x1
 1494 01c0 9C       		.byte	0x9c
 1495 01c1 E4010000 		.4byte	0x1e4
 1496 01c5 0F       		.uleb128 0xf
 1497 01c6 60010000 		.4byte	.LASF33
 1498 01ca 01       		.byte	0x1
 1499 01cb C201     		.2byte	0x1c2
 1500 01cd 83000000 		.4byte	0x83
 1501 01d1 02       		.uleb128 0x2
 1502 01d2 91       		.byte	0x91
 1503 01d3 6C       		.sleb128 -20
 1504 01d4 10       		.uleb128 0x10
 1505 01d5 F3000000 		.4byte	.LASF30
 1506 01d9 01       		.byte	0x1
 1507 01da C401     		.2byte	0x1c4
 1508 01dc 83000000 		.4byte	0x83
 1509 01e0 02       		.uleb128 0x2
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 43


 1510 01e1 91       		.byte	0x91
 1511 01e2 74       		.sleb128 -12
 1512 01e3 00       		.byte	0
 1513 01e4 11       		.uleb128 0x11
 1514 01e5 B4030000 		.4byte	.LASF32
 1515 01e9 01       		.byte	0x1
 1516 01ea F801     		.2byte	0x1f8
 1517 01ec 8F000000 		.4byte	0x8f
 1518 01f0 00000000 		.4byte	.LFB9
 1519 01f4 44000000 		.4byte	.LFE9-.LFB9
 1520 01f8 01       		.uleb128 0x1
 1521 01f9 9C       		.byte	0x9c
 1522 01fa 1D020000 		.4byte	0x21d
 1523 01fe 0F       		.uleb128 0xf
 1524 01ff D2020000 		.4byte	.LASF34
 1525 0203 01       		.byte	0x1
 1526 0204 F801     		.2byte	0x1f8
 1527 0206 83000000 		.4byte	0x83
 1528 020a 02       		.uleb128 0x2
 1529 020b 91       		.byte	0x91
 1530 020c 6C       		.sleb128 -20
 1531 020d 10       		.uleb128 0x10
 1532 020e AD030000 		.4byte	.LASF35
 1533 0212 01       		.byte	0x1
 1534 0213 FA01     		.2byte	0x1fa
 1535 0215 83000000 		.4byte	0x83
 1536 0219 02       		.uleb128 0x2
 1537 021a 91       		.byte	0x91
 1538 021b 74       		.sleb128 -12
 1539 021c 00       		.byte	0
 1540 021d 12       		.uleb128 0x12
 1541 021e 33020000 		.4byte	.LASF37
 1542 0222 01       		.byte	0x1
 1543 0223 2502     		.2byte	0x225
 1544 0225 00000000 		.4byte	.LFB10
 1545 0229 1C000000 		.4byte	.LFE10-.LFB10
 1546 022d 01       		.uleb128 0x1
 1547 022e 9C       		.byte	0x9c
 1548 022f 43020000 		.4byte	0x243
 1549 0233 0F       		.uleb128 0xf
 1550 0234 4F010000 		.4byte	.LASF38
 1551 0238 01       		.byte	0x1
 1552 0239 2502     		.2byte	0x225
 1553 023b 83000000 		.4byte	0x83
 1554 023f 02       		.uleb128 0x2
 1555 0240 91       		.byte	0x91
 1556 0241 74       		.sleb128 -12
 1557 0242 00       		.byte	0
 1558 0243 12       		.uleb128 0x12
 1559 0244 90020000 		.4byte	.LASF39
 1560 0248 01       		.byte	0x1
 1561 0249 5102     		.2byte	0x251
 1562 024b 00000000 		.4byte	.LFB11
 1563 024f 30000000 		.4byte	.LFE11-.LFB11
 1564 0253 01       		.uleb128 0x1
 1565 0254 9C       		.byte	0x9c
 1566 0255 69020000 		.4byte	0x269
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 44


 1567 0259 0F       		.uleb128 0xf
 1568 025a FF010000 		.4byte	.LASF40
 1569 025e 01       		.byte	0x1
 1570 025f 5102     		.2byte	0x251
 1571 0261 83000000 		.4byte	0x83
 1572 0265 02       		.uleb128 0x2
 1573 0266 91       		.byte	0x91
 1574 0267 74       		.sleb128 -12
 1575 0268 00       		.byte	0
 1576 0269 12       		.uleb128 0x12
 1577 026a 08020000 		.4byte	.LASF41
 1578 026e 01       		.byte	0x1
 1579 026f 6602     		.2byte	0x266
 1580 0271 00000000 		.4byte	.LFB12
 1581 0275 2C000000 		.4byte	.LFE12-.LFB12
 1582 0279 01       		.uleb128 0x1
 1583 027a 9C       		.byte	0x9c
 1584 027b 8F020000 		.4byte	0x28f
 1585 027f 0F       		.uleb128 0xf
 1586 0280 72020000 		.4byte	.LASF42
 1587 0284 01       		.byte	0x1
 1588 0285 6602     		.2byte	0x266
 1589 0287 83000000 		.4byte	0x83
 1590 028b 02       		.uleb128 0x2
 1591 028c 91       		.byte	0x91
 1592 028d 74       		.sleb128 -12
 1593 028e 00       		.byte	0
 1594 028f 12       		.uleb128 0x12
 1595 0290 68010000 		.4byte	.LASF43
 1596 0294 01       		.byte	0x1
 1597 0295 7E02     		.2byte	0x27e
 1598 0297 00000000 		.4byte	.LFB13
 1599 029b 1C000000 		.4byte	.LFE13-.LFB13
 1600 029f 01       		.uleb128 0x1
 1601 02a0 9C       		.byte	0x9c
 1602 02a1 B5020000 		.4byte	0x2b5
 1603 02a5 0F       		.uleb128 0xf
 1604 02a6 4F010000 		.4byte	.LASF38
 1605 02aa 01       		.byte	0x1
 1606 02ab 7E02     		.2byte	0x27e
 1607 02ad 83000000 		.4byte	0x83
 1608 02b1 02       		.uleb128 0x2
 1609 02b2 91       		.byte	0x91
 1610 02b3 74       		.sleb128 -12
 1611 02b4 00       		.byte	0
 1612 02b5 12       		.uleb128 0x12
 1613 02b6 9F010000 		.4byte	.LASF44
 1614 02ba 01       		.byte	0x1
 1615 02bb 9502     		.2byte	0x295
 1616 02bd 00000000 		.4byte	.LFB14
 1617 02c1 1C000000 		.4byte	.LFE14-.LFB14
 1618 02c5 01       		.uleb128 0x1
 1619 02c6 9C       		.byte	0x9c
 1620 02c7 DB020000 		.4byte	0x2db
 1621 02cb 0F       		.uleb128 0xf
 1622 02cc 4F010000 		.4byte	.LASF38
 1623 02d0 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 45


 1624 02d1 9502     		.2byte	0x295
 1625 02d3 83000000 		.4byte	0x83
 1626 02d7 02       		.uleb128 0x2
 1627 02d8 91       		.byte	0x91
 1628 02d9 74       		.sleb128 -12
 1629 02da 00       		.byte	0
 1630 02db 13       		.uleb128 0x13
 1631 02dc 11030000 		.4byte	.LASF45
 1632 02e0 01       		.byte	0x1
 1633 02e1 B102     		.2byte	0x2b1
 1634 02e3 00000000 		.4byte	.LFB15
 1635 02e7 30000000 		.4byte	.LFE15-.LFB15
 1636 02eb 01       		.uleb128 0x1
 1637 02ec 9C       		.byte	0x9c
 1638 02ed 10030000 		.4byte	0x310
 1639 02f1 0F       		.uleb128 0xf
 1640 02f2 D2020000 		.4byte	.LASF34
 1641 02f6 01       		.byte	0x1
 1642 02f7 B102     		.2byte	0x2b1
 1643 02f9 83000000 		.4byte	0x83
 1644 02fd 02       		.uleb128 0x2
 1645 02fe 91       		.byte	0x91
 1646 02ff 74       		.sleb128 -12
 1647 0300 0F       		.uleb128 0xf
 1648 0301 EF020000 		.4byte	.LASF46
 1649 0305 01       		.byte	0x1
 1650 0306 B102     		.2byte	0x2b1
 1651 0308 8F000000 		.4byte	0x8f
 1652 030c 02       		.uleb128 0x2
 1653 030d 91       		.byte	0x91
 1654 030e 72       		.sleb128 -14
 1655 030f 00       		.byte	0
 1656 0310 13       		.uleb128 0x13
 1657 0311 60020000 		.4byte	.LASF47
 1658 0315 01       		.byte	0x1
 1659 0316 D302     		.2byte	0x2d3
 1660 0318 00000000 		.4byte	.LFB16
 1661 031c 2C000000 		.4byte	.LFE16-.LFB16
 1662 0320 01       		.uleb128 0x1
 1663 0321 9C       		.byte	0x9c
 1664 0322 45030000 		.4byte	0x345
 1665 0326 0F       		.uleb128 0xf
 1666 0327 D2020000 		.4byte	.LASF34
 1667 032b 01       		.byte	0x1
 1668 032c D302     		.2byte	0x2d3
 1669 032e 83000000 		.4byte	0x83
 1670 0332 02       		.uleb128 0x2
 1671 0333 91       		.byte	0x91
 1672 0334 74       		.sleb128 -12
 1673 0335 0F       		.uleb128 0xf
 1674 0336 72000000 		.4byte	.LASF48
 1675 033a 01       		.byte	0x1
 1676 033b D302     		.2byte	0x2d3
 1677 033d 9B000000 		.4byte	0x9b
 1678 0341 02       		.uleb128 0x2
 1679 0342 91       		.byte	0x91
 1680 0343 70       		.sleb128 -16
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 46


 1681 0344 00       		.byte	0
 1682 0345 11       		.uleb128 0x11
 1683 0346 7C020000 		.4byte	.LASF49
 1684 034a 01       		.byte	0x1
 1685 034b F402     		.2byte	0x2f4
 1686 034d 8F000000 		.4byte	0x8f
 1687 0351 00000000 		.4byte	.LFB17
 1688 0355 A4000000 		.4byte	.LFE17-.LFB17
 1689 0359 01       		.uleb128 0x1
 1690 035a 9C       		.byte	0x9c
 1691 035b 8D030000 		.4byte	0x38d
 1692 035f 0F       		.uleb128 0xf
 1693 0360 D2020000 		.4byte	.LASF34
 1694 0364 01       		.byte	0x1
 1695 0365 F402     		.2byte	0x2f4
 1696 0367 83000000 		.4byte	0x83
 1697 036b 02       		.uleb128 0x2
 1698 036c 91       		.byte	0x91
 1699 036d 6C       		.sleb128 -20
 1700 036e 0F       		.uleb128 0xf
 1701 036f F6020000 		.4byte	.LASF50
 1702 0373 01       		.byte	0x1
 1703 0374 F402     		.2byte	0x2f4
 1704 0376 8F000000 		.4byte	0x8f
 1705 037a 02       		.uleb128 0x2
 1706 037b 91       		.byte	0x91
 1707 037c 6A       		.sleb128 -22
 1708 037d 10       		.uleb128 0x10
 1709 037e E1010000 		.4byte	.LASF51
 1710 0382 01       		.byte	0x1
 1711 0383 F602     		.2byte	0x2f6
 1712 0385 8F000000 		.4byte	0x8f
 1713 0389 02       		.uleb128 0x2
 1714 038a 91       		.byte	0x91
 1715 038b 76       		.sleb128 -10
 1716 038c 00       		.byte	0
 1717 038d 11       		.uleb128 0x11
 1718 038e 13010000 		.4byte	.LASF52
 1719 0392 01       		.byte	0x1
 1720 0393 2A03     		.2byte	0x32a
 1721 0395 9B000000 		.4byte	0x9b
 1722 0399 00000000 		.4byte	.LFB18
 1723 039d 90000000 		.4byte	.LFE18-.LFB18
 1724 03a1 01       		.uleb128 0x1
 1725 03a2 9C       		.byte	0x9c
 1726 03a3 D5030000 		.4byte	0x3d5
 1727 03a7 0F       		.uleb128 0xf
 1728 03a8 D2020000 		.4byte	.LASF34
 1729 03ac 01       		.byte	0x1
 1730 03ad 2A03     		.2byte	0x32a
 1731 03af 83000000 		.4byte	0x83
 1732 03b3 02       		.uleb128 0x2
 1733 03b4 91       		.byte	0x91
 1734 03b5 64       		.sleb128 -28
 1735 03b6 0F       		.uleb128 0xf
 1736 03b7 F6020000 		.4byte	.LASF50
 1737 03bb 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 47


 1738 03bc 2A03     		.2byte	0x32a
 1739 03be 8F000000 		.4byte	0x8f
 1740 03c2 02       		.uleb128 0x2
 1741 03c3 91       		.byte	0x91
 1742 03c4 62       		.sleb128 -30
 1743 03c5 10       		.uleb128 0x10
 1744 03c6 86010000 		.4byte	.LASF53
 1745 03ca 01       		.byte	0x1
 1746 03cb 2C03     		.2byte	0x32c
 1747 03cd C1000000 		.4byte	0xc1
 1748 03d1 02       		.uleb128 0x2
 1749 03d2 91       		.byte	0x91
 1750 03d3 68       		.sleb128 -24
 1751 03d4 00       		.byte	0
 1752 03d5 11       		.uleb128 0x11
 1753 03d6 81000000 		.4byte	.LASF54
 1754 03da 01       		.byte	0x1
 1755 03db 5703     		.2byte	0x357
 1756 03dd A7000000 		.4byte	0xa7
 1757 03e1 00000000 		.4byte	.LFB19
 1758 03e5 80000000 		.4byte	.LFE19-.LFB19
 1759 03e9 01       		.uleb128 0x1
 1760 03ea 9C       		.byte	0x9c
 1761 03eb 1D040000 		.4byte	0x41d
 1762 03ef 0F       		.uleb128 0xf
 1763 03f0 D2020000 		.4byte	.LASF34
 1764 03f4 01       		.byte	0x1
 1765 03f5 5703     		.2byte	0x357
 1766 03f7 83000000 		.4byte	0x83
 1767 03fb 02       		.uleb128 0x2
 1768 03fc 91       		.byte	0x91
 1769 03fd 64       		.sleb128 -28
 1770 03fe 0F       		.uleb128 0xf
 1771 03ff F6020000 		.4byte	.LASF50
 1772 0403 01       		.byte	0x1
 1773 0404 5703     		.2byte	0x357
 1774 0406 8F000000 		.4byte	0x8f
 1775 040a 02       		.uleb128 0x2
 1776 040b 91       		.byte	0x91
 1777 040c 62       		.sleb128 -30
 1778 040d 10       		.uleb128 0x10
 1779 040e AE010000 		.4byte	.LASF55
 1780 0412 01       		.byte	0x1
 1781 0413 5903     		.2byte	0x359
 1782 0415 A7000000 		.4byte	0xa7
 1783 0419 02       		.uleb128 0x2
 1784 041a 91       		.byte	0x91
 1785 041b 6C       		.sleb128 -20
 1786 041c 00       		.byte	0
 1787 041d 09       		.uleb128 0x9
 1788 041e 83000000 		.4byte	0x83
 1789 0422 2D040000 		.4byte	0x42d
 1790 0426 0A       		.uleb128 0xa
 1791 0427 E5000000 		.4byte	0xe5
 1792 042b 03       		.byte	0x3
 1793 042c 00       		.byte	0
 1794 042d 08       		.uleb128 0x8
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 48


 1795 042e DC020000 		.4byte	.LASF56
 1796 0432 01       		.byte	0x1
 1797 0433 21       		.byte	0x21
 1798 0434 3E040000 		.4byte	0x43e
 1799 0438 05       		.uleb128 0x5
 1800 0439 03       		.byte	0x3
 1801 043a 00000000 		.4byte	ADC_channelsConfig
 1802 043e 0B       		.uleb128 0xb
 1803 043f 1D040000 		.4byte	0x41d
 1804 0443 14       		.uleb128 0x14
 1805 0444 54010000 		.4byte	.LASF57
 1806 0448 01       		.byte	0x1
 1807 0449 18       		.byte	0x18
 1808 044a 6B000000 		.4byte	0x6b
 1809 044e 05       		.uleb128 0x5
 1810 044f 03       		.byte	0x3
 1811 0450 00000000 		.4byte	ADC_initVar
 1812 0454 09       		.uleb128 0x9
 1813 0455 8F000000 		.4byte	0x8f
 1814 0459 64040000 		.4byte	0x464
 1815 045d 0A       		.uleb128 0xa
 1816 045e E5000000 		.4byte	0xe5
 1817 0462 03       		.byte	0x3
 1818 0463 00       		.byte	0
 1819 0464 14       		.uleb128 0x14
 1820 0465 AE020000 		.4byte	.LASF58
 1821 0469 01       		.byte	0x1
 1822 046a 19       		.byte	0x19
 1823 046b 75040000 		.4byte	0x475
 1824 046f 05       		.uleb128 0x5
 1825 0470 03       		.byte	0x3
 1826 0471 00000000 		.4byte	ADC_offset
 1827 0475 05       		.uleb128 0x5
 1828 0476 54040000 		.4byte	0x454
 1829 047a 09       		.uleb128 0x9
 1830 047b 9B000000 		.4byte	0x9b
 1831 047f 8A040000 		.4byte	0x48a
 1832 0483 0A       		.uleb128 0xa
 1833 0484 E5000000 		.4byte	0xe5
 1834 0488 03       		.byte	0x3
 1835 0489 00       		.byte	0
 1836 048a 14       		.uleb128 0x14
 1837 048b 27010000 		.4byte	.LASF59
 1838 048f 01       		.byte	0x1
 1839 0490 1A       		.byte	0x1a
 1840 0491 9B040000 		.4byte	0x49b
 1841 0495 05       		.uleb128 0x5
 1842 0496 03       		.byte	0x3
 1843 0497 00000000 		.4byte	ADC_countsPer10Volt
 1844 049b 05       		.uleb128 0x5
 1845 049c 7A040000 		.4byte	0x47a
 1846 04a0 00       		.byte	0
 1847              		.section	.debug_abbrev,"",%progbits
 1848              	.Ldebug_abbrev0:
 1849 0000 01       		.uleb128 0x1
 1850 0001 11       		.uleb128 0x11
 1851 0002 01       		.byte	0x1
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 49


 1852 0003 25       		.uleb128 0x25
 1853 0004 0E       		.uleb128 0xe
 1854 0005 13       		.uleb128 0x13
 1855 0006 0B       		.uleb128 0xb
 1856 0007 03       		.uleb128 0x3
 1857 0008 0E       		.uleb128 0xe
 1858 0009 1B       		.uleb128 0x1b
 1859 000a 0E       		.uleb128 0xe
 1860 000b 55       		.uleb128 0x55
 1861 000c 17       		.uleb128 0x17
 1862 000d 11       		.uleb128 0x11
 1863 000e 01       		.uleb128 0x1
 1864 000f 10       		.uleb128 0x10
 1865 0010 17       		.uleb128 0x17
 1866 0011 00       		.byte	0
 1867 0012 00       		.byte	0
 1868 0013 02       		.uleb128 0x2
 1869 0014 24       		.uleb128 0x24
 1870 0015 00       		.byte	0
 1871 0016 0B       		.uleb128 0xb
 1872 0017 0B       		.uleb128 0xb
 1873 0018 3E       		.uleb128 0x3e
 1874 0019 0B       		.uleb128 0xb
 1875 001a 03       		.uleb128 0x3
 1876 001b 0E       		.uleb128 0xe
 1877 001c 00       		.byte	0
 1878 001d 00       		.byte	0
 1879 001e 03       		.uleb128 0x3
 1880 001f 24       		.uleb128 0x24
 1881 0020 00       		.byte	0
 1882 0021 0B       		.uleb128 0xb
 1883 0022 0B       		.uleb128 0xb
 1884 0023 3E       		.uleb128 0x3e
 1885 0024 0B       		.uleb128 0xb
 1886 0025 03       		.uleb128 0x3
 1887 0026 08       		.uleb128 0x8
 1888 0027 00       		.byte	0
 1889 0028 00       		.byte	0
 1890 0029 04       		.uleb128 0x4
 1891 002a 16       		.uleb128 0x16
 1892 002b 00       		.byte	0
 1893 002c 03       		.uleb128 0x3
 1894 002d 0E       		.uleb128 0xe
 1895 002e 3A       		.uleb128 0x3a
 1896 002f 0B       		.uleb128 0xb
 1897 0030 3B       		.uleb128 0x3b
 1898 0031 05       		.uleb128 0x5
 1899 0032 49       		.uleb128 0x49
 1900 0033 13       		.uleb128 0x13
 1901 0034 00       		.byte	0
 1902 0035 00       		.byte	0
 1903 0036 05       		.uleb128 0x5
 1904 0037 35       		.uleb128 0x35
 1905 0038 00       		.byte	0
 1906 0039 49       		.uleb128 0x49
 1907 003a 13       		.uleb128 0x13
 1908 003b 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 50


 1909 003c 00       		.byte	0
 1910 003d 06       		.uleb128 0x6
 1911 003e 2E       		.uleb128 0x2e
 1912 003f 00       		.byte	0
 1913 0040 3F       		.uleb128 0x3f
 1914 0041 19       		.uleb128 0x19
 1915 0042 03       		.uleb128 0x3
 1916 0043 0E       		.uleb128 0xe
 1917 0044 3A       		.uleb128 0x3a
 1918 0045 0B       		.uleb128 0xb
 1919 0046 3B       		.uleb128 0x3b
 1920 0047 0B       		.uleb128 0xb
 1921 0048 27       		.uleb128 0x27
 1922 0049 19       		.uleb128 0x19
 1923 004a 11       		.uleb128 0x11
 1924 004b 01       		.uleb128 0x1
 1925 004c 12       		.uleb128 0x12
 1926 004d 06       		.uleb128 0x6
 1927 004e 40       		.uleb128 0x40
 1928 004f 18       		.uleb128 0x18
 1929 0050 9642     		.uleb128 0x2116
 1930 0052 19       		.uleb128 0x19
 1931 0053 00       		.byte	0
 1932 0054 00       		.byte	0
 1933 0055 07       		.uleb128 0x7
 1934 0056 2E       		.uleb128 0x2e
 1935 0057 01       		.byte	0x1
 1936 0058 3F       		.uleb128 0x3f
 1937 0059 19       		.uleb128 0x19
 1938 005a 03       		.uleb128 0x3
 1939 005b 0E       		.uleb128 0xe
 1940 005c 3A       		.uleb128 0x3a
 1941 005d 0B       		.uleb128 0xb
 1942 005e 3B       		.uleb128 0x3b
 1943 005f 0B       		.uleb128 0xb
 1944 0060 27       		.uleb128 0x27
 1945 0061 19       		.uleb128 0x19
 1946 0062 11       		.uleb128 0x11
 1947 0063 01       		.uleb128 0x1
 1948 0064 12       		.uleb128 0x12
 1949 0065 06       		.uleb128 0x6
 1950 0066 40       		.uleb128 0x40
 1951 0067 18       		.uleb128 0x18
 1952 0068 9642     		.uleb128 0x2116
 1953 006a 19       		.uleb128 0x19
 1954 006b 01       		.uleb128 0x1
 1955 006c 13       		.uleb128 0x13
 1956 006d 00       		.byte	0
 1957 006e 00       		.byte	0
 1958 006f 08       		.uleb128 0x8
 1959 0070 34       		.uleb128 0x34
 1960 0071 00       		.byte	0
 1961 0072 03       		.uleb128 0x3
 1962 0073 0E       		.uleb128 0xe
 1963 0074 3A       		.uleb128 0x3a
 1964 0075 0B       		.uleb128 0xb
 1965 0076 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 51


 1966 0077 0B       		.uleb128 0xb
 1967 0078 49       		.uleb128 0x49
 1968 0079 13       		.uleb128 0x13
 1969 007a 02       		.uleb128 0x2
 1970 007b 18       		.uleb128 0x18
 1971 007c 00       		.byte	0
 1972 007d 00       		.byte	0
 1973 007e 09       		.uleb128 0x9
 1974 007f 01       		.uleb128 0x1
 1975 0080 01       		.byte	0x1
 1976 0081 49       		.uleb128 0x49
 1977 0082 13       		.uleb128 0x13
 1978 0083 01       		.uleb128 0x1
 1979 0084 13       		.uleb128 0x13
 1980 0085 00       		.byte	0
 1981 0086 00       		.byte	0
 1982 0087 0A       		.uleb128 0xa
 1983 0088 21       		.uleb128 0x21
 1984 0089 00       		.byte	0
 1985 008a 49       		.uleb128 0x49
 1986 008b 13       		.uleb128 0x13
 1987 008c 2F       		.uleb128 0x2f
 1988 008d 0B       		.uleb128 0xb
 1989 008e 00       		.byte	0
 1990 008f 00       		.byte	0
 1991 0090 0B       		.uleb128 0xb
 1992 0091 26       		.uleb128 0x26
 1993 0092 00       		.byte	0
 1994 0093 49       		.uleb128 0x49
 1995 0094 13       		.uleb128 0x13
 1996 0095 00       		.byte	0
 1997 0096 00       		.byte	0
 1998 0097 0C       		.uleb128 0xc
 1999 0098 2E       		.uleb128 0x2e
 2000 0099 00       		.byte	0
 2001 009a 3F       		.uleb128 0x3f
 2002 009b 19       		.uleb128 0x19
 2003 009c 03       		.uleb128 0x3
 2004 009d 0E       		.uleb128 0xe
 2005 009e 3A       		.uleb128 0x3a
 2006 009f 0B       		.uleb128 0xb
 2007 00a0 3B       		.uleb128 0x3b
 2008 00a1 05       		.uleb128 0x5
 2009 00a2 27       		.uleb128 0x27
 2010 00a3 19       		.uleb128 0x19
 2011 00a4 11       		.uleb128 0x11
 2012 00a5 01       		.uleb128 0x1
 2013 00a6 12       		.uleb128 0x12
 2014 00a7 06       		.uleb128 0x6
 2015 00a8 40       		.uleb128 0x40
 2016 00a9 18       		.uleb128 0x18
 2017 00aa 9642     		.uleb128 0x2116
 2018 00ac 19       		.uleb128 0x19
 2019 00ad 00       		.byte	0
 2020 00ae 00       		.byte	0
 2021 00af 0D       		.uleb128 0xd
 2022 00b0 2E       		.uleb128 0x2e
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 52


 2023 00b1 00       		.byte	0
 2024 00b2 3F       		.uleb128 0x3f
 2025 00b3 19       		.uleb128 0x19
 2026 00b4 03       		.uleb128 0x3
 2027 00b5 0E       		.uleb128 0xe
 2028 00b6 3A       		.uleb128 0x3a
 2029 00b7 0B       		.uleb128 0xb
 2030 00b8 3B       		.uleb128 0x3b
 2031 00b9 05       		.uleb128 0x5
 2032 00ba 27       		.uleb128 0x27
 2033 00bb 19       		.uleb128 0x19
 2034 00bc 11       		.uleb128 0x11
 2035 00bd 01       		.uleb128 0x1
 2036 00be 12       		.uleb128 0x12
 2037 00bf 06       		.uleb128 0x6
 2038 00c0 40       		.uleb128 0x40
 2039 00c1 18       		.uleb128 0x18
 2040 00c2 9742     		.uleb128 0x2117
 2041 00c4 19       		.uleb128 0x19
 2042 00c5 00       		.byte	0
 2043 00c6 00       		.byte	0
 2044 00c7 0E       		.uleb128 0xe
 2045 00c8 2E       		.uleb128 0x2e
 2046 00c9 01       		.byte	0x1
 2047 00ca 3F       		.uleb128 0x3f
 2048 00cb 19       		.uleb128 0x19
 2049 00cc 03       		.uleb128 0x3
 2050 00cd 0E       		.uleb128 0xe
 2051 00ce 3A       		.uleb128 0x3a
 2052 00cf 0B       		.uleb128 0xb
 2053 00d0 3B       		.uleb128 0x3b
 2054 00d1 05       		.uleb128 0x5
 2055 00d2 27       		.uleb128 0x27
 2056 00d3 19       		.uleb128 0x19
 2057 00d4 49       		.uleb128 0x49
 2058 00d5 13       		.uleb128 0x13
 2059 00d6 11       		.uleb128 0x11
 2060 00d7 01       		.uleb128 0x1
 2061 00d8 12       		.uleb128 0x12
 2062 00d9 06       		.uleb128 0x6
 2063 00da 40       		.uleb128 0x40
 2064 00db 18       		.uleb128 0x18
 2065 00dc 9742     		.uleb128 0x2117
 2066 00de 19       		.uleb128 0x19
 2067 00df 01       		.uleb128 0x1
 2068 00e0 13       		.uleb128 0x13
 2069 00e1 00       		.byte	0
 2070 00e2 00       		.byte	0
 2071 00e3 0F       		.uleb128 0xf
 2072 00e4 05       		.uleb128 0x5
 2073 00e5 00       		.byte	0
 2074 00e6 03       		.uleb128 0x3
 2075 00e7 0E       		.uleb128 0xe
 2076 00e8 3A       		.uleb128 0x3a
 2077 00e9 0B       		.uleb128 0xb
 2078 00ea 3B       		.uleb128 0x3b
 2079 00eb 05       		.uleb128 0x5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 53


 2080 00ec 49       		.uleb128 0x49
 2081 00ed 13       		.uleb128 0x13
 2082 00ee 02       		.uleb128 0x2
 2083 00ef 18       		.uleb128 0x18
 2084 00f0 00       		.byte	0
 2085 00f1 00       		.byte	0
 2086 00f2 10       		.uleb128 0x10
 2087 00f3 34       		.uleb128 0x34
 2088 00f4 00       		.byte	0
 2089 00f5 03       		.uleb128 0x3
 2090 00f6 0E       		.uleb128 0xe
 2091 00f7 3A       		.uleb128 0x3a
 2092 00f8 0B       		.uleb128 0xb
 2093 00f9 3B       		.uleb128 0x3b
 2094 00fa 05       		.uleb128 0x5
 2095 00fb 49       		.uleb128 0x49
 2096 00fc 13       		.uleb128 0x13
 2097 00fd 02       		.uleb128 0x2
 2098 00fe 18       		.uleb128 0x18
 2099 00ff 00       		.byte	0
 2100 0100 00       		.byte	0
 2101 0101 11       		.uleb128 0x11
 2102 0102 2E       		.uleb128 0x2e
 2103 0103 01       		.byte	0x1
 2104 0104 3F       		.uleb128 0x3f
 2105 0105 19       		.uleb128 0x19
 2106 0106 03       		.uleb128 0x3
 2107 0107 0E       		.uleb128 0xe
 2108 0108 3A       		.uleb128 0x3a
 2109 0109 0B       		.uleb128 0xb
 2110 010a 3B       		.uleb128 0x3b
 2111 010b 05       		.uleb128 0x5
 2112 010c 27       		.uleb128 0x27
 2113 010d 19       		.uleb128 0x19
 2114 010e 49       		.uleb128 0x49
 2115 010f 13       		.uleb128 0x13
 2116 0110 11       		.uleb128 0x11
 2117 0111 01       		.uleb128 0x1
 2118 0112 12       		.uleb128 0x12
 2119 0113 06       		.uleb128 0x6
 2120 0114 40       		.uleb128 0x40
 2121 0115 18       		.uleb128 0x18
 2122 0116 9642     		.uleb128 0x2116
 2123 0118 19       		.uleb128 0x19
 2124 0119 01       		.uleb128 0x1
 2125 011a 13       		.uleb128 0x13
 2126 011b 00       		.byte	0
 2127 011c 00       		.byte	0
 2128 011d 12       		.uleb128 0x12
 2129 011e 2E       		.uleb128 0x2e
 2130 011f 01       		.byte	0x1
 2131 0120 3F       		.uleb128 0x3f
 2132 0121 19       		.uleb128 0x19
 2133 0122 03       		.uleb128 0x3
 2134 0123 0E       		.uleb128 0xe
 2135 0124 3A       		.uleb128 0x3a
 2136 0125 0B       		.uleb128 0xb
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 54


 2137 0126 3B       		.uleb128 0x3b
 2138 0127 05       		.uleb128 0x5
 2139 0128 27       		.uleb128 0x27
 2140 0129 19       		.uleb128 0x19
 2141 012a 11       		.uleb128 0x11
 2142 012b 01       		.uleb128 0x1
 2143 012c 12       		.uleb128 0x12
 2144 012d 06       		.uleb128 0x6
 2145 012e 40       		.uleb128 0x40
 2146 012f 18       		.uleb128 0x18
 2147 0130 9742     		.uleb128 0x2117
 2148 0132 19       		.uleb128 0x19
 2149 0133 01       		.uleb128 0x1
 2150 0134 13       		.uleb128 0x13
 2151 0135 00       		.byte	0
 2152 0136 00       		.byte	0
 2153 0137 13       		.uleb128 0x13
 2154 0138 2E       		.uleb128 0x2e
 2155 0139 01       		.byte	0x1
 2156 013a 3F       		.uleb128 0x3f
 2157 013b 19       		.uleb128 0x19
 2158 013c 03       		.uleb128 0x3
 2159 013d 0E       		.uleb128 0xe
 2160 013e 3A       		.uleb128 0x3a
 2161 013f 0B       		.uleb128 0xb
 2162 0140 3B       		.uleb128 0x3b
 2163 0141 05       		.uleb128 0x5
 2164 0142 27       		.uleb128 0x27
 2165 0143 19       		.uleb128 0x19
 2166 0144 11       		.uleb128 0x11
 2167 0145 01       		.uleb128 0x1
 2168 0146 12       		.uleb128 0x12
 2169 0147 06       		.uleb128 0x6
 2170 0148 40       		.uleb128 0x40
 2171 0149 18       		.uleb128 0x18
 2172 014a 9642     		.uleb128 0x2116
 2173 014c 19       		.uleb128 0x19
 2174 014d 01       		.uleb128 0x1
 2175 014e 13       		.uleb128 0x13
 2176 014f 00       		.byte	0
 2177 0150 00       		.byte	0
 2178 0151 14       		.uleb128 0x14
 2179 0152 34       		.uleb128 0x34
 2180 0153 00       		.byte	0
 2181 0154 03       		.uleb128 0x3
 2182 0155 0E       		.uleb128 0xe
 2183 0156 3A       		.uleb128 0x3a
 2184 0157 0B       		.uleb128 0xb
 2185 0158 3B       		.uleb128 0x3b
 2186 0159 0B       		.uleb128 0xb
 2187 015a 49       		.uleb128 0x49
 2188 015b 13       		.uleb128 0x13
 2189 015c 3F       		.uleb128 0x3f
 2190 015d 19       		.uleb128 0x19
 2191 015e 02       		.uleb128 0x2
 2192 015f 18       		.uleb128 0x18
 2193 0160 00       		.byte	0
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 55


 2194 0161 00       		.byte	0
 2195 0162 00       		.byte	0
 2196              		.section	.debug_aranges,"",%progbits
 2197 0000 A4000000 		.4byte	0xa4
 2198 0004 0200     		.2byte	0x2
 2199 0006 00000000 		.4byte	.Ldebug_info0
 2200 000a 04       		.byte	0x4
 2201 000b 00       		.byte	0
 2202 000c 0000     		.2byte	0
 2203 000e 0000     		.2byte	0
 2204 0010 00000000 		.4byte	.LFB2
 2205 0014 24000000 		.4byte	.LFE2-.LFB2
 2206 0018 00000000 		.4byte	.LFB3
 2207 001c 0C020000 		.4byte	.LFE3-.LFB3
 2208 0020 00000000 		.4byte	.LFB4
 2209 0024 38000000 		.4byte	.LFE4-.LFB4
 2210 0028 00000000 		.4byte	.LFB5
 2211 002c 18000000 		.4byte	.LFE5-.LFB5
 2212 0030 00000000 		.4byte	.LFB6
 2213 0034 1C000000 		.4byte	.LFE6-.LFB6
 2214 0038 00000000 		.4byte	.LFB7
 2215 003c 1C000000 		.4byte	.LFE7-.LFB7
 2216 0040 00000000 		.4byte	.LFB8
 2217 0044 48000000 		.4byte	.LFE8-.LFB8
 2218 0048 00000000 		.4byte	.LFB9
 2219 004c 44000000 		.4byte	.LFE9-.LFB9
 2220 0050 00000000 		.4byte	.LFB10
 2221 0054 1C000000 		.4byte	.LFE10-.LFB10
 2222 0058 00000000 		.4byte	.LFB11
 2223 005c 30000000 		.4byte	.LFE11-.LFB11
 2224 0060 00000000 		.4byte	.LFB12
 2225 0064 2C000000 		.4byte	.LFE12-.LFB12
 2226 0068 00000000 		.4byte	.LFB13
 2227 006c 1C000000 		.4byte	.LFE13-.LFB13
 2228 0070 00000000 		.4byte	.LFB14
 2229 0074 1C000000 		.4byte	.LFE14-.LFB14
 2230 0078 00000000 		.4byte	.LFB15
 2231 007c 30000000 		.4byte	.LFE15-.LFB15
 2232 0080 00000000 		.4byte	.LFB16
 2233 0084 2C000000 		.4byte	.LFE16-.LFB16
 2234 0088 00000000 		.4byte	.LFB17
 2235 008c A4000000 		.4byte	.LFE17-.LFB17
 2236 0090 00000000 		.4byte	.LFB18
 2237 0094 90000000 		.4byte	.LFE18-.LFB18
 2238 0098 00000000 		.4byte	.LFB19
 2239 009c 80000000 		.4byte	.LFE19-.LFB19
 2240 00a0 00000000 		.4byte	0
 2241 00a4 00000000 		.4byte	0
 2242              		.section	.debug_ranges,"",%progbits
 2243              	.Ldebug_ranges0:
 2244 0000 00000000 		.4byte	.LFB2
 2245 0004 24000000 		.4byte	.LFE2
 2246 0008 00000000 		.4byte	.LFB3
 2247 000c 0C020000 		.4byte	.LFE3
 2248 0010 00000000 		.4byte	.LFB4
 2249 0014 38000000 		.4byte	.LFE4
 2250 0018 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 56


 2251 001c 18000000 		.4byte	.LFE5
 2252 0020 00000000 		.4byte	.LFB6
 2253 0024 1C000000 		.4byte	.LFE6
 2254 0028 00000000 		.4byte	.LFB7
 2255 002c 1C000000 		.4byte	.LFE7
 2256 0030 00000000 		.4byte	.LFB8
 2257 0034 48000000 		.4byte	.LFE8
 2258 0038 00000000 		.4byte	.LFB9
 2259 003c 44000000 		.4byte	.LFE9
 2260 0040 00000000 		.4byte	.LFB10
 2261 0044 1C000000 		.4byte	.LFE10
 2262 0048 00000000 		.4byte	.LFB11
 2263 004c 30000000 		.4byte	.LFE11
 2264 0050 00000000 		.4byte	.LFB12
 2265 0054 2C000000 		.4byte	.LFE12
 2266 0058 00000000 		.4byte	.LFB13
 2267 005c 1C000000 		.4byte	.LFE13
 2268 0060 00000000 		.4byte	.LFB14
 2269 0064 1C000000 		.4byte	.LFE14
 2270 0068 00000000 		.4byte	.LFB15
 2271 006c 30000000 		.4byte	.LFE15
 2272 0070 00000000 		.4byte	.LFB16
 2273 0074 2C000000 		.4byte	.LFE16
 2274 0078 00000000 		.4byte	.LFB17
 2275 007c A4000000 		.4byte	.LFE17
 2276 0080 00000000 		.4byte	.LFB18
 2277 0084 90000000 		.4byte	.LFE18
 2278 0088 00000000 		.4byte	.LFB19
 2279 008c 80000000 		.4byte	.LFE19
 2280 0090 00000000 		.4byte	0
 2281 0094 00000000 		.4byte	0
 2282              		.section	.debug_line,"",%progbits
 2283              	.Ldebug_line0:
 2284 0000 9E020000 		.section	.debug_str,"MS",%progbits,1
 2284      02004000 
 2284      00000201 
 2284      FB0E0D00 
 2284      01010101 
 2285              	.LASF10:
 2286 0000 75696E74 		.ascii	"uint16\000"
 2286      313600
 2287              	.LASF62:
 2288 0007 433A5C55 		.ascii	"C:\\Users\\Andrew Joseph\\Desktop\\Senior Design\\t"
 2288      73657273 
 2288      5C416E64 
 2288      72657720 
 2288      4A6F7365 
 2289 0035 72756E6B 		.ascii	"runk\\src\\PSoC_Core\\fNIR PSoC Central\\fNIR PSoC "
 2289      5C737263 
 2289      5C50536F 
 2289      435F436F 
 2289      72655C66 
 2290 0064 43656E74 		.ascii	"Central.cydsn\000"
 2290      72616C2E 
 2290      63796473 
 2290      6E00
 2291              	.LASF48:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 57


 2292 0072 61646347 		.ascii	"adcGain\000"
 2292      61696E00 
 2293              	.LASF23:
 2294 007a 636F756E 		.ascii	"counts\000"
 2294      747300
 2295              	.LASF54:
 2296 0081 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2296      436F756E 
 2296      7473546F 
 2296      5F566F6C 
 2296      747300
 2297              	.LASF36:
 2298 0094 4144435F 		.ascii	"ADC_Init\000"
 2298      496E6974 
 2298      00
 2299              	.LASF7:
 2300 009d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2300      206C6F6E 
 2300      6720756E 
 2300      7369676E 
 2300      65642069 
 2301              	.LASF24:
 2302 00b4 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2302      496E7075 
 2302      7473506C 
 2302      6163656D 
 2302      656E7400 
 2303              	.LASF28:
 2304 00c8 4144435F 		.ascii	"ADC_StartConvert\000"
 2304      53746172 
 2304      74436F6E 
 2304      76657274 
 2304      00
 2305              	.LASF6:
 2306 00d9 6C6F6E67 		.ascii	"long long int\000"
 2306      206C6F6E 
 2306      6720696E 
 2306      7400
 2307              	.LASF0:
 2308 00e7 7369676E 		.ascii	"signed char\000"
 2308      65642063 
 2308      68617200 
 2309              	.LASF30:
 2310 00f3 73746174 		.ascii	"status\000"
 2310      757300
 2311              	.LASF13:
 2312 00fa 696E7433 		.ascii	"int32\000"
 2312      3200
 2313              	.LASF25:
 2314 0100 4144435F 		.ascii	"ADC_Start\000"
 2314      53746172 
 2314      7400
 2315              	.LASF4:
 2316 010a 6C6F6E67 		.ascii	"long int\000"
 2316      20696E74 
 2316      00
 2317              	.LASF52:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 58


 2318 0113 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2318      436F756E 
 2318      7473546F 
 2318      5F75566F 
 2318      6C747300 
 2319              	.LASF59:
 2320 0127 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2320      636F756E 
 2320      74735065 
 2320      72313056 
 2320      6F6C7400 
 2321              	.LASF9:
 2322 013b 75696E74 		.ascii	"uint8\000"
 2322      3800
 2323              	.LASF16:
 2324 0141 646F7562 		.ascii	"double\000"
 2324      6C6500
 2325              	.LASF11:
 2326 0148 75696E74 		.ascii	"uint32\000"
 2326      333200
 2327              	.LASF38:
 2328 014f 6D61736B 		.ascii	"mask\000"
 2328      00
 2329              	.LASF57:
 2330 0154 4144435F 		.ascii	"ADC_initVar\000"
 2330      696E6974 
 2330      56617200 
 2331              	.LASF33:
 2332 0160 7265744D 		.ascii	"retMode\000"
 2332      6F646500 
 2333              	.LASF43:
 2334 0168 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2334      5365744C 
 2334      696D6974 
 2334      4D61736B 
 2334      00
 2335              	.LASF8:
 2336 0179 756E7369 		.ascii	"unsigned int\000"
 2336      676E6564 
 2336      20696E74 
 2336      00
 2337              	.LASF53:
 2338 0186 75566F6C 		.ascii	"uVolts\000"
 2338      747300
 2339              	.LASF5:
 2340 018d 6C6F6E67 		.ascii	"long unsigned int\000"
 2340      20756E73 
 2340      69676E65 
 2340      6420696E 
 2340      7400
 2341              	.LASF44:
 2342 019f 4144435F 		.ascii	"ADC_SetSatMask\000"
 2342      53657453 
 2342      61744D61 
 2342      736B00
 2343              	.LASF55:
 2344 01ae 766F6C74 		.ascii	"volts\000"
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 59


 2344      7300
 2345              	.LASF22:
 2346 01b4 746D7052 		.ascii	"tmpRegVal\000"
 2346      65675661 
 2346      6C00
 2347              	.LASF3:
 2348 01be 73686F72 		.ascii	"short unsigned int\000"
 2348      7420756E 
 2348      7369676E 
 2348      65642069 
 2348      6E7400
 2349              	.LASF29:
 2350 01d1 4144435F 		.ascii	"ADC_StopConvert\000"
 2350      53746F70 
 2350      436F6E76 
 2350      65727400 
 2351              	.LASF51:
 2352 01e1 6D566F6C 		.ascii	"mVolts\000"
 2352      747300
 2353              	.LASF19:
 2354 01e8 72656733 		.ascii	"reg32\000"
 2354      3200
 2355              	.LASF14:
 2356 01ee 666C6F61 		.ascii	"float32\000"
 2356      74333200 
 2357              	.LASF20:
 2358 01f6 73697A65 		.ascii	"sizetype\000"
 2358      74797065 
 2358      00
 2359              	.LASF40:
 2360 01ff 6C6F774C 		.ascii	"lowLimit\000"
 2360      696D6974 
 2360      00
 2361              	.LASF41:
 2362 0208 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2362      53657448 
 2362      6967684C 
 2362      696D6974 
 2362      00
 2363              	.LASF31:
 2364 0219 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2364      4973456E 
 2364      64436F6E 
 2364      76657273 
 2364      696F6E00 
 2365              	.LASF17:
 2366 022d 696E7436 		.ascii	"int64\000"
 2366      3400
 2367              	.LASF37:
 2368 0233 4144435F 		.ascii	"ADC_SetChanMask\000"
 2368      53657443 
 2368      68616E4D 
 2368      61736B00 
 2369              	.LASF61:
 2370 0243 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2370      72617465 
 2370      645F536F 
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 60


 2370      75726365 
 2370      5C50536F 
 2371              	.LASF47:
 2372 0260 4144435F 		.ascii	"ADC_SetGain\000"
 2372      53657447 
 2372      61696E00 
 2373              	.LASF15:
 2374 026c 666C6F61 		.ascii	"float\000"
 2374      7400
 2375              	.LASF42:
 2376 0272 68696768 		.ascii	"highLimit\000"
 2376      4C696D69 
 2376      7400
 2377              	.LASF49:
 2378 027c 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2378      436F756E 
 2378      7473546F 
 2378      5F6D566F 
 2378      6C747300 
 2379              	.LASF39:
 2380 0290 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2380      5365744C 
 2380      6F774C69 
 2380      6D697400 
 2381              	.LASF1:
 2382 02a0 756E7369 		.ascii	"unsigned char\000"
 2382      676E6564 
 2382      20636861 
 2382      7200
 2383              	.LASF58:
 2384 02ae 4144435F 		.ascii	"ADC_offset\000"
 2384      6F666673 
 2384      657400
 2385              	.LASF2:
 2386 02b9 73686F72 		.ascii	"short int\000"
 2386      7420696E 
 2386      7400
 2387              	.LASF27:
 2388 02c3 4144435F 		.ascii	"ADC_Stop\000"
 2388      53746F70 
 2388      00
 2389              	.LASF21:
 2390 02cc 63684E75 		.ascii	"chNum\000"
 2390      6D00
 2391              	.LASF34:
 2392 02d2 6368616E 		.ascii	"chan\000"
 2392      00
 2393              	.LASF18:
 2394 02d7 63686172 		.ascii	"char\000"
 2394      00
 2395              	.LASF56:
 2396 02dc 4144435F 		.ascii	"ADC_channelsConfig\000"
 2396      6368616E 
 2396      6E656C73 
 2396      436F6E66 
 2396      696700
 2397              	.LASF46:
ARM GAS  C:\Users\ANDREW~1\AppData\Local\Temp\cchQxSpu.s 			page 61


 2398 02ef 6F666673 		.ascii	"offset\000"
 2398      657400
 2399              	.LASF50:
 2400 02f6 61646343 		.ascii	"adcCounts\000"
 2400      6F756E74 
 2400      7300
 2401              	.LASF26:
 2402 0300 4144435F 		.ascii	"ADC_Enable\000"
 2402      456E6162 
 2402      6C6500
 2403              	.LASF12:
 2404 030b 696E7431 		.ascii	"int16\000"
 2404      3600
 2405              	.LASF45:
 2406 0311 4144435F 		.ascii	"ADC_SetOffset\000"
 2406      5365744F 
 2406      66667365 
 2406      7400
 2407              	.LASF60:
 2408 031f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2408      4320342E 
 2408      392E3320 
 2408      32303135 
 2408      30333033 
 2409 0352 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2409      20726576 
 2409      6973696F 
 2409      6E203232 
 2409      31323230 
 2410 0385 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2410      66756E63 
 2410      74696F6E 
 2410      2D736563 
 2410      74696F6E 
 2411              	.LASF35:
 2412 03ad 72657375 		.ascii	"result\000"
 2412      6C7400
 2413              	.LASF32:
 2414 03b4 4144435F 		.ascii	"ADC_GetResult16\000"
 2414      47657452 
 2414      6573756C 
 2414      74313600 
 2415              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
